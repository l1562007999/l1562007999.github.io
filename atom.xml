<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>绕 梁</title>
  
  <subtitle>余音绕梁-三日不绝</subtitle>
  <link href="http://l1562007999.github.io/atom.xml" rel="self"/>
  
  <link href="http://l1562007999.github.io/"/>
  <updated>2022-07-26T10:00:36.372Z</updated>
  <id>http://l1562007999.github.io/</id>
  
  <author>
    <name>梁珍发</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue2基础</title>
    <link href="http://l1562007999.github.io/2022/07/26/vue2%E5%9F%BA%E7%A1%80/"/>
    <id>http://l1562007999.github.io/2022/07/26/vue2%E5%9F%BA%E7%A1%80/</id>
    <published>2022-07-26T05:27:15.000Z</published>
    <updated>2022-07-26T10:00:36.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Vue"><a href="#什么是Vue" class="headerlink" title="什么是Vue"></a>什么是Vue</h1><ul><li>是一套用于构建用户界面的渐进式 javascript 框架(渐进式:想用什么就用什么不必全都用)</li><li>在传统的前端开发中,是基于 jQuery+ 模板引擎 来构建界面的</li></ul><h1 id="vue全家桶"><a href="#vue全家桶" class="headerlink" title="vue全家桶"></a>vue全家桶</h1><ul><li>vue 核心库</li><li>vue-router (路由)</li><li>vuex (全局状态管理)</li><li>vue 组件库(快速搭建页面UI效果的方案)</li></ul><p><strong>辅助vue开发的工具</strong></p><ul><li>vue-cli (基于webpack一键生成vue工程化项目)</li><li>vite (一键生成vue工程化项目-小而巧)</li><li>vue-detools (浏览器插件,辅助调试的工具)</li><li>vetur (vscode插件,提供语法高亮和智能提示)</li></ul><h1 id="vue特性"><a href="#vue特性" class="headerlink" title="vue特性"></a>vue特性</h1><ul><li>数据驱动视图</li><li>双向数据绑定</li></ul><h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><ul><li>MVVM 是数据驱动视图和双向数据绑定的核心原理</li><li>M-Model –渲染依赖的数据源</li><li>V-view –渲染的DOM结构</li><li>VM-ViewModel –vue实例是MVVM的核心</li></ul><h1 id="VUE指令-lt-teamplate-gt"><a href="#VUE指令-lt-teamplate-gt" class="headerlink" title="VUE指令-&lt;teamplate&gt;"></a>VUE指令-&lt;teamplate&gt;</h1><h2 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a><strong>内容渲染指令</strong></h2><ul><li><p>v-text —会覆盖元素中的默认内容</p></li><li><p><code>&#123;&#123; &#125;&#125; </code>— 插值表达式</p></li><li><p>v-html —可以识别标签并渲染标签</p></li><li><p><code>&#123;&#123; &#125;&#125;</code>中可以是三元运算,可以简单的运算,也可以调用方法</p></li></ul><h2 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a><strong>属性绑定指令</strong></h2><ul><li>v-bind 给标签属性动态绑定属性值</li><li>简写 — :</li><li>可以做简单的运算,字符串拼接</li></ul><h2 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a><strong>事件绑定指令</strong></h2><ul><li>v-on 给标签绑定事件 (v-on:click&#x3D;”clickFn”)</li><li>处理函数在methods中声明</li><li>简写---@click&#x3D;”clickFn”</li><li>事件对象参数e</li></ul><ol><li>没有参数,回调函数参数e</li><li>有参数,就用$event占位,在回调中e接收</li></ol><ul><li>事件修饰符</li></ul><ol><li>.prevent 阻止浏览器默认行为(@click.prevent&#x3D;”clickFn”)</li><li>.stop 阻止冒泡(@click.stop&#x3D;”clickFn”)</li></ol><ul><li>按键修饰符</li></ul><ol><li>.enter 回车(@keyup.enter&#x3D;”keyupFn”)</li><li>.esc (@keyup.esc&#x3D;”keyupFn”)</li></ol><h2 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a><strong>双向绑定指令</strong></h2><ul><li>v-model 双向数据绑定,不操作DOM,快速获取表单数据</li><li>只要给表单元素绑定才有意义</li><li>与select下拉表单绑定时,实际绑定的是option中的value属性</li><li>v-model 的修饰符</li></ul><ol><li>.number 自动将用户输入的值转化为数字类型</li><li>.trim 自动过滤输入的空白字符</li><li>.lazy 在输入框失去焦点时才更新</li></ol><h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a><strong>条件渲染指令</strong></h2><ul><li>v-if v-else</li><li>v-show</li></ul><hr><ol><li>为false时隐藏为true时显示</li><li>v-if 的原理是销毁和重建标签</li><li>v-show 的原理是给标签添加display:”none”属性</li><li>频繁切换时用v-show性能高</li><li>v-if v-else 判断是否为ture为ture显示,否则隐藏</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div v-if=&quot;i&gt;90&quot;&gt;优秀&lt;/div&gt;</span><br><span class="line">&lt;div v-else=&quot;i&gt;80&quot;&gt;良好&lt;/div&gt;</span><br><span class="line">&lt;div v-else=&quot;i&gt;70&quot;&gt;中等&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;差劲&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="循环渲染指令"><a href="#循环渲染指令" class="headerlink" title="循环渲染指令"></a><strong>循环渲染指令</strong></h2><ul><li><code>v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;</code></li><li>基于 数组,对象,数字 来循环渲染列表结构</li><li>item为数组中的每一项</li><li>index为当前循环项的索引值</li><li>list为循环的数据数组</li><li>key属性为了提升更新元素的性能,有ID绑定ID没有ID绑索引</li><li><strong>通过索引更改数组中的数据方法this.$set(数组,索引,要更改的数据)</strong></li></ul><blockquote><p> <strong>v-for指令中的key理解</strong></p></blockquote><ul><li>key属性根据<strong>虚拟DOM和diff</strong>算法提升更新元素的性能</li><li><strong>数组中哪些方法会 导致数组更新</strong></li></ul><ol><li>push( ) 末尾添加元素</li><li>pop( ) 末尾删除元素</li><li>shift( ) 删除数组第一个元素</li><li>unshift( ) 添加数组第一个元素</li><li>splice( ) 从数组中添加&#x2F;删除项目，然后返回被删除的项目。</li><li>sort( ) 对数组的元素进行排序</li><li>reverse( ) 翻转数组</li></ol><ul><li><p>更新时新旧虚拟dom根据diff算法进行对比</p></li><li><p>尝试复用标签,就地更新内容</p></li><li><p><strong>虚拟Dom:本质上就是保存 节点信息,属性和内容的JS对象</strong></p></li><li><p>保存了标签的最重要的三个信息(类型,属性,子节点信息)</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/26574986-a9d14ae3e63f0f7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/773/format/webp"></p><h2 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a><strong>diff算法</strong></h2><ol><li>同级比较根元素发生变化就会删除整个dom树重新创建</li><li>根元素没有变化,只是属性变了,那就只更新属性</li><li>子元素变化 v-for更新分有key和无key</li></ol><ul><li>无key:子节点哪里变了更新哪里属性或内容</li><li>有key:<br>1)key为索引 – 和无key更新一样哪里变了更新哪里<br>2)key为id或不重复的字符串 – 根据id比对,内容不变就地复用,极大程度复用标签提升更新性能</li></ul><h2 id="动态class绑定"><a href="#动态class绑定" class="headerlink" title="动态class绑定"></a>动态class绑定</h2><ul><li>直接绑定: <code>:class=&quot;vue数据变量&quot;</code></li><li>三元绑定: <code>:class= &quot;vue数据变量布尔值? &#39;类名&#39;:&#39; &#39;&quot;</code></li><li>对象绑定: <code>:class= &quot;&#123;类名:vue数据变量布尔值&#125;&quot;</code></li><li>数组绑定: <code>:class=&quot;[vue数据变量]&quot;</code></li><li>动态class和静态class并存会合并到一起</li></ul><h2 id="style动态绑定"><a href="#style动态绑定" class="headerlink" title="style动态绑定"></a>style动态绑定</h2><p>:style&#x3D;”{属性名:属性值}”</p><h1 id="VUE属性—-lt-script-gt"><a href="#VUE属性—-lt-script-gt" class="headerlink" title="VUE属性—&lt;script&gt;"></a>VUE属性—&lt;script&gt;</h1><h2 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性-computed"></a>计算属性-computed</h2><p><strong>注意: 计算属性使用时不能加( ),计算属性必须return一个结果</strong></p><ul><li>一个变量的值,依赖另外一些数据计算得来的结果,就会用到计算属性</li><li>基于依赖项的值将结果进行缓存,依赖项不变,就直接从内存中取结果,而不是重新计算</li><li>计算属性也是vue数据变量, 所以不要和data中的变量重名,用法和data中的变量用法完全相同</li><li>只要计算属性的依赖项发生改变, 那么就会重新计算</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    &quot;计算属性名&quot;( )&#123;</span><br><span class="line">        return &quot;值&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>计算属性完整写法</strong></p><ul><li>计算属性用在v-model上进行双向数据绑定时,改变计算属性的值时,就会用到完整写法</li><li>获取计算属性值的时候会触发get函数</li><li>设置计算属性值的时候会触发set函数</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">   &quot;计算属性名&quot;:&#123;</span><br><span class="line">           set(改变后的值)&#123;</span><br><span class="line">         &#125;,</span><br><span class="line">           get()&#123;</span><br><span class="line">           return &quot;值&quot;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue监听器watch"><a href="#vue监听器watch" class="headerlink" title="vue监听器watch"></a>vue监听器watch</h2><ul><li>可以监听data&#x2F;computed属性值的变化</li><li>监听基本数据类型</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">       &quot;被侦听的属性名&quot;(newval,lodval)&#123;</span><br><span class="line">          console.log(newval,lodval)</span><br><span class="line">      &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>监听引用数据类型(复杂数据类型)</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">       <span class="string">&quot;要侦听的属性名&quot;</span>:&#123;</span><br><span class="line">           immediate: <span class="literal">true</span>,   <span class="comment">//立即执行</span></span><br><span class="line">           deep: <span class="literal">true</span>,     <span class="comment">//深度监听</span></span><br><span class="line">           <span class="built_in">handler</span> (newval) &#123;   <span class="comment">//侦听函数</span></span><br><span class="line">               console.<span class="built_in">log</span>(newval)    </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h2><p>name,data,methods,</p><h1 id="VUE组件"><a href="#VUE组件" class="headerlink" title="VUE组件"></a>VUE组件</h1><ul><li>好处:各自独立,方便复用</li><li>组件是可复用的vue实例</li><li>组件的组成&#x3D; 封装标签+样式+js代码</li><li>组件化: 封装的思想,把页面上(可重用的部分)封装为组件,从而方便项目的开发与维护</li><li>组件的创建并注册</li></ul><ol><li>创建组件,封装要复用的标签,样式,js代码</li><li>导入组价(import 组件对象 from 文件路径)</li><li>注册组件</li><li>使用组件, 把组件名当自定义标签使用<br>(1)全局注册- min.js中</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span>  组件对象 <span class="keyword">from</span> <span class="string">&#x27;vue组件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;组件名&quot;</span>,组件对象)</span><br></pre></td></tr></table></figure><p>(2)局部注册 - 使用组件的vue文件中</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要使用组件的vue文件</span></span><br><span class="line"><span class="keyword">import</span>  组件对象 <span class="keyword">from</span> <span class="string">&#x27;vue组件路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">default</span> &#123;</span><br><span class="line">     <span class="attr">components</span>:&#123;</span><br><span class="line">          <span class="string">&quot;组件名&quot;</span>:组件对象</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组件的命名</li></ul><ol><li>大驼峰命名 例如:MyProduct –&gt;推荐使用大驼峰</li><li>烤串法 例如: my-product</li></ol><ul><li>组件的使用</li></ul><ol><li>大驼峰命名 例如:MyProduct</li><li>烤串法 例如: my-product –&gt;推荐使用烤串法<br>结论:组件命名用大驼峰,组件使用时用烤串法</li></ol><ul><li>组件使用时用双标签还是单标签?<br>如果组件标签需要夹内容就用双标签,不夹内容就用单标签</li></ul><hr><ul><li><p>组件中的name属性<br>组件的name属性的值可用作注册组件时的组件名</p></li><li><p>组件style标签中的scoped属性</p></li></ul><ol><li>作用:使当前组件的css样式只在当前组件中生效,不会影响全局</li><li>原理:会在当前组件的标签上生成一个data-v-hash:8, 每个组件内的data-v-hash:8都是不同的,今后它会配合我们自己写的选择器上加一个属性选择器,从而保证了这个选择器在组件内部的唯一性,而不会影响其他组件</li></ol><h1 id="组件之间传值"><a href="#组件之间传值" class="headerlink" title="组件之间传值"></a>组件之间传值</h1><ul><li>被引入的是儿子<br>在A组件中, import B from ‘B.vue’<br>A(父) , B(子)</li></ul><h2 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a><strong>父传子</strong></h2><ol><li>子组件中通过props属性接收数据</li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件定义</span></span><br><span class="line">props:&#123;</span><br><span class="line">  变量名:&#123;</span><br><span class="line">     <span class="keyword">type</span>:变量数据类型,</span><br><span class="line">     <span class="keyword">default</span>: 默认值</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>父组件,通过属性的方式传值</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">B</span> <span class="attr">:</span>变量名=<span class="string">&quot;值&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">B</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a><strong>子传父</strong></h2><ol><li>父传给子的数据在子中是只读的不能更改</li><li>从父到子的数据流向,叫单向数据流</li><li>子想修改父组件传过来的数据只能通过子传父的方式通知父组件修改</li><li>子传父语法:</li></ol><p>(1) 父组件内,绑定自定义事件和事件处理函数</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">son</span>  @自定义事件名=<span class="string">&quot;事件处理函数&quot;</span>  &gt;</span></span><br></pre></td></tr></table></figure><p>(2) 子组件内部在合适的时机触发父组件的自定义事件</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">&#x27;父组件中的自定义事件名&#x27;</span>,传参,传参)</span><br></pre></td></tr></table></figure><ul><li><strong>单向数据流</strong><br>父传子时 子组件中的不能更改父组件中的变量(props中的变量都是只读的)<br>解决方案: 子传父(子通知父, 父自己改)</li></ul><h2 id="两个没有关系或者兄弟组件之间传值"><a href="#两个没有关系或者兄弟组件之间传值" class="headerlink" title="两个没有关系或者兄弟组件之间传值"></a><strong>两个没有关系或者兄弟组件之间传值</strong></h2><ul><li>EventBus:<br>创建一个空白 Vue对象 <code>new Vue()</code> 只负责监听<code>$on</code>和<code>$emit</code></li><li>用法</li></ul><ol><li>创建一个空白Vue对象,封装到EventBus.js文件</li><li>A: 引入空白的vue对象,EventBus.$on(“自定义事件名” ,事件处理函数)</li><li>B: 引入相同的这个空白Vue对象, EventBus.$emit(“自定义事件名”,值)</li></ol><h1 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h1><blockquote><ul><li>组件从创建到销毁的过程就是组件的生命周期</li></ul></blockquote><p><strong>钩子函数</strong></p><ul><li>四个阶段八个方法</li></ul><ol><li>初始化<br>beforeCreate<br>created</li></ol><ul><li>created 钩子函数可以获取data中的变量但不能获取真实的DOM</li><li>created 钩子函数可以用来发送axios请求</li></ul><hr><ol start="2"><li>挂载<br>beforeMount<br>mounted</li></ol><ul><li>在mounted钩子函数中才可以拿到真实的DOM</li></ul><ol start="3"><li>更新<br>beforeUpdate<br>updated</li></ol><ul><li>data中数据改变后会触发DOM更新在updated钩子函数中可以拿到更新后的”真实DOM”</li></ul><ol start="4"><li>销毁<br>beforeDestroy<br>destroyed</li></ol><ul><li>destroyed钩子函数中清除当前组件自己的定时器 &#x2F; 延时器 &#x2F; 全局事件 (eventBus)</li></ul><h1 id="axios发送axjx请求"><a href="#axios发送axjx请求" class="headerlink" title="axios发送axjx请求"></a>axios发送axjx请求</h1><ul><li><p>支持客户端发送Ajax请求</p></li><li><p>支持服务器端Node.js发送请求</p></li><li><p>支持Promise 相关用法</p></li><li><p>支持请求和响应的拦截器功能</p></li><li><p>自动转换JSON数据</p></li><li><p>什么是ajax?<br>一种前端异步请求后端数据的技术</p></li><li><p>ajax原理?<br>浏览器window接口的XMLHttpRequest</p></li><li><p>axios是什么?<br>基于原生ajax+Promise技术封装用于前后端的请求库</p></li></ul><p><strong>axios的使用</strong></p><ol><li>下载引入axios(yarn add axios)</li></ol><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>发送请求</li></ol><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    method:<span class="string">&quot;请求方式&quot;</span>,  <span class="comment">//get &amp;put &amp; post...</span></span><br><span class="line">    url:<span class="string">&quot;请求的路径&quot;</span>,  <span class="comment">//http://123.57.109...</span></span><br><span class="line">    data:&#123;  </span><br><span class="line">      XXX:XXX     <span class="comment">//请求体参数</span></span><br><span class="line">  &#125;,</span><br><span class="line">     <span class="keyword">params</span>:&#123;</span><br><span class="line">      XXX:XXX     <span class="comment">//查询参数,会拼接到url路径后</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(res=&#123;</span><br><span class="line">    <span class="comment">//请求成功的回调</span></span><br><span class="line">&#125;).<span class="keyword">catch</span>(err=&#123;</span><br><span class="line">    <span class="comment">//请求失败的回调</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="refs获取DOM-amp-组件"><a href="#refs获取DOM-amp-组件" class="headerlink" title="$refs获取DOM&amp;组件"></a>$refs获取DOM&amp;组件</h1><ul><li><strong>$refs 可以获取DOM标签</strong></li><li><strong>也可以获取组件实例从而调用组件中的方法或属性</strong></li><li>只有在Vue中才能使用$refs获取DOM</li><li>$refs使用</li></ul><ol><li>标签定义ref属性和值</li><li>this.$refs.值 - 原地获取DOM</li></ol><h1 id="nextTick获取更新后的DOM"><a href="#nextTick获取更新后的DOM" class="headerlink" title="$nextTick获取更新后的DOM"></a>$nextTick获取更新后的DOM</h1><ul><li>问题 : data数据改变,”dom更新是异步的”</li></ul><ol><li>在setTimeOut延时器中获取DOM</li><li>在Vue中提供$nextTick方法(等待DOM更新后再执行此方法中的回调函数)</li></ol><ul><li>$nextTick原理<br>尝试用Promise.then() &#x2F; setTimeout &amp; setImmediate</li><li>$nextTick使用</li></ul><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">   <span class="title function_">getElementById</span>(<span class="string">&quot;myp&quot;</span>).<span class="property">innerHTML</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="lt-keep-alive-gt-组件缓存"><a href="#lt-keep-alive-gt-组件缓存" class="headerlink" title="&lt;keep-alive&gt;组件缓存"></a>&lt;keep-alive&gt;组件缓存</h1><ul><li>用&lt;keep-alive&gt;包裹的组件会被缓存到内存中在切换组件的时候就不会被销毁和重建,提升渲染性能</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- vue内置的组件component, 可以动态显示组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h1><ul><li>vue提供组件插槽能力, 允许开发者在封装组件时，把不确定的部分定义为插槽</li><li>插槽步骤</li></ul><ol><li>组件内用&lt;slot&gt;&lt;&#x2F;slot&gt;占位</li><li>使用组件时&lt;template&gt;&lt;&#x2F;template&gt;夹着的地方, 传入标签替换slot</li></ol><ul><li><slot>夹着内容默认显示内容, 如果不给插槽slot传东西, 则使用<slot>夹着的内容在原地显示</li><li>具名插槽(当一个组件内有2处以上需要外部传入标签的地方,传入的标签可以分别派发给不同的slot位置)</li></ul><ol><li>在slot标签上用name属性命名</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在template标签上用 v-slot:插槽名 传入具体标签 , v-slot:可以简写成 “ # “</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">one</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">template</span> #<span class="attr">two</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../assets/mm.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>作用域插槽</strong><br>子组件里值, 在给插槽赋值时在父组件环境下使用</li></ul><ol><li>创建组件, 准备slot, 在slot上绑定属性和子组件值</li><li>使用组件, 传入自定义标签, 用template和v-slot&#x3D;”自定义变量名”</li><li>自定义变量名会自动绑定slot上所有属性, 就可以使用子组件内值, 并替换slot位置</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是个Pannel3-子组件, 下面是插槽位置<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;one&quot;</span> <span class="attr">:row</span>=<span class="string">&quot;slotDefault&quot;</span>&gt;</span>&#123;&#123; slotDefault.default1 &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">slotDefault</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default1</span>: <span class="string">&quot;无名氏&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default2</span>: <span class="string">&quot;孙红雷&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!-- 想要改变默认内容, 但是默认数据在子组件里, 想让插槽使用就使用插槽作用域 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">      口诀: 1.创建组件, 准备slot, 在slot上绑定属性和子组件值</span></span><br><span class="line"><span class="comment">      2. 使用组件, 传入自定义标签, 用template和v-slot=&quot;自定义变量名&quot;</span></span><br><span class="line"><span class="comment">      3. 自定义变量名会自动绑定slot上所有属性, 就可以使用子组件内值, 并替换slot位置</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Pannel3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">one</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; scope.row.default2 &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Pannel3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Pannel3</span> <span class="keyword">from</span> <span class="string">&#x27;./Pannel3&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Pannel3</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h2 id="局部注册和使用"><a href="#局部注册和使用" class="headerlink" title="局部注册和使用"></a><strong>局部注册和使用</strong></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 局部注册</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">focus</span>: &#123; <span class="comment">// 自定义指令名</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">inserted</span>(<span class="params">el</span>)&#123; <span class="comment">// 固定配置项 - 当指令插入到标签自动触发此函数</span></span></span><br><span class="line"><span class="language-javascript">            el.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a><strong>全局注册</strong></h2><p>在main.js用 Vue.directive()方法来进行注册, 以后随便哪个.vue文件里都可以直接用v-fofo指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">&quot;fofo&quot;</span>, &#123;</span><br><span class="line">  inserted(el)&#123;</span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="自定义指令-接值"><a href="#自定义指令-接值" class="headerlink" title="自定义指令-接值"></a>自定义指令-接值</h2><ul><li>使用自定义指令, 传入一个值</li></ul><p>main.js定义处修改一下</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Vue.directive(<span class="string">&quot;color&quot;</span>, &#123;</span><br><span class="line">  inserted(el, binding)&#123; <span class="comment">// 插入时触发此函数</span></span><br><span class="line">    el.style.color = binding.<span class="keyword">value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  update(el, binding)&#123; <span class="comment">// 更新时触发此函数</span></span><br><span class="line">    el.style.color = binding.<span class="keyword">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="router-路由"><a href="#router-路由" class="headerlink" title="router 路由"></a>router 路由</h1><ul><li>路径和组件的映射关系</li><li>vue-router本质是一个第三方包</li></ul><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><ol><li>终端下载<br>yarn add vue-router</li><li>导入路由</li></ol><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>注册</li></ol><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在vue中，使用使用vue的插件，都需要调用Vue.use()</span></span><br><span class="line">Vue.<span class="keyword">use</span>(VueRouter)</span><br></pre></td></tr></table></figure><ol start="4"><li>创建规则数组</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/find&quot;</span>,</span><br><span class="line">    component: Find</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/my&quot;</span>,</span><br><span class="line">    component: My</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/part&quot;</span>,</span><br><span class="line">    component: Part</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="5"><li>创建路由对象 - 传入规则</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> router = <span class="keyword">new</span> <span class="built_in">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>关联到vue实例</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Vue</span>(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="7"><li>设置路由挂载点</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue路由-声明式导航"><a href="#vue路由-声明式导航" class="headerlink" title="vue路由 - 声明式导航"></a>vue路由 - 声明式导航</h2><ul><li>vue-router提供了一个全局组件 router-link</li><li>router-link实质上最终会渲染成a链接 to属性等价于提供 href属性(to无需#)</li><li>router-link提供了声明式导航高亮的功能(自带类名)</li><li>router-link自带的2个类名的区别是什么?</li></ul><ol><li>router-link-exact-active (精确匹配) url中hash值路径, 与href属性值完全相同, 设置此类名</li><li>router-link-active (模糊匹配) url中hash值, 包含href属性值这个路径</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer_wrap&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/find&quot;</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/my&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/part&quot;</span>&gt;</span>朋友<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="声明式导航-跳转传参"><a href="#声明式导航-跳转传参" class="headerlink" title="声明式导航 - 跳转传参"></a>声明式导航 - 跳转传参</h2><ul><li>在跳转路由时, 可以给路由对应的组件内传值</li><li>在router-link上的to属性传值, 语法格式如</li><li>?key&#x3D;value 用$route.query.key 取值</li><li>&#x2F;值 提前在路由规则&#x2F;path&#x2F;:key 用$route.params.key 取值</li></ul><ol><li>&#x2F;path?参数名&#x3D;值</li><li>&#x2F;path&#x2F;值 – 需要路由对象提前配置 path: “&#x2F;path&#x2F;参数名”</li></ol><ul><li>对应页面组件接收传递过来的值</li><li>$route.query.参数名</li><li>$route.params.参数名</li></ul><p>创建components&#x2F;Part.vue - 准备接收路由上传递的参数和值</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>关注明星<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>发现精彩<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>寻找伙伴<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>加入我们<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>人名: &#123;&#123; $route.query.name &#125;&#125; -- &#123;&#123; $route.params.username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>路由定义</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&quot;/part&quot;</span>,</span><br><span class="line">    component: Part</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/part/:username&quot;</span>, // 有:的路径代表要接收具体的值</span><br><span class="line">    component: Part</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>导航跳转, 传值给MyGoods.vue组件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/part?name=小传&quot;</span>&gt;</span>朋友-小传<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/part/小智&quot;</span>&gt;</span>朋友-小智<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue路由-重定向-amp-模式-amp-404页面"><a href="#vue路由-重定向-amp-模式-amp-404页面" class="headerlink" title="vue路由 - 重定向&amp;模式&amp;404页面"></a>vue路由 - 重定向&amp;模式&amp;404页面</h2><p><strong>路由 - 重定向</strong></p><ul><li>网页打开url默认hash值是&#x2F;路径</li><li>redirect是设置要重定向到哪个路由路径</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>, <span class="comment">// 默认hash值路径</span></span><br><span class="line">    redirect: <span class="string">&quot;/find&quot;</span> <span class="comment">// 重定向到/find</span></span><br><span class="line">    <span class="comment">// 浏览器url中#后的路径被改变成/find-重新匹配数组规则</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>404页面</strong></p><ul><li>放在路由最后, path匹配*(任意路径) – 前面不匹配就命中最后这个, 显示对应404组件页面</li><li>步骤:</li></ul><ol><li>创建NotFound页面</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;404图片路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在main.js - 修改路由配置</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/NotFound&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// ...省略了其他配置</span></span><br><span class="line">  <span class="comment">// 404在最后(规则是从前往后逐个比较path)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">NotFound</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>路由 - 模式设置</strong></p><ul><li>修改路由在地址栏的模式( hash 模式 或者 history 模式 )</li></ul><ol><li><p>hash路由例如: <a href="https://links.jianshu.com/go?to=http://localhost:8080/%23/home">http://localhost:8080/#/home</a></p></li><li><p>history路由例如: <a href="https://links.jianshu.com/go?to=http://localhost:8080/home">http://localhost:8080/home</a> (以后上线需要服务器端支持, 否则找的是文件夹)</p></li></ol><p>router&#x2F;index.js</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> router = <span class="keyword">new</span> <span class="built_in">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&quot;history&quot;</span> <span class="comment">// 打包上线后需要后台支持, 模式是hash</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="vue路由-编程式导航"><a href="#vue路由-编程式导航" class="headerlink" title="vue路由 - 编程式导航"></a>vue路由 - 编程式导航</h2><h3 id="用JS代码跳转-声明式导航用a标签"><a href="#用JS代码跳转-声明式导航用a标签" class="headerlink" title="用JS代码跳转, 声明式导航用a标签"></a>用JS代码跳转, 声明式导航用a标签</h3><p>main.js - 路由数组里, 给路由起名字</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&quot;/find&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Find&quot;</span>,</span><br><span class="line">    component: Find</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&quot;/my&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;My&quot;</span>,</span><br><span class="line">    component: My</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&quot;/part&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Part&quot;</span>,</span><br><span class="line">    component: Part</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>App.vue - 换成span 配合js的编程式导航跳转</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer_wrap&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;btn(&#x27;/find&#x27;, &#x27;Find&#x27;)&quot;</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;btn(&#x27;/my&#x27;, &#x27;My&#x27;)&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> @<span class="attr">click</span>=<span class="string">&quot;btn(&#x27;/part&#x27;, &#x27;Part&#x27;)&quot;</span>&gt;</span>朋友<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 目标: 编程式导航 - js方式跳转路由</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 语法:</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this.$router.push(&#123;path: &quot;路由路径&quot;&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this.$router.push(&#123;name: &quot;路由名&quot;&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注意:</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 虽然用name跳转, 但是url的hash值还是切换path路径值</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 场景:</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 方便修改: name路由名(在页面上看不见随便定义)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// path可以在url的hash值看到(尽量符合组内规范)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">   <span class="title function_">btn</span>(<span class="params">targetPath, targetName</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 方式1: path跳转</span></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// path: targetPath,</span></span></span><br><span class="line"><span class="language-javascript">       <span class="attr">name</span>: targetName</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编程式导航-跳转传参"><a href="#编程式导航-跳转传参" class="headerlink" title="编程式导航 - 跳转传参"></a>编程式导航 - 跳转传参</h3><ul><li>JS跳转路由, 传参</li><li>query &#x2F; params 任选 一个</li><li>注意: 使用path会自动忽略params</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;footer_wrap&quot;&gt;</span><br><span class="line">      &lt;span @click=&quot;btn(&#x27;/find&#x27;, &#x27;Find&#x27;)&quot;&gt;发现音乐&lt;/span&gt;</span><br><span class="line">      &lt;span @click=&quot;btn(&#x27;/my&#x27;, &#x27;My&#x27;)&quot;&gt;我的音乐&lt;/span&gt;</span><br><span class="line">      &lt;span @click=&quot;oneBtn&quot;&gt;朋友-小黑&lt;/span&gt;</span><br><span class="line">      &lt;span @click=&quot;twoBtn&quot;&gt;朋友-小白&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;top&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 目标: 编程式导航 - 跳转路由传参</span><br><span class="line">// 方式1:</span><br><span class="line">// params =&gt; $route.params.参数名</span><br><span class="line">// 方式2:</span><br><span class="line">// query =&gt; $route.query.参数名</span><br><span class="line">// 重要: path会自动忽略params</span><br><span class="line">// 推荐: name+query方式传参</span><br><span class="line">// 注意: 如果当前url上&quot;hash值和?参数&quot;与你要跳转到的&quot;hash值和?参数&quot;一致, 爆出冗余导航的问题, 不会跳转路由</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btn(targetPath, targetName)&#123;</span><br><span class="line">      // 方式1: path跳转</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        // path: targetPath,</span><br><span class="line">        name: targetName</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    oneBtn()&#123;</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        name: &#x27;Part&#x27;,</span><br><span class="line">        params: &#123;</span><br><span class="line">          username: &#x27;小黑&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    twoBtn()&#123;</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        name: &#x27;Part&#x27;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          name: &#x27;小白&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="vue路由-守卫"><a href="#vue路由-守卫" class="headerlink" title="vue路由 - 守卫"></a>vue路由 - 守卫</h2><ul><li>路由跳转之前, 先执行一次前置守卫函数, 判断是否可以正常跳转</li><li>next()放行, next(false)留在原地不跳转路由, next(path路径)强制换成对应path路径跳转</li></ul><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目标: 路由守卫</span></span><br><span class="line"><span class="comment">// 场景: 当你要对路由权限判断时</span></span><br><span class="line"><span class="comment">// 语法: router.beforeEach((to, from, next)=&gt;&#123;//路由跳转&quot;之前&quot;先执行这里, 决定是否跳转&#125;)</span></span><br><span class="line"><span class="comment">// 参数1: 要跳转到的路由 (路由对象信息)    目标</span></span><br><span class="line"><span class="comment">// 参数2: 从哪里跳转的路由 (路由对象信息)  来源</span></span><br><span class="line"><span class="comment">// 参数3: 函数体 - next()才会让路由正常的跳转切换, next(false)在原地停留, next(&quot;强制修改到另一个路由路径上&quot;)</span></span><br><span class="line"><span class="comment">// 注意: 如果不调用next, 页面留在原地</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子: 判断用户是否登录, 是否决定去&quot;我的音乐&quot;/my</span></span><br><span class="line"><span class="keyword">const</span> isLogin = <span class="literal">true</span>; <span class="comment">// 登录状态(未登录)</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&quot;/my&quot;</span> &amp;&amp; isLogin === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;请登录&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>(<span class="literal">false</span>) <span class="comment">// 阻止路由跳转</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>() <span class="comment">// 正常放行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是Vue&quot;&gt;&lt;a href=&quot;#什么是Vue&quot; class=&quot;headerlink&quot; title=&quot;什么是Vue&quot;&gt;&lt;/a&gt;什么是Vue&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;是一套用于构建用户界面的渐进式 javascript 框架(渐进式:想用什么就用什么不必全都用)</summary>
      
    
    
    
    <category term="前端" scheme="http://l1562007999.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="http://l1562007999.github.io/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
    <category term="vue2" scheme="http://l1562007999.github.io/tags/vue2/"/>
    
    <category term="前端" scheme="http://l1562007999.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>H5移动端开发需要的小功能</title>
    <link href="http://l1562007999.github.io/2022/07/23/H5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E7%9A%84%E5%B0%8F%E5%8A%9F%E8%83%BD/"/>
    <id>http://l1562007999.github.io/2022/07/23/H5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E7%9A%84%E5%B0%8F%E5%8A%9F%E8%83%BD/</id>
    <published>2022-07-23T06:10:26.000Z</published>
    <updated>2022-07-23T06:36:42.195Z</updated>
    
    <content type="html"><![CDATA[<h1 id="弹出数字键盘"><a href="#弹出数字键盘" class="headerlink" title="弹出数字键盘"></a>弹出数字键盘</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 有<span class="string">&quot;#&quot;</span> <span class="string">&quot;*&quot;</span>符号输入 --&gt;</span><br><span class="line">&lt;input type=&quot;tel&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 纯数字 --&gt;</span><br><span class="line">&lt;input pattern=&quot;\d*&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>安卓</code>跟<code>IOS</code>的表现形式应该不一样，大家可以自己试试。当运用了正则<code>pattern</code>后，就不用关注<code>input</code>的类型了😂</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/8/16daa71523d081f1~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp"></p><h1 id="调用系统的某些功能"><a href="#调用系统的某些功能" class="headerlink" title="调用系统的某些功能"></a>调用系统的某些功能</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 拨号 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:10086&quot;</span>&gt;</span>打电话给: 10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 发送短信 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sms:10086&quot;</span>&gt;</span>发短信给: 10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 发送邮件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:839626987@qq.com&quot;</span>&gt;</span>发邮件给：839626987@qq.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 选择照片或者拍摄照片 --&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;image/*&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 选择视频或者拍摄视频 --&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; accept=&quot;video/*&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 多选 --&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; multiple&gt;</span><br></pre></td></tr></table></figure><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/8/16daa7189f490f83~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp"></p><h1 id="打开原生应用"><a href="#打开原生应用" class="headerlink" title="打开原生应用"></a>打开原生应用</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;weixin://&quot;</span>&gt;打开微信&lt;/a&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;alipays://&quot;</span>&gt;</span>打开支付宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;alipays://platformapi/startapp?saId=10000007&quot;</span>&gt;</span>打开支付宝的扫一扫功能<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;alipays://platformapi/startapp?appId=60000002&quot;</span>&gt;</span>打开支付宝的蚂蚁森林<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这种方式叫做<code>URL Scheme</code>，是一种协议，一般用来访问<code>APP</code>或者<code>APP</code>中的某个功能&#x2F;页面（如唤醒<code>APP</code>后打开指定页面或者使用某些功能）😒</p><p><code>URL Scheme</code>的基本格式如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     行为(应用的某个功能/页面)    </span><br><span class="line">            |</span><br><span class="line"><span class="attr">scheme</span>:<span class="comment">//[path][?query]</span></span><br><span class="line">   |               |</span><br><span class="line">应用标识       功能需要的参数</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>唤醒<code>APP</code>的条件是你的手机已经安装了该<code>APP</code></li><li>某些浏览器会禁用此协议，比如微信内部浏览器（除非开了白名单）</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/8/16da9fcd91d1ebdc~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp"></p><p>后面应该会专门写一篇文章用来探讨唤醒<code>APP</code>😒</p><h1 id="解决active伪类失效"><a href="#解决active伪类失效" class="headerlink" title="解决active伪类失效"></a>解决active伪类失效</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body ontouchstart&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>给<code>body</code>注册一个空事件即可😂</p><h1 id="5-忽略自动识别"><a href="#5-忽略自动识别" class="headerlink" title="5. 忽略自动识别"></a>5. 忽略自动识别</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 忽略浏览器自动识别数字为电话号码 --&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 忽略浏览器自动识别邮箱账号 --&gt;</span><br><span class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;email=no&quot;&gt;</span><br></pre></td></tr></table></figure><p>当页面上的内容包含了<code>手机号/邮箱</code>等，会自动转换成可点击的链接😁</p><p>比如你有如下代码：</p><p>13192733603</P><p>但是有些浏览器会识别为手机，并且可以点击拨号😒</p><h1 id="解决input失焦后页面没有回弹"><a href="#解决input失焦后页面没有回弹" class="headerlink" title="解决input失焦后页面没有回弹"></a>解决input失焦后页面没有回弹</h1><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/7/16da5a743c39d94e~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp"></p><p>一般出现在<code>IOS设备中的微信内部浏览器</code>，出现的条件为：</p><ul><li>页面高度过小</li><li>聚焦时，页面需要往上移动的时候</li></ul><p>所以一般<code>input</code>在页面上方或者顶部都不会出现无法回弹🤣</p><p>解决办法为，在聚焦时，获取当前滚动条高度，然后失焦时，赋值之前获取的高度：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">focus</span>=<span class="string">&quot;focus&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;blur&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">scrollTop</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">focus</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">scrollTop</span> = <span class="variable language_">document</span>.<span class="property">scrollingElement</span>.<span class="property">scrollTop</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">blur</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="property">scrollingElement</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">scrollTop</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="6-禁止长按"><a href="#6-禁止长按" class="headerlink" title="6. 禁止长按"></a>6. 禁止长按</h1><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/7/16da5c928d660ca9~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp"></p><p>以上行为可以总结成这几个（每个手机以及浏览器的表现形式不一样）：<code>长按图片保存</code>、<code>长按选择文字</code>、<code>长按链接/手机号/邮箱时呼出菜单</code>。</p><p>想要禁止这些浏览器的默认行为，可以使用以下<code>CSS</code>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 禁止长按图片保存</span></span><br><span class="line">img &#123;</span><br><span class="line">  -webkit-touch-<span class="attr">callout</span>: none;</span><br><span class="line">  pointer-<span class="attr">events</span>: none; <span class="comment">// 像微信浏览器还是无法禁止，加上这行样式即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止长按选择文字</span></span><br><span class="line">div &#123;</span><br><span class="line">  -webkit-user-<span class="attr">select</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止长按呼出菜单</span></span><br><span class="line">div &#123;</span><br><span class="line">  -webkit-touch-<span class="attr">callout</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-滑动不顺畅，粘手"><a href="#7-滑动不顺畅，粘手" class="headerlink" title="7. 滑动不顺畅，粘手"></a>7. 滑动不顺畅，粘手</h1><p>一般出现在<code>IOS</code>设备中，自定义盒子使用了<code>overflow: auto || scroll</code>后出现的情况。</p><p>优化代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-屏幕旋转为横屏时，字体大小会变"><a href="#8-屏幕旋转为横屏时，字体大小会变" class="headerlink" title="8. 屏幕旋转为横屏时，字体大小会变"></a>8. 屏幕旋转为横屏时，字体大小会变</h1><p>具体出现的情况不明😒，有时候有有时候没有，欢迎指出。</p><p>优化代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  -webkit-text-size-adjust: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-最简单的rem自适应"><a href="#9-最简单的rem自适应" class="headerlink" title="9. 最简单的rem自适应"></a>9. 最简单的rem自适应</h1><p>大家都知道，<code>rem</code>的值是根据<code>根元素的字体大小</code>相对计算的，但是我们每个设备的大小不一样，所以<code>根元素的字体大小</code>要动态设置😂</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> / <span class="number">3.75</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">14rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/8/16daa44ade0d0de0~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp"></p><p>像我一般的话，直接搞<code>lib-flexible</code>、<code>postcss-pxtorem</code>就完事啦！</p><h1 id="10-滑动穿透"><a href="#10-滑动穿透" class="headerlink" title="10. 滑动穿透"></a>10. 滑动穿透</h1><p>当你想在出现<code>遮罩</code>的时候，锁住用户的滚动行为，你可以这么做。</p><p>假设<code>HTML</code>结构如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>我是弹框<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>CSS</code>样式如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>($color: <span class="number">#333</span>, $alpha: .<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/8/16daa7865c5fba56~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp"></p><p>可以看到，当在<code>遮罩</code>上滑动的时候，是会穿透到父节点的，最简单的办法就是阻住默认行为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.mask&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">preventDefault</span>(&#123;</span><br><span class="line">    <span class="attr">passive</span>: <span class="literal">false</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果在<code>vue</code>中，你可以这么写：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;mask&quot; @touchumove.prevent&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;mask&quot; @touchumove.self.prevent&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样，当出现<code>遮罩</code>的时候用户的滑动就会被锁住啦👌</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>像<code>1px边框</code>、<code>唤醒APP</code>后面会单独出文章，因为涉及的内容比较多。</p><p>作者：聪明的汤姆<br>链接：<a href="https://juejin.cn/post/6844903959287562254">https://juejin.cn/post/6844903959287562254</a><br>来源：稀土掘金</p><h1 id="gt-gt-gt-前端内容合集"><a href="#gt-gt-gt-前端内容合集" class="headerlink" title="&gt; &gt; &gt;前端内容合集"></a>&gt; &gt; &gt;前端内容合集</h1><p>- </p><ul><li><p>&gt;&gt;&gt;<a href="https://juejin.cn/post/6844903959287562254">稍微整理了几个经常在H5移动端开发遇到的东西😢</a></p></li><li><p><a href="https://juejin.cn/post/6844903935568789517">前端基础知识概述 – 移动端开发的屏幕、图像、字体与布局的兼容适配</a></p></li><li><p><a href="https://juejin.cn/post/6932647134944886797">前端优秀实践不完全指南</a></p></li><li><p><a href="https://juejin.cn/post/6844903574929932301">干货!各种常见布局实现+知名网站实例分析</a></p></li><li><p><a href="https://juejin.cn/post/6844904103504527374">写给初中级前端的高级进阶指南</a></p></li><li><p><a href="https://juejin.cn/post/6844904165836062734">不知道怎么封装代码?看看这几种设计模式吧!</a></p></li><li><p><a href="https://juejin.cn/post/6953423646664687652">设计模式这样学也太简单了吧!</a></p></li><li><p><a href="https://juejin.cn/post/7025868886914400293">现代 Web 开发困局</a></p></li><li><p><a href="https://juejin.cn/post/7116055668485783589">web 跨域请求安全问题浅谈</a></p></li><li><p><a href="https://juejin.cn/post/6844903517702848526">HTTP—-HTTP缓存机制</a></p></li><li><p><a href="https://juejin.cn/post/7055496557038141476">前端开发调试最佳实践</a></p></li><li><p><a href="https://juejin.cn/post/6844904055039344654">TS 常见问题整理(60多个，持续更新ing)</a></p></li><li><p><a href="https://juejin.cn/post/6844903985338400782">React Hooks 详解 【近 1W 字】+ 项目实战</a></p></li><li><p><a href="https://juejin.cn/post/6908895801116721160">「react进阶」年终送给react开发者的八条优化建议</a></p></li><li><p><a href="https://juejin.cn/post/7114597899681398792">从响应式编程到 Combine 实践</a></p></li><li><p><a href="https://juejin.cn/post/7054421306845954056">初识 node 框架 Nest.js</a></p></li><li><p><a href="https://juejin.cn/post/7081891057918558221">Node.js 技术架构</a></p></li><li><p><a href="https://juejin.cn/post/7048497932647006216">快速入门Webpack的简单使用</a></p></li><li><p><a href="https://juejin.cn/post/7108639298424930335">在?大白话跟你唠明白Webpack(基础篇)</a></p></li><li><p><a href="https://juejin.cn/post/6992200385561624607">Vite介绍和原理解析</a></p></li><li><p>[<a href="https://juejin.cn/post/6988704825450397709">Vite 总结] 帅小伙花了一个月时间总结的 Vite 知识点和迁移方案</a></p></li><li><p><a href="https://juejin.cn/post/7073413023234260999">WebGL入门基础(一): 从一个鼠标画点开始了解原生webGL</a></p></li><li><p><a href="https://juejin.cn/post/6844904112157360136">WebGL工作流程解读，一个三角形的诞生</a></p></li><li><p><a href="https://juejin.cn/post/6844904158181457933">(上)Vue+Echarts构建可视化大数据平台实战项目分享(附源码)</a></p></li><li><p><a href="https://juejin.cn/post/6845166890449371149">(下)Vue+Echarts构建大数据可视化酷炫展示公司品牌实战项目分享(附源码)</a></p></li><li><p><a href="https://juejin.cn/post/6981251413607186468">多媒体前端技术入门指南</a></p></li><li><p><a href="https://juejin.cn/post/6844904084592394253">前端必学必会-多媒体-本地存储-浏览器与服务器的交互-通信功能</a></p></li><li><p><a href="https://juejin.cn/post/6844903591946223629">微信小游戏开发总结</a></p></li><li><p><a href="https://juejin.cn/post/6844904062907842568">pixi.js开发微信小游戏-小熊上山</a></p></li><li><p><a href="https://juejin.cn/post/6844903793935515655">使用 Taro 开发微信小程序的实践 + 踩坑合集</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;弹出数字键盘&quot;&gt;&lt;a href=&quot;#弹出数字键盘&quot; class=&quot;headerlink&quot; title=&quot;弹出数字键盘&quot;&gt;&lt;/a&gt;弹出数字键盘&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;</summary>
      
    
    
    
    <category term="前端" scheme="http://l1562007999.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="H5开发" scheme="http://l1562007999.github.io/categories/%E5%89%8D%E7%AB%AF/H5%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="移动端" scheme="http://l1562007999.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    <category term="手机" scheme="http://l1562007999.github.io/tags/%E6%89%8B%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Promise的使用</title>
    <link href="http://l1562007999.github.io/2022/07/18/Promise%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://l1562007999.github.io/2022/07/18/Promise%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-18T11:13:49.000Z</published>
    <updated>2022-07-19T03:25:05.240Z</updated>
    
    <content type="html"><![CDATA[<p>谈到<code>Promise</code>，我们都知道它有一个pending属性，该属性有两种状态：成功(resolved&#x2F;fulfilled)、失败(rejected),而且一个Promise只可能从“等待”转到“失败”或者“成功”；且状态一旦改变便是不可逆的，谈到Promise，很多人想到的就是解决回调地狱的问题，当我们在需要多个异步请求都执行完再执行下一步操作时，可以考虑使用promise。以下是个人学习Promise记录的知识点</p><h1 id="Promise的理解和使用"><a href="#Promise的理解和使用" class="headerlink" title="Promise的理解和使用"></a>Promise的理解和使用</h1><h2 id="Promise是什么？"><a href="#Promise是什么？" class="headerlink" title="Promise是什么？"></a>Promise是什么？</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><ul><li>抽象表达<br>Promise 是一门新的技术(ES6 规范)<br>Promise 是 JS 中进行异步编程的新解决方案<br>备注：旧方案是单纯使用回调函数</li><li>Promise 的状态改变<br>pending 变为 resolved<br>pending 变为 rejected</li></ul><h3 id="Promise的状态改变"><a href="#Promise的状态改变" class="headerlink" title="Promise的状态改变"></a>Promise的状态改变</h3><ul><li>具体表达<br>说明: 只 2 种, 且一个 Promise 对象只能改变一次,无论变为成功还是失败, 都会有一个结果数据, 成功的结果数据一般称为 Value, 失败的结果数据一般称为 reason</li></ul><h3 id="Promise-的基本流程"><a href="#Promise-的基本流程" class="headerlink" title="Promise 的基本流程"></a>Promise 的基本流程</h3><p><img src="https://img-blog.csdnimg.cn/1c2cdd1d74e34ec7819a8f01177d3bc7.png"></p><ul><li><strong>代演示</strong></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> but=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;but&quot;</span>)</span><br><span class="line">but.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> randomNumber=<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">100</span>)</span><br><span class="line">    <span class="comment">//这里new Promise</span></span><br><span class="line">       <span class="keyword">const</span> p=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(randomNumber&lt;<span class="number">30</span>)&#123;</span><br><span class="line">               <span class="comment">//成功的状态</span></span><br><span class="line">               <span class="title function_">resolve</span>(<span class="string">&quot;中奖了！&quot;</span>)</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//失败的的状态</span></span><br><span class="line">               <span class="title function_">reject</span>(<span class="string">&quot;抱歉，很遗憾！&quot;</span>)</span><br><span class="line">           &#125;</span><br><span class="line">           &#125;,<span class="number">1000</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">        p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//这里是p的pending属性为resolve/fulfilled</span></span><br><span class="line">            <span class="title function_">alert</span>(value)</span><br><span class="line">        &#125;,<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//这里是p的pending属性为rejected</span></span><br><span class="line">            <span class="title function_">alert</span>(reason)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="为什么要用-Promise"><a href="#为什么要用-Promise" class="headerlink" title="为什么要用 Promise?"></a>为什么要用 Promise?</h2><h3 id="指定回调函数的方式更加灵活"><a href="#指定回调函数的方式更加灵活" class="headerlink" title="指定回调函数的方式更加灵活"></a>指定<a href="https://so.csdn.net/so/search?q=%E5%9B%9E%E8%B0%83&spm=1001.2101.3001.7020">回调</a>函数的方式更加灵活</h3><ul><li>旧的: 必须在启动异步任务前指定</li><li>Promise: 启动异步任务 &#x3D;&gt; 返回Promise对象 &#x3D;&gt; 给Promise对象绑定回调函数(甚至可以任务结束后指定多个回调)</li></ul><h3 id="支持链式调用-可以解决回调地狱问题"><a href="#支持链式调用-可以解决回调地狱问题" class="headerlink" title="支持链式调用, 可以解决回调地狱问题"></a>支持链式调用, 可以解决回调地狱问题</h3><ul><li>什么是回调地狱?<ul><li>回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件</li></ul></li><li>回调地狱的缺点?<ul><li>不便于阅读</li><li>不便于异常处理</li></ul></li><li>解终极解决方案?<ul><li>Promise链式调用</li></ul></li></ul><h2 id="如何使用-Promise"><a href="#如何使用-Promise" class="headerlink" title="如何使用 Promise?"></a>如何使用 Promise?</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="不属于new-Promise的API（4个）"><a href="#不属于new-Promise的API（4个）" class="headerlink" title="不属于new Promise的API（4个）"></a>不属于new Promise的API（4个）</h4><p>Promise.prototype.then方法：(onResolved（成功）, onRejected（失败）) &#x3D;&gt; {}</p><ol><li><h4 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a><strong>resolve</strong></h4></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">521</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// resolve(&#x27;OK&#x27;);</span></span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 如果不对出错进行处理（指定错误回调），控制台就会报错</span></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span><br></pre></td></tr></table></figure><p>**<u>resolve的参数问题</u>**：（以失败的状态为例）</p><ol><li>如果传入的参数为 非Promise类型的对象, 则返回的结果为成功Promise对象</li><li>如果传入的参数为 Promise 对象, 则Promise对象的状态决定了 p2执行onResolve还是OnRejected</li></ol><p><img src="https://img-blog.csdnimg.cn/107836ec7c3c418083a83b23e2ced63f.png"></p><ol start="2"><li><h4 id="reject"><a href="#reject" class="headerlink" title="reject"></a><strong>reject</strong></h4></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">521</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;haha&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line">p3.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p3);</span><br></pre></td></tr></table></figure><p><u><strong>reject的参数问题：</strong></u></p><ol><li>如果传入的参数为 非Promise类型的对象, 则new Promise返回的结果永远为失败Promise对象</li><li>如果传入的参数为 Promise 对象, 则Promise对象的状态决定了 p执行onResolve还是OnRejected</li></ol><p><img src="https://img-blog.csdnimg.cn/e386e0ebc5fc43f5ab468952fda9a9c9.png"></p><ol start="3"><li><h4 id="all"><a href="#all" class="headerlink" title="all"></a>all</h4></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="title function_">resolve</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"><span class="comment">// let p2 = Promise.reject(&quot;Error&quot;);</span></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Oh Yeah&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>​    all方法：（这里以成功为例）<br>​    说明: Promise.all（这里是一个**<u>数组</u>**，数组里面有一个一个的Promise），他返回一个新的 Promise, 只有所有的 Promise都成功才成功, 只要有一个失败了就直接失败。</p><p><img src="https://img-blog.csdnimg.cn/43e02f0d163349f2b60e8f6270fb177c.png"></p><ol start="4"><li><h4 id="race"><a href="#race" class="headerlink" title="race"></a>race</h4></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Oh Yeah&quot;</span>);</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>race方法：（这里以成功为例）<br>说明: 返回一个新的 Promise, 第一个完成的 Promise的结果状态就是最终的结果状</p><p><img src="https://img-blog.csdnimg.cn/014d1044d54e44099a1a1bc93fb81544.png"></p><h4 id="属于new-Promise的API"><a href="#属于new-Promise的API" class="headerlink" title="属于new Promise的API"></a>属于new Promise的API</h4><ol><li>catch</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>catch方法：<br>说明: 处理错误的方法</p><h3 id="Promise-的几个关键问题"><a href="#Promise-的几个关键问题" class="headerlink" title="Promise 的几个关键问题"></a>Promise 的几个关键问题</h3><h4 id="如何改变-Promise-的状态"><a href="#如何改变-Promise-的状态" class="headerlink" title="如何改变 Promise 的状态?"></a>如何改变 Promise 的状态?</h4><ul><li>改变 Promise 的状态的几种方法：代码演示</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">//1. resolve 函数</span></span><br><span class="line"> <span class="comment">// resolve(&quot;ok&quot;); // pending   =&gt; fulfilled (resolved)</span></span><br><span class="line"> <span class="comment">//2. reject 函数</span></span><br><span class="line"> <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>); <span class="comment">// pending  =&gt;  rejected</span></span><br><span class="line"> <span class="comment">//3. 抛出错误</span></span><br><span class="line"> <span class="comment">// throw &quot;出问题了&quot;;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5cb35ff0aa5145089019f66526fb9151.png"></p><h4 id="一个-Promise-指定多个成功-x2F-失败回调函数-都会调用吗？"><a href="#一个-Promise-指定多个成功-x2F-失败回调函数-都会调用吗？" class="headerlink" title="一个 Promise 指定多个成功&#x2F;失败回调函数, 都会调用吗？"></a>一个 Promise 指定多个成功&#x2F;失败回调函数, 都会调用吗？</h4><ul><li>当 Promise改变为对应状态时都会调用</li><li>代码演示</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="title function_">resolve</span>(<span class="string">&quot;OK&quot;</span>); <span class="comment">//如果注释掉resolve()，那么p的状态就还是pending，即状态未发生改变，不会调用then</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">///指定回调 - 1</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//指定回调 - 2</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/539c3fad875b4496a7d755dabb582927.png"></p><h4 id="改变-Promise-状态和指定回调函数谁先谁后？"><a href="#改变-Promise-状态和指定回调函数谁先谁后？" class="headerlink" title="改变 Promise 状态和指定回调函数谁先谁后？"></a>改变 Promise 状态和指定回调函数谁先谁后？</h4><ul><li>都有可能, 正常情况下是先指定回调再改变状态, 但也可以先改状态再指定回调</li><li>如何先改状态再指定回调?<ul><li>在执行器中直接调用 resolve()&#x2F;reject(）</li><li>延迟更长时间才调用 then()</li></ul></li><li>什么时候才能得到数据？<ul><li>如果先指定的回调, 那当状态发生改变时, 回调函数就会调用, 得到数据</li><li>如果先改变的状态, 那当指定回调时, 回调函数就会调用, 得到数据</li></ul></li><li>代码验证演示</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> startTime=<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始记时&quot;</span>,startTime)</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> endTime=<span class="title class_">Date</span>.<span class="title function_">now</span>()-startTime</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;结束记时&quot;</span>,endTime)</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(</span><br><span class="line"><span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/143a3120145a4255967eee2b57629450.png"></p><h4 id="Promise-then-返回的新-Promise-的结果状态由什么决定？"><a href="#Promise-then-返回的新-Promise-的结果状态由什么决定？" class="headerlink" title="Promise .then()返回的新 Promise 的结果状态由什么决定？"></a>Promise .then()返回的新 Promise 的结果状态由什么决定？</h4><ul><li>Promise .then()返回的新 Promise 的结果状态由什么决定？</li><li>代码验证演示</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="title function_">resolve</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line"> <span class="comment">// reject(&quot;no&quot;);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//执行 then 方法</span></span><br><span class="line"><span class="keyword">let</span> result = p.<span class="title function_">then</span>(</span><br><span class="line"> <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// console.log(value);</span></span><br><span class="line">   <span class="comment">//1. 抛出错误 rejected</span></span><br><span class="line">   <span class="comment">//   throw &quot;出了问题&quot;;</span></span><br><span class="line">   <span class="comment">//2. 返回结果是非 Promise 类型的对象 fulfilled</span></span><br><span class="line">   <span class="comment">//   return 521;</span></span><br><span class="line">   <span class="comment">//3. 返回结果是 Promise 对象 fulfilled/rejected</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// resolve(&quot;success&quot;);</span></span><br><span class="line">     <span class="title function_">reject</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line"> &#125;</span><br><span class="line">)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 这里result返回的依旧是一个Promise，以下是对Promise的成功或失败的处理</span></span><br><span class="line">result.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;,<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>说明: 代码的执行流程<br>举例：如果开始执行resolve（），那么执行then的onResolved方法<br>如果onResolved方法返回非Promise对象，那么Promise .then()返回的新Promise的状态就为成功！<br>如果onResolved方法为Promise对象，那么该Promise返回的状态（成功或者失败&#x2F;resolve或reject）就决定了Promise .then()返回的新Promise的状态。</p><p><img src="https://img-blog.csdnimg.cn/fb5f674532204b338bf15e6b374bd80a.png"></p><h4 id="Promise-如何串连多个操作任务"><a href="#Promise-如何串连多个操作任务" class="headerlink" title="Promise 如何串连多个操作任务?"></a>Promise 如何串连多个操作任务?</h4><ul><li>Promise的 then()返回一个新的 Promise, 可以开成 then()的链式调用</li><li>通过 then 的链式调用串连多个同步&#x2F;异步任务</li><li>代码验证演示</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//因为上个then没有返回任何东西所以输出undefined</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a4af1f32174d4c8abfc29b4fe2ec95f8.png"></p><h4 id="Promise-异常传透"><a href="#Promise-异常传透" class="headerlink" title="Promise 异常传透?"></a>Promise 异常传透?</h4><ul><li>当使用 Promise 的 then 链式调用时, 可以在最后指定失败的回调</li><li>前面任何操作出了异常, 都会传到最后失败的回调中处理</li><li>代码验证演示</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">        <span class="comment">// reject(&#x27;Err&#x27;);</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(111);</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;失败啦!&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="comment">//用then也可以捕获异常，不过then要传两个参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7e5f4921ed5b4d51adbb1e47027234db.png"></p><h4 id="如何中断-Promise-链"><a href="#如何中断-Promise-链" class="headerlink" title="如何中断 Promise 链?"></a>如何中断 Promise 链?</h4><ul><li>当使用 Promise 的 then 链式调用时, 在中间中断, 不再调用后面的回调函数</li><li>办法: 在回调函数中返回一个 pendding 状态的 Promise 对象</li><li>代码验证演示</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> a = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">   <span class="comment">//有且只有一个方式</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="PromiseE8-之-async-和-await"><a href="#PromiseE8-之-async-和-await" class="headerlink" title="PromiseE8 之 async 和 await"></a>PromiseE8 之 async 和 await</h3><h4 id="mdn-文档"><a href="#mdn-文档" class="headerlink" title="mdn 文档"></a>mdn 文档</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await</a></li></ul><h4 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h4><ul><li>使用async该函数的返回值为 Promise对象</li><li>Promise对象的结果由 async 函数执行的返回值决定</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">//1. 如果返回值是一个非Promise类型的数据 则状态为成功，返回一个成功的promise对象</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">521</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main1</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">//2. 如果返回的是一个Promise对象 则状态取决于返回结果</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// resolve(&#x27;OK&#x27;); //成功</span></span><br><span class="line">   <span class="title function_">reject</span>(<span class="string">&quot;Error&quot;</span>); <span class="comment">//失败</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main2</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">// 3. 抛出异常 返回一个失败的promise对象</span></span><br><span class="line"> <span class="keyword">throw</span> <span class="string">&quot;Oh NO&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">main</span>();</span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">main1</span>();</span><br><span class="line"><span class="keyword">let</span> result3 = <span class="title function_">main2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="await-表达式"><a href="#await-表达式" class="headerlink" title="await 表达式"></a>await 表达式</h4><ul><li>await 右侧的表达式一般为 Promise对象, 但也可以是其它的值</li><li>如果表达式是 Promise对象, await 返回的是 Promise成功的值</li><li>如果表达式是其它值, 直接将此值作为 await 的返回值</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>await 必须写在 async 函数中, 但 async 函数中可以没有 await</li><li>如果 await 的 Promise失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    <span class="comment">// reject(&quot;Error&quot;);</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//1. 右侧为promise的情况</span></span><br><span class="line">  <span class="comment">// let res = await p;</span></span><br><span class="line">  <span class="comment">//2. 右侧为其他类型的数据</span></span><br><span class="line">  <span class="comment">// let res2 = await 20;</span></span><br><span class="line">  <span class="comment">//3. 如果promise是失败的状态</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res3 = <span class="keyword">await</span> p;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res3)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">//catch捕获失败状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Null</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;谈到&lt;code&gt;Promise&lt;/code&gt;，我们都知道它有一个pending属性，该属性有两种状态：成功(resolved&amp;#x2F;fulfilled)、失败(rejected),而且一个Promise只可能从“等待”转到“失败”或者“成功”；且状态一旦改变便是不可逆的</summary>
      
    
    
    
    <category term="前端" scheme="http://l1562007999.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="http://l1562007999.github.io/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="Promise" scheme="http://l1562007999.github.io/tags/Promise/"/>
    
    <category term="异步编程" scheme="http://l1562007999.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>今日英语</title>
    <link href="http://l1562007999.github.io/2022/06/11/%E4%BB%8A%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    <id>http://l1562007999.github.io/2022/06/11/%E4%BB%8A%E6%97%A5%E8%8B%B1%E8%AF%AD/</id>
    <published>2022-06-11T00:53:50.000Z</published>
    <updated>2022-07-19T03:45:36.806Z</updated>
    
    <content type="html"><![CDATA[<p>From <a href="https://mp.weixin.qq.com/s/_vrnkmlxc34dLt5PixGjdg">https://mp.weixin.qq.com/s/_vrnkmlxc34dLt5PixGjdg</a></p><h2 id="“他喝醉了”不是托词！！！"><a href="#“他喝醉了”不是托词！！！" class="headerlink" title="“他喝醉了”不是托词！！！"></a>“他喝醉了”不是托词！！！</h2><blockquote><p>placebo</p></blockquote><ol><li>a substance given to someone who is told that it is a particular medicine, either to make that person feel as if they are getting better or to compare the effect of the particular medicine when given to others. 安慰剂</li></ol><p>🌰: She was only given a placebo, but she claimed she got better - that’s the placebo effect.</p><p>只给她服用了安慰剂，但她说好一些了——这就是安慰剂的心理作用</p><ol start="2"><li>something that is given to try to satisfy a person who has not been given the thing they really want. 使人宽慰的事；安抚话</li></ol><p>🌰：These small concessions have been made as a placebo to stop the workers making further demands.</p><p>这些小让步就像安慰剂一样，可以避免工人们提出更多的要求。</p><blockquote><p>shoot your mouth off</p></blockquote><p>to talk too much in a loud and uncontrolled way</p><p>夸夸其谈；信口开河</p><p>🌰: It’s just like Tom to go shooting his mouth off about other people’s business.</p><blockquote><p>age-old excuse</p></blockquote><p>very old 古老的借口</p><blockquote><p>modulation</p></blockquote><p>the ability to control, influence or change a particular physical process</p><p>🌰: This area of the brain is involved in the modulation of emotional behaviour.</p><p>大脑的这一区域参与对感情行为的调整。</p><blockquote><p>Lead author of the study</p></blockquote><p>该研究的主要作者</p><blockquote><p>put sth down to sth</p></blockquote><p>to think that a problem or situation is caused by a particular thing 把…归因于…</p><p>举个🌰：I put the children’s bad behavior down to the fact that they were tired.</p><p>我认为孩子们表现不好是因为他们累了。</p><blockquote><p>muffle</p></blockquote><p>to make something less strong or clear</p><p>举个🌰：</p><p>The report concluded that business pressure on the government had <strong>muffled</strong> the impact of the legislation.</p><p>报告得出结论，企业对政府的压力已削弱了立法的影响。</p><blockquote><p>drink-dial</p></blockquote><p>to make a phone call when you are drunk 醉酒后打电话</p><p>举个🌰：He drunk-dialled his ex last night and told her that he still loved her.</p><p>他昨晚醉酒后打电话给前任，对她说仍爱着她。</p><blockquote><p>intoxicated</p></blockquote><ol><li>Someone who is intoxicated is drunk.</li><li>excited, happy, and slightly out of control because of love, success, etc. 陶醉的；极其兴奋的；忘乎所以的</li></ol><p>举个🌰：She was understandably intoxicated by her success in the national competition.</p><blockquote><p>inebriated</p></blockquote><p>having drunk too much alcohol 喝醉的 &#x3D;&#x3D;&#x3D; drunk</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;From &lt;a href=&quot;https://mp.weixin.qq.com/s/_vrnkmlxc34dLt5PixGjdg&quot;&gt;https://mp.weixin.qq.com/s/_vrnkmlxc34dLt5PixGjdg&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“他喝醉了”</summary>
      
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="推文扫荡" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E6%8E%A8%E6%96%87%E6%89%AB%E8%8D%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>the vocabulary of critical thinking</title>
    <link href="http://l1562007999.github.io/2022/05/22/the-vocabulary-of-critical-thinking/"/>
    <id>http://l1562007999.github.io/2022/05/22/the-vocabulary-of-critical-thinking/</id>
    <published>2022-05-22T04:08:26.000Z</published>
    <updated>2022-05-25T08:44:19.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>A second assumption is that, in spite of the differences among disciplines  and methods of teaching, some very basic mental operations are common to  all of them. </p><p>历史学与新闻业看重评估结果, 文学注重模糊性, 讽刺性, 文字的深层含义. 这都是 人们就不同的学科在”思考”, 都掌握基本的技能, 但是侧重点不同.</p><p> 作者写这本书的目的:  find the common, fundamental  operations or skills that students should master before they proceed into the specialized disciplines.</p><p>understand  certain concepts &#x3D;&gt;  analyze arguments.</p><p>to learn words to name them&#x3D;&gt;   practicing  the fundamental skills</p><p>学了专业词汇, 才能对专业学科进行深入的问题探索</p><p>学这本书中的词: </p><ul><li>how to perform basic operations</li></ul><p>​        e.g.  comparing and generalizing</p><ul><li><p>learning and improving skills.</p></li><li><p>acquire names for the skills</p></li></ul><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><blockquote><p> what is critical thinking?</p></blockquote><ul><li>make a good decision</li><li>finding  flaws and problems (“criticizing”),  but only part of the activity</li><li>praising and valuing</li><li>thinking about all the aspects of……</li><li>understand   make the best judgment :   positive, negative, or neutral.</li></ul><blockquote><p>本书的内容</p></blockquote><p>The chapters of this book are about the <strong>different kinds of relationships</strong> </p><p> A theory is a type of generalization 一种理论就是一种归纳总结</p><blockquote><p>What Does This Book Try to Do?</p></blockquote><p>give you the basic tools that will help you improve your critical thinking</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;WORDS</p><p>Learning the word is the first step to learning to do the action</p><p>学习词语是学会实操的第一步</p><blockquote><p>Isn’t Learning Words Too Simple? </p></blockquote><p>Your genes  carry a blueprint that specifies the color of your hair, your height, the pattern of  your fingerprints, the tone of your voice, the shape of your face, and every biological trait you have.</p><p> the combinations and patterns&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;produce the infinite variety </p><blockquote><p>Critical thinking is also made up of a few simple parts.</p></blockquote><p><strong>The parts mean various kind of relationships.</strong></p><p>The nine basic elements are: </p><ul><li>comparing, </li><li>generalizing, </li><li>reasoning, </li><li>judging sources, </li><li>finding causes and effects, </li><li>making value  judgments, </li><li>referring, assuming, and creating</li></ul><p>这样做 <strong>不是</strong>为了记住事实,牢记答案;  <strong>而是</strong> 通过慢慢地,一步一步来, 打基础 来提升你的表现水平</p><p>raise one’s game:  To increase one’s effort or improve one’s performance.</p><ul><li>You can tell that they have really raised their game coming into this championship match.</li></ul><blockquote><p>作者的希望: </p></blockquote><p>If you follow the steps in this book, I believe that at the end you will  be a much better thinker.</p><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1."></a>Step 1.</h2><blockquote><p> learn the definitions of these key words. </p></blockquote><p>产生共鸣的句子, 对应现在学翻译的我们: </p><p>But meanings are complicated and slippery; they depend on context.</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2."></a>Step 2.</h2><blockquote><p> look at examples of people using the words.</p></blockquote><p>小孩知道knife这个词的意思, 但是看到厨师使用刀的多种方式, 和两种刀法的细微差别, 就能丰富小孩对knife的理解.</p><p>A child knows the basic meaning of knife, but that’s only the beginning.  By watching experienced cooks at work, he can learn all sorts of ways of using  a knife that he probably never imagined. If he looks closely, he will see that two  operations with a knife that seemed the same are actually slightly different. He  enriches his understanding of what a knife is and what he can do with it.</p><h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3."></a>Step 3.</h2><blockquote><p> The whole purpose is to understand what the words are  about</p></blockquote><p>you look at examples of people using the processes without labeling it</p><p> 例如:  justifying a decision&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; without labeling it with the word <strong>justify</strong></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4."></a>Step 4.</h2><p>you want to do the things yourself that the words describe.</p><p>最后一步就是 你真的想去做这个单词描述的事情.   这样你才会领悟这个单词, 运用这个单词.</p><p>达到:  recognize analogies&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;even if no one calls them analogies</p><h1 id="Chapter1-Comparing"><a href="#Chapter1-Comparing" class="headerlink" title="Chapter1 Comparing"></a>Chapter1 Comparing</h1><ol><li><p>to compare </p></li><li><p>to contrast </p></li><li><p>to distinguish</p></li><li><p>analogy </p></li><li><p>metaphor </p></li><li><p>model</p></li></ol><blockquote><p>comparing&#x3D;&gt;it is  probably the most basic kind of thinking</p></blockquote><p>动物&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;detect similarities and differences between things.</p><p><strong>Thinking means  recognizing different kinds of relationships.</strong></p><h2 id="P1-Definition"><a href="#P1-Definition" class="headerlink" title="P1 Definition"></a>P1 Definition</h2><h3 id="to-compare"><a href="#to-compare" class="headerlink" title="to compare"></a>to compare</h3><p>&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;to <strong>find</strong> <strong>similarities</strong> or <strong>differences</strong> between things.</p><p>例子: “Alice’s comparison of Hamlet and Othello made me see how lonely they both  are.”</p><p>大多数表示”思考”的词 分为动词和名词</p><p>动词: to eat ; to run</p><p>名词: meal  ; race</p><blockquote><p> 什么样子叫作: compare</p></blockquote><p> If you have compared two things, then you have made a comparison,  which is a thing or a result. “</p><p> Comparing&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;finding both</p><p>Contrasting&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;looking only at  differences.</p><h3 id="to-contrast"><a href="#to-contrast" class="headerlink" title="to contrast"></a>to contrast</h3><p>to point out differences between two things</p><blockquote><p>contrast (noun)  </p></blockquote><p>可以理解为是””区别对比””</p><p>a difference between two things</p><p>例子:  The <strong>contrast</strong> between the  two movies was striking, even though they were directed by the same person.</p><p>所以 contrasting 比comparing 所指的范围要小, 只是指出两者的区别</p><h3 id="to-distinguish"><a href="#to-distinguish" class="headerlink" title="to distinguish"></a>to distinguish</h3><p>to point out differences between two things that might otherwise be confused or lumped together;</p><p>to differentiate</p><p>指出区别 防止混淆</p><blockquote><p>distinction (noun).</p></blockquote><p>还有一种意思: the difference that makes one thing outstanding,  or  better than another</p><p>distinguish讲究的是突出, 突出 突出的不同&#x3D;&gt;important difference</p><h3 id="analogy"><a href="#analogy" class="headerlink" title="analogy"></a>analogy</h3><p>a similarity between two things;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; </p><p>也是一种comparison </p><p>two things with  an emphasis on several similarities, usually for the purpose of explaining the less  familiar by its resemblance to the more familiar.</p><p>解释一下: 比较两种事情的多个相似点, 通常是为了将不熟悉的事物通过更为熟悉的事物来解释</p><p>举了一个例子: </p><h3 id="metaphor"><a href="#metaphor" class="headerlink" title="metaphor"></a>metaphor</h3><p>an indirect comparison of two things.   两种事务之间的一种间接的比较</p><p>Metaphors are not to be taken literally</p><p>They  are comparisons, but the writer lets us—the readers—find the specific similarities</p><p>Metaphors 与 analogies 通常都是事物的比较.  区别在于metaphors一般比analogies更短更简单.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h1&gt;&lt;p&gt;A second assumption is that, in spite of the diffe</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://l1562007999.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="英语" scheme="http://l1562007999.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="辩证思维" scheme="http://l1562007999.github.io/tags/%E8%BE%A9%E8%AF%81%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>2020-决</title>
    <link href="http://l1562007999.github.io/2022/05/14/2020-%E5%86%B3/"/>
    <id>http://l1562007999.github.io/2022/05/14/2020-%E5%86%B3/</id>
    <published>2022-05-14T09:05:26.000Z</published>
    <updated>2022-05-14T11:34:31.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="词汇与语法"><a href="#词汇与语法" class="headerlink" title="词汇与语法"></a>词汇与语法</h1><blockquote><p>locally</p></blockquote><p>局部的</p><p>比如说  大部分地区干燥, “部分地区”有雨</p><blockquote><p>I will expect to see you on Sunday unless I knew anything to the___________________.</p></blockquote><p>contrary. </p><p>固定搭配</p><p>有半句的意思是: 防止计划有变</p><p>就是 出现任何事情与 我要与你见面  这件事情相违背.</p><blockquote><p>in essence  &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; at essence</p></blockquote><p>used when talking about the most basic and important part of something, especially an idea, belief, or argument </p><p>本质上，实质上</p><ul><li>In essence his message was very simple.<br>实质上他想表达的意思很简单。</li></ul><blockquote><p>in principle</p></blockquote><p>原则上 大体上   </p><p>与 细节 相对</p><blockquote><p>in hand</p></blockquote><p>if something is in hand, it is being done or dealt with 在处理中</p><p>或者</p><p>再掌控之中  可控范围之内</p><blockquote><p>句子: 注意 that</p></blockquote><p>It was the belief <strong>that</strong> Clive Haley could find his “roots” in Africa <strong>that</strong> made him decide to go to Cambia.</p><p>第一个that 是指 同位语从句  只能用that  不能用 which</p><p>第二个that 是强调句解构 必须的</p><blockquote><p>They are ____________ the west bank of the Nile.</p></blockquote><p>这里填 on,  坐落于</p><h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><blockquote><p>the most subordinate positions</p></blockquote><p>底层的工作</p><blockquote><p>threshold of their career</p></blockquote><p>职业生涯的起点</p><blockquote><p>if necessary</p></blockquote><p>如有需要</p><blockquote><p> 好像从未读过</p></blockquote><p>As if you had never read it before.</p><h1 id="改错"><a href="#改错" class="headerlink" title="改错"></a>改错</h1><blockquote><p>a bit a disaster</p></blockquote><p>bit 后面 要加 of&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt; a bit of  a disaster !</p><blockquote><p>my luggages</p></blockquote><p>luggage 是不可数名词  不可以加 s</p><blockquote><p>It was only <strong>then</strong> I had arrived at Lily’s house that I realized I have…..</p></blockquote><p>then 改成when</p><p>when接  什么时候</p><p>用then的话  就不指明 哪个时刻了</p><blockquote><p>It’s good I can remember your telephone number, <strong>so</strong> I wouldn’t have been able to find you.</p></blockquote><p>这里的so  改成otherwise 或者 or  使 句子 符合逻辑</p><h1 id="看图作文"><a href="#看图作文" class="headerlink" title="看图作文"></a>看图作文</h1><h2 id="巧克力的制作流程"><a href="#巧克力的制作流程" class="headerlink" title="巧克力的制作流程"></a>巧克力的制作流程</h2><p>要求: 总结要点, 对比着进行描述</p><blockquote><p>这张流程图描述了什么?&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt; 引出话题</p></blockquote><p>The flowchart provides us with an overall view of the <strong>chocolate making process</strong>. From the <strong>cacao</strong> to the <strong>chocolate bar selling</strong> to us, chocolate experiences a rather complicated procedure.</p><p>Cacao: the seed from which chocolate and cocoa are made 可可豆</p><blockquote><p>具体讲了什么?</p></blockquote><p>After farmers pick the <strong>cacaopods</strong> from the trees in the plantation, they sort out the <strong>cacao beans</strong> and dry them up under the sunshine. </p><p>Then, <strong>the fermented cacao beans</strong> are sent by trucks to <strong>the production line in a factory</strong>. Workers put the cacao beans <strong>into a large oven</strong> before <strong>grinding</strong> them with the machine. </p><p>When the cacao changes into the form of <strong>thick liquid</strong>, it’s time to use <strong>the mold</strong> make it solidas the temperature drops. </p><p>Finally, the large solid piece is cut out into chocolate bars we see in the supermarkets.</p><h1 id="议论文"><a href="#议论文" class="headerlink" title="议论文"></a>议论文</h1><p>待复习</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;词汇与语法&quot;&gt;&lt;a href=&quot;#词汇与语法&quot; class=&quot;headerlink&quot; title=&quot;词汇与语法&quot;&gt;&lt;/a&gt;词汇与语法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;locally&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;局部的&lt;/p&gt;
&lt;p&gt;比如说  </summary>
      
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="试卷" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%AF%95%E5%8D%B7/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记本" scheme="http://l1562007999.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>2019-决</title>
    <link href="http://l1562007999.github.io/2022/05/11/2019-%E5%86%B3/"/>
    <id>http://l1562007999.github.io/2022/05/11/2019-%E5%86%B3/</id>
    <published>2022-05-11T03:27:05.000Z</published>
    <updated>2022-05-11T04:33:29.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="词汇与语法"><a href="#词汇与语法" class="headerlink" title="词汇与语法"></a>词汇与语法</h1><blockquote><p>Professor Sternburg asked what distinguished people who were thriving from ___ that were not.</p></blockquote><p>应该填 those</p><blockquote><p>surface</p></blockquote><p>noun [countable]</p><ul><li>Keep kitchen surfaces clean and tidy.<br>保持厨房台面干净整洁。</li></ul><blockquote><p>you <strong>must</strong> have asked us first!!!</p></blockquote><p>must 改为should </p><p>should have 本应该做 却没有做</p><h1 id="作文1"><a href="#作文1" class="headerlink" title="作文1"></a>作文1</h1><p>Firstly, remove the banana peel and wash banana pulp in clean water. </p><p>Secondly, slice the banana into thin slices and make sure they are all fairly much the same slice width. </p><p>Thirdly, arrange the slices across the baking sheet in a single layer and drizzle some water over the top of all the banana slices. </p><p>Fourthly, place the sheet in the oven and bake these slices. </p><p>Fifthly, place baked slices into iced water and then filter out the water. </p><p>Sixthly, arrange the banana slices on a sheet and let them dry to remove moisture. </p><p>Seventhly, sprinkle seasoning on dried banana slices. </p><p>Finally, pack them all and sell them all over the world. </p><p>可以这样写序号: Firstly, secondly, thirdly….</p><p>直接使用祈使句, 动词使用原型.</p><h1 id="作文2"><a href="#作文2" class="headerlink" title="作文2"></a>作文2</h1><p>主题: 讨论科技发展的影响, 现代人是否不如过去那么努力了.</p><blockquote><p>第一段: 点出科技发展引发争议</p></blockquote><p>Over the past century or so, major advancement in technology have fundamentally change the way people live. In traditional wisdom, these changes have made life easier and more rewarding, but there are many people who mourn the passing of simpler times and acclaim that people do not work as hard today as they did in the past.</p><blockquote><p>提出自己的观点, 科技发展反而使人们更加忙, 工作更加努力了.</p></blockquote><p>As far as I am concerned, the situation is exactly the opposite. There is little doubt that technology has made our lives busier.</p><blockquote><p>论证观点, 指出收集和电子邮件让人难以逃离工作, 哪怕度假也要处理工作事项.</p></blockquote><p>With mobile phones and email, it is harder than ever to truly escape the workplace, and many now have to deal with work whilst holiday.</p><blockquote><p>但同时新科技也让工作变得更加容易, 省时, 让人们能真正做到日理万机. </p></blockquote><p>While new technology undoubtedly makes many tasks easier and saves time, it also facilitates a more intensive lifestyle where people expect to achieve much more. It is now possible to chat with dozens of friends on social networks while keeping an eye on stock prices, sending work emails, and flying from one side of the world to the other. Many feel obliged to live in this way, and thus it isn’t surprising they work harder than ever before.</p><blockquote><p>重申自己的观点, 总结</p></blockquote><p>In conclusion, technology has made life more intense and people work even harder than they did before. It has made life more stimulating and rewarding.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;词汇与语法&quot;&gt;&lt;a href=&quot;#词汇与语法&quot; class=&quot;headerlink&quot; title=&quot;词汇与语法&quot;&gt;&lt;/a&gt;词汇与语法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Professor Sternburg asked what distinguished </summary>
      
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="试卷" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%AF%95%E5%8D%B7/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记本" scheme="http://l1562007999.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>2018-决</title>
    <link href="http://l1562007999.github.io/2022/05/06/2018-%E5%86%B3/"/>
    <id>http://l1562007999.github.io/2022/05/06/2018-%E5%86%B3/</id>
    <published>2022-05-06T06:55:45.000Z</published>
    <updated>2022-05-06T08:52:31.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="词汇与语法"><a href="#词汇与语法" class="headerlink" title="词汇与语法"></a>词汇与语法</h1><blockquote><p>content with</p></blockquote><p>content yourself with (doing) something to do or have something that is not what you really wanted, but is still satisfactory 使自己满足[甘心]于（做）某事</p><ul><li>Mr Lal has been asking for more responsibility, but has had to content himself with a minor managerial post.<br>拉尔先生一直在要求承担更多的责任，但只能将就着担任一个小小的管理职务。</li></ul><blockquote><p>He wondered _____ ____ his enlisted friends might be staying on that cold winter night. </p></blockquote><p>填写: where</p><p>enlisted: 参军的, 入伍的</p><blockquote><p>uniform</p></blockquote><p>制服:  可数名词</p><blockquote><p>shiny 与shining</p></blockquote><p>shiny: </p><p><code>smooth and bright 光滑发亮的，闪光的</code></p><p> shiny black shoes<br>锃亮的黑皮鞋<br> a shiny polished table<br>擦得光亮的桌子<br> Her hair was thick and shiny.<br>她的头发浓密且有光泽。</p><p>shining: </p><p><code>adj. 华丽的；光亮的</code></p><p> shining streets</p><blockquote><p>the astonished man’s eyes</p></blockquote><ul><li>very surprised about something 吃惊的，惊讶的 SYN amazed<br>astonished to see&#x2F;find&#x2F;hear&#x2F;learn etc<ul><li>We were astonished to find the temple still in its original condition.<br>我们惊讶地发现寺庙还是原来的样子。</li></ul></li></ul><blockquote><p>increase</p></blockquote><p>名词: </p><p>a rise in amount, number, or degree 增加，增多；增长 OPP decrease<br>increase in</p><ul><li>an increase in the crime rate<br>犯罪率的上升</li></ul><h1 id="改错"><a href="#改错" class="headerlink" title="改错"></a>改错</h1><blockquote><p>mysteriously old cottage</p></blockquote><p>mysteriously 改成mysterious  修饰cottage   而不是old</p><blockquote><p>by sea 与by the sea</p></blockquote><p>by sea: 沉船, 由海路,</p><p>by the sea: (地理) 在海边</p><blockquote><p>tell about sth</p></blockquote><p>tellsb (about sth)</p><ul><li>Why wasn’t I told about the accident?</li></ul><p>​        为什么没人把这次事故告诉我？</p><blockquote><p>antonym(s)</p></blockquote><p>反义词</p><h1 id="作文"><a href="#作文" class="headerlink" title="作文"></a>作文</h1><h2 id="看图写作"><a href="#看图写作" class="headerlink" title="看图写作"></a>看图写作</h2><p><strong>The chart provides a summary</strong> of the number and types of books bought by men and women and four different age groups in the UK. </p><p>The percentage of women buying fiction is 30 percent higher than that of men. </p><p>And it can also be noticed that the older an individual is, the better he or she likes fiction. </p><p>The percentage of men buying non-fiction is only slightly higher that that of women.</p><p>But the figure of people older than 45 who buy non-fiction is significantly higher than the number of 25 to 34 age group. </p><p>However, there’s no obvious difference of buying non-fiction between 25 to 34 age group and 35 to 44 age group.</p><h2 id="议论文"><a href="#议论文" class="headerlink" title="议论文"></a>议论文</h2><p> Generally speaking, our relationship with nature can be classified into three phases. </p><p>At the first stage, we can do nothing but adapt the changes of nature, like the day and night and four seasons. On the early stage of human history, our ancestors chose to live in cave in order to find protection from the severe weather. Depending on the change of weather, they have to change their daily routine. For example, they had to go out for hunting in a sunny day and hide under the shelter in a rainy or snowy day. </p><p>But nowadays, with the rapid advancement of science and technology, we step into the second phase. We can do anything free from the influence of weather. We are now able to create artificial rain which is important for farmers in the dry season, and air conditioners sweep away the heat in hot summer. </p><p>However, we can’t neglect that all of these improvements also cause damage to nature. Hence, we try to step into the third phase — saving the earth. We should never forget to live as part of nature, which means protecting the environment is also good for ourselves.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;词汇与语法&quot;&gt;&lt;a href=&quot;#词汇与语法&quot; class=&quot;headerlink&quot; title=&quot;词汇与语法&quot;&gt;&lt;/a&gt;词汇与语法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;content with&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;content you</summary>
      
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="试卷" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%AF%95%E5%8D%B7/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记本" scheme="http://l1562007999.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>模拟试题-2</title>
    <link href="http://l1562007999.github.io/2022/04/28/%E6%A8%A1%E6%8B%9F%E8%AF%95%E9%A2%98-2/"/>
    <id>http://l1562007999.github.io/2022/04/28/%E6%A8%A1%E6%8B%9F%E8%AF%95%E9%A2%98-2/</id>
    <published>2022-04-28T02:01:06.000Z</published>
    <updated>2022-04-28T03:23:42.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h1><blockquote><p>be devoid of </p></blockquote><p>缺乏</p><ul><li><p>His face <strong>was devoid of</strong> any warmth or humour.</p><p>他的脸冷若冰霜，没有一丝幽默的表情。</p></li></ul><blockquote><p>by means of</p></blockquote><p>using a particular method or system 借助某事物，以某种方法</p><ul><li><p>The blocks are raised by means of pulleys.</p><p>那些大块物件是用滑轮吊起来的。</p></li></ul><blockquote><p>挑选家具</p></blockquote><p>select our furniture</p><blockquote><p>on the basis of feeling</p></blockquote><p>because of a particular fact or situation 在某事的基础上；根据某事</p><ul><li>discrimination on the basis of sex</li></ul><p>​        性别歧视</p><blockquote><p>we can afford it</p></blockquote><p>我们能买得起(为了表示炫耀)</p><blockquote><p> simplicity</p></blockquote><p>the quality of being simple and not complicated, especially when this is attractive or useful 朴素，简朴，简单〔尤指吸引人的或有用的〕</p><ul><li><p>James’ solution to this problem <strong>was simplicity itself</strong> (&#x3D;very simple).</p><p>詹姆斯对这个问题的解决办法十分简单。</p></li></ul><blockquote><p>gradation</p></blockquote><p>a small change or difference between points on a scale 〔不同标度之间的〕渐变，层次，级次</p><ul><li><p>There are many <strong>gradations of colour</strong> between light and dark blue.</p><p>浅蓝和深蓝之间有许多颜色层次。</p></li><li><p>But human eyes excel in other ways. They are in fact <strong>remarkably discerning in color gradation</strong>.</p><p>然而，人眼在其它方面有优越之处。事实上，人眼对颜色梯度具有非凡的分辨能力。</p></li></ul><blockquote><p>[ British English]terraced house</p><p>[American English]row house</p></blockquote><p>a house which is part of a row of houses that are joined together 排屋〔一排相连房屋中的一幢〕</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Flibreshot.com%2Fwp-content%2Fuploads%2F2018%2F02%2Fcolorful-row-houses-861x551.jpg&refer=http%3A%2F%2Flibreshot.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1653704444&t=fb2451cce2fa6523bd1840a37598d816"></p><h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><p>能使…..的风险….降低..[数据].以上</p><blockquote><p>a stroke conference</p></blockquote><p>不是发翻译成[中风会议]    而是翻译成[中风研讨会]</p><blockquote><p>high cholesterol</p></blockquote><p>高胆固醇</p><blockquote><p>diabetes</p></blockquote><p>糖尿病</p><blockquote><p>微不足道的</p></blockquote><p>marginal</p><p> a marginal change or difference is too small to be important 小的，微不足道的，不重要的 </p><p><mark>OPP <mark>  significant</p><ul><li><p>a marginal increase in the unemployment figures</p><p>失业人数的小幅增加</p></li><li><p>a marginal improvement in profits</p></li></ul><p>  利润的小幅提高</p><blockquote><p><strong>授人以鱼, 不如授人以渔</strong></p></blockquote><p>Give a man a fish and you will feed him for a day。 Teach him how to fish and you will feed him for a lifetime</p><h1 id="改错"><a href="#改错" class="headerlink" title="改错"></a>改错</h1><blockquote><p>the pointless of war</p></blockquote><p>将 pointless改成pointlessness</p><blockquote><p>classics scholar</p></blockquote><p>classic scholar</p><p>因为 classics 是名词</p><blockquote><p>lie </p></blockquote><p>过去式: lay</p><blockquote><p>to begin his first volume of poetry</p></blockquote><p>将begin 改为write</p><h1 id="作文"><a href="#作文" class="headerlink" title="作文"></a>作文</h1><h2 id="看图作文"><a href="#看图作文" class="headerlink" title="看图作文"></a>看图作文</h2><blockquote><p>第一段</p></blockquote><p>The two pie graphs display……</p><p>比例形式呈现: propostional presentation</p><p>大学的  系，部，院 : falculties     这指的是  院系 </p><blockquote><p> 第二段</p></blockquote><p>on the whole 整体来说 这张图总体看起来数个怎么情况  两个最明显的对比</p><blockquote><p>第三段</p></blockquote><p>细节描写</p><p>最少的情况  最多的情况 摆出数据</p><p>相减的情况  相加的情况  摆出数据</p><blockquote><p>第四段</p></blockquote><p>总结:  xxx 与 xxx  并不一样  但是没有足够的证据为什么会这样….</p><h2 id="议论文"><a href="#议论文" class="headerlink" title="议论文"></a>议论文</h2><p>主题: competition on modern society</p><blockquote><p> 第一段</p></blockquote><p>引入主题: fast developing society </p><p>重述第一种观点: 有必要鼓励竞争</p><p>表示支持第一种观点 + 一句概括性理由</p><blockquote><p>第二段</p></blockquote><p>第二种观点: 没必要竞争</p><p>表示不支持:  虽然有他们的担心有道理, 举例…..</p><p>但是 暂时的担心   </p><p>长久以来 竞争还是会发挥更大的作用</p><blockquote><p>第三段</p></blockquote><p>重申自己的观点</p><p>列出竞争的好处 + 举例子(由于竞争 电视剧拍得越来越好得), 用户收益了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;词汇&quot;&gt;&lt;a href=&quot;#词汇&quot; class=&quot;headerlink&quot; title=&quot;词汇&quot;&gt;&lt;/a&gt;词汇&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;be devoid of &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺乏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;His</summary>
      
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="试卷" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%AF%95%E5%8D%B7/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记本" scheme="http://l1562007999.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>I prioritized my research at the expense of my health—until I crashed</title>
    <link href="http://l1562007999.github.io/2022/04/26/I-prioritized-my-research-at-the-expense-of-my-health%E2%80%94until-I-crashed/"/>
    <id>http://l1562007999.github.io/2022/04/26/I-prioritized-my-research-at-the-expense-of-my-health%E2%80%94until-I-crashed/</id>
    <published>2022-04-26T01:57:20.000Z</published>
    <updated>2022-04-28T03:35:35.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h2><p>有人早八晚十007成常态。</p><p>有课题组“卷”到飞起，博士5年发上8篇SCI才能毕业。</p><p>……</p><p>然而，疯狂工作，压榨自己的身体和生活，真的值得吗？</p><p>来自贝尔实验室的一位华人科学家<strong>Mingde Zheng</strong>，最近就在Science上发文，对此现象说了一个大大的“不”字。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>After drawing blood and running a CT scan, the doctor had questions for me. “What is a typical day like for you?” he inquired. “I am a graduate student with a packed schedule that usually keeps me at work late into the night,” I replied. Next, he turned to diet. I paused when this question came, embarrassed by my answer. “I only have coffee for breakfast. For lunch and dinner, I usually grab something from a fast-food vendor on campus.” The doctor seemed aghast(吃惊的,惊骇的). As more questions followed about my stress levels and lifestyle, my unhealthy state began to sink in.</p><p>抽完血和做完CT之后, 医生问了我一些问题:”你的日常是怎样的?” 我回答:”我是名研究生, 日程排满, 通常需要熬到深夜”. 随后, 他问起了我的饮食问题. 我懵住了, 尴尬地回答:”早餐只喝咖啡. 午餐和晚餐的话, 通常就是校园里的自动售货机那儿买点东西. “ 医生惊了Σ(っ °Д °;)っ.  接下来,  医生问了更多关于我个人压力程度与生活习惯方面的问题,  这让我的不健康状态实锤了.</p><p>It was easier to live a well-rounded(全面发展的) life and stay healthy when I was an undergraduate student. I had fewer responsibilities—succeeding in classes was the main priority. I lived in a dorm with resident assistants who advised us about our personal lives, showing us where to eat and exercise. The cafeteria served healthy food options. And I had a built-in group of friends through the dorm, which made it easy to participate in social activities.</p><p>上大学的时候, 我过着面面俱到的生活, 保持身体健康也更简单. 承担的压力不大, 认真上课就行. 我住的宿舍配备了生活辅导员, 他们会指导一下我们生活, 告诉我们到哪里吃饭, 到哪里锻炼. 而且校园餐厅的一些菜品都挺健康. 宿舍内也交到了一群朋友, 所以参加社交活动方便很多.</p><p>That all changed in graduate school. I was laser focused(专注) on my dissertation project and doing what I could to become a successful scientist. I lived off campus, and I didn’t feel I had the time or energy to shop for groceries and cook. I stopped exercising and didn’t spend as much time socializing. My drive to succeed blinded me from seeing any potential problems with my lifestyle.</p><p>可是成为研究生之后, 一切都变了.  我一股脑地钻进论文项目里, 竭尽全力成为一名成功的科学家. 我住在校外, 而且感觉也没时间或精力去商店买东西, 去做饭. 我没有继续锻炼了, 也没有花太多时间社交. 我想要成功的渴望蒙蔽了我的双眼, 让我看不到生活习惯中潜伏的毛病.  </p><p>Sometimes, I could feel that I was becoming sluggish(反应迟钝的). But instead of giving my mind and body a rest, I drank energy boosters to maintain my stamina and continued to work long hours. I became an abusive overlord(封建君主) of my body. But it could only take so much before it crashed and burned.</p><p>有时候, 我能感觉自己反应迟钝. 尽管如此, 我也没有停下来放松身心, 而是靠喝功能饮料来充能, 继续长时间地工作. 我开始透支我的身体了, 就这样透支着, 我的身体离垮掉也不远了.  </p><p>As I progressed through my Ph.D. program, I gained an unhealthy amount of weight. I got tired easily. Energy drinks no longer worked, and my body would react violently to them, with nausea, chills, and shakes. I often caught colds or the flu. And I started to have sporadic(零散的) abdominal pains, which I tried my best to ignore.</p><p>在我投入到我的博士项目过程中, 体重减轻了很多. 我容易感到疲劳. 充能饮料已经没用了, 喝完我会反应强烈, 会出现恶心, 打寒颤和颤抖的症状. 还有, 我开始时不时地感到腹痛, 但我会尽量忍着.</p><p>Eventually, the abdominal pains were so bad they drove me to the emergency room. That’s when the doctor peppered (一连串地(提问))me with questions. As my wife sat terrified by my side, he diagnosed me with a gastrointestinal disorder(肠胃失调) and told me <strong>in no uncertain terms</strong>(直接了当地,绝不含糊地) that I would need to change my lifestyle. No pill would fix my problem; in the long term, eating well, exercising, and trying to minimize stress would be the only way to keep the pain from recurring and turning into something worse.</p><p>果然, 有一次腹痛太猛了, 不得不去了急诊室. 就是这一次医生问了我一连串的健康问题. 我被诊断为肠胃失调, 医生明确告知我要改变生活习惯了. 我老婆当时在旁边陪着我,她很害怕. 医生还说吃药改善不了症状, 需要长期地锻炼, 尽量降低承担的压力, 只有这样才能防止疼痛复发, 病情恶化.</p><p>I worried that if I eased up on the gas pedal(汽车油门) at work, I wouldn’t be as productive. But after hearing the doctor’s warning, I knew I had no choice. I stopped working late into the night, which gave me more time to relax, sleep, and prepare my own meals. I read up on dietary recommendations and began to choose nutritious and healthy foods. I also gave up energy drinks and switched to tea.</p><p>虽然我担心如果在工作上放松的话, 成效将不如以前, 但听了医生一番话之后, 我想我没有选择的余地. 之后, 我停止了熬夜工作, 这样一来, 我就有时间放松放松, 睡个好觉, 自己做饭. 我看了一些饮食推荐, 开始吃营养丰富, 健康的食物. 同时, 我也不再喝功能饮料了, 改成了喝茶.   </p><p>Many times, I was tempted to go back to my old routine. I placed sticky notes in my office and at home to remind myself that if I didn’t make healthy choices, I’d suffer consequences. Over time, though, it became easier, especially once my habits became more ingrained and I began to notice positive changes in my life.</p><p>期间, 很多次, 我想走老路了. 但不行, 所以我会在办公室和家里贴便利贴来提醒自己: 如果打破现在的健康习惯, 我将会吃到苦头. 幸好随着时间的推移, 我越来越适应了这种生活方式, 尤其是我的很多习惯已经根深蒂固了, 同时我开始注意到我的生活有了明显的改善.  </p><p>It’s been 4 years now and, to my surprise, I have not only noticed gains in my health, I have also found it easier to be productive at work. I’m no longer plagued by stomach pains and constant fatigue. And I’m able to remain alert throughout the day without having to rely on energy boosters.</p><p>到现在已经4年了, 我惊喜地发现我不仅收获到了健康, 而且工作也更加容易有成效, 再也没有胃痛的感觉与持续的疲乏感. 而且即便不喝功能饮料, 我也能全天保持警醒的状态.</p><p>My unhealthy lifestyle may not have been the root cause of my health issues—I may have become ill regardless. But I am thankful I had an early warning that I was neglecting my physical health. I’ve noticed many other scientists making similar mistakes, and I worry their <strong>wake-up call</strong> (警示)won’t come until later in life, when it will be harder to reverse the damage. Our work as scientists is important, but we can only do that work if we take care of our bodies.</p><p>我的生活习惯不健康可能并非是引起我的健康问题的根源, 也许最终我无论如何都会生病. 但是我很庆幸我能在这么早就得到警示, 提醒我是在忽视自己的身体健康.  我已经注意到其他科学家也正在犯同样的错误, 还有我担心他们的健康警示会出现得很晚, 到那时就很难恢复对身体造成的伤害了. 身为科学家, 我们的工作固然重要, 但是只有我们养好自己的身体, 才能更好地投入工作.</p><hr><p>来源: </p><p><a href="https://www.science.org/content/article/i-prioritized-my-research-expense-my-health-until-i-crashed">https://www.science.org/content/article/i-prioritized-my-research-expense-my-health-until-i-crashed</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNjc1NzUzMw==&amp;mid=2247619874&amp;idx=2&amp;sn=b0c1bd44692fcc06aaa9651c0dbdd86a&amp;chksm=e8d1a250dfa62b4672292fbf803b60912774bc5ff7941ebced8fc07bf4e1267bd2013ea62f77&amp;scene=178&amp;cur_album_id=1683168268632506370#rd">https://mp.weixin.qq.com/s?__biz=MzIzNjc1NzUzMw==&amp;mid=2247619874&amp;idx=2&amp;sn=b0c1bd44692fcc06aaa9651c0dbdd86a&amp;chksm=e8d1a250dfa62b4672292fbf803b60912774bc5ff7941ebced8fc07bf4e1267bd2013ea62f77&amp;scene=178&amp;cur_album_id=1683168268632506370#rd</a></p>]]></content>
    
    
    <summary type="html">牺牲健康来拼命搞研究---直到身体垮了</summary>
    
    
    
    <category term="翻译" scheme="http://l1562007999.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="EC" scheme="http://l1562007999.github.io/categories/%E7%BF%BB%E8%AF%91/EC/"/>
    
    
    <category term="翻译" scheme="http://l1562007999.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="健康" scheme="http://l1562007999.github.io/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>媒体翻译-1</title>
    <link href="http://l1562007999.github.io/2022/04/26/%E5%AA%92%E4%BD%93%E7%BF%BB%E8%AF%91-1/"/>
    <id>http://l1562007999.github.io/2022/04/26/%E5%AA%92%E4%BD%93%E7%BF%BB%E8%AF%91-1/</id>
    <published>2022-04-26T00:50:03.000Z</published>
    <updated>2022-04-26T01:28:51.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>中文热词通常反映社会变化和文化，有些在外国媒体上愈来愈流行。例如，土豪(tuhao)和大妈(dama)都是老词，但是已获取了新的意义。 </p></blockquote><p>The Chinese heated(buzz&#x2F;hit) words usually reflect social changes and culture, some of which are increasingly popular with foreign media. Tuhao and dama, for example, are both old words, but they get different meanings now。</p><blockquote><p>土豪以前指欺压 佃户和仆人的乡村地主，现在用于指花钱如流水或者喜欢炫耀财富的人，也就是说，土豪有钱，但没有品位。</p></blockquote><p>The word tuhao used to mean rural landlords who oppress their tenants and servants, while now it refers to people spending money without limits or those showing off all around. That is to say, tuhao owns money rather than taste. </p><blockquote><p>大妈是对中年妇女的称呼，但现在特指不久前金价下跌时大量购买黄精的中国妇女。 </p></blockquote><p>The word dama <u>is used to describe middle-aged women</u>(was meant for middle-aged women ). However, it is <strong>now</strong> regarded as a special word to call those Chinese women who rushed to purchase gold when the gold price decreased sharply not long ago。</p><blockquote><p>土豪和大妈可能会被人收入新版牛津(Oxford)英语词典，至今已有约120个中文词被加进了牛津英语词典，成为了英语语言的一部分。</p></blockquote><p>Tuhao and dama may be included in the new Oxford dictionary. Up to now, about 120 Chinese words have been listed in it and became part of the English language.</p><p>&#x2F;img&#x2F;QQ图片20200410075817.png</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;中文热词通常反映社会变化和文化，有些在外国媒体上愈来愈流行。例如，土豪(tuhao)和大妈(dama)都是老词，但是已获取了新的意义。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Chinese heated(buzz&amp;#x2F;hit) </summary>
      
    
    
    
    <category term="翻译" scheme="http://l1562007999.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="CE" scheme="http://l1562007999.github.io/categories/%E7%BF%BB%E8%AF%91/CE/"/>
    
    
    <category term="媒体翻译" scheme="http://l1562007999.github.io/tags/%E5%AA%92%E4%BD%93%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>模拟试题-1</title>
    <link href="http://l1562007999.github.io/2022/04/23/%E6%A8%A1%E6%8B%9F%E8%AF%95%E9%A2%98-1/"/>
    <id>http://l1562007999.github.io/2022/04/23/%E6%A8%A1%E6%8B%9F%E8%AF%95%E9%A2%98-1/</id>
    <published>2022-04-23T01:58:30.000Z</published>
    <updated>2022-04-28T03:23:07.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h1><blockquote><p>在某物方面缺少信心</p></blockquote><p>lack confidence in sth</p><blockquote><p>only that</p></blockquote><p>I would have gone to the lecture with you <mark>only that<mark> I was so busy.</p><p>这里的only that 理解为 “要不是”</p><blockquote><p>Many happy returns. </p></blockquote><p>长命百岁, 常用作生日贺词</p><blockquote><p>在…条件之下</p></blockquote><p><mark>on<mark> the conditions of…</p><blockquote><p>It must ____  be kept in a closed container.</p></blockquote><p>可以填 therefore</p><blockquote><p>in the case of sth</p></blockquote><p>在… 的情况下</p><blockquote><p><mark>take<mark>  a quite different approach….</p></blockquote><p>采取…的方式 </p><blockquote><p>句子: The combination of temperature and pressure ___ which the densities become equal is called the critical point. </p></blockquote><p>填 at</p><blockquote><p>supporting</p></blockquote><p>支持的 配套的</p><blockquote><p> 同时地</p></blockquote><p>synchronically</p><ol><li>The synchronic closure system can solve this problem.<br>使用同步闭合系统解决了这个问题。</li></ol><blockquote><p>change &#x3D;&#x3D; alternation</p></blockquote><blockquote><p>adult cell </p></blockquote><p>成体细胞</p><blockquote><p>primate</p></blockquote><p>灵长类动物</p><blockquote><p>达成共识</p></blockquote><p>accept</p><p>or   accepted </p><blockquote><p>妇女地位</p></blockquote><p>Women’s status</p><blockquote><p>在…方面有机会</p></blockquote><p>in access to 比如说 医疗:  health care</p><blockquote><p>人权组织</p></blockquote><p>human rights communities</p><h1 id="改错"><a href="#改错" class="headerlink" title="改错"></a>改错</h1><p>改错类型</p><p>必有一句没有错误</p><p>谓语的时态语态 </p><p>关联词的修改</p><p>词的形式导致的语义错误或者逻辑错误</p><p>借此缺失</p><h1 id="作文"><a href="#作文" class="headerlink" title="作文"></a>作文</h1><p>As is shown in the table&#x2F;chart&#x2F;pie chart&#x2F;…..</p><p>In the light of the table….</p><p>To begin with, …..</p><p>In addition, …..</p><p>cause an increase rate of 12 percent….</p><blockquote><p>merit</p></blockquote><p>作动词: 应得的, 值得的  相当于deserve</p><blockquote><p>trendsetters</p></blockquote><p>开创新潮流的人  这里指明星</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;词汇&quot;&gt;&lt;a href=&quot;#词汇&quot; class=&quot;headerlink&quot; title=&quot;词汇&quot;&gt;&lt;/a&gt;词汇&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在某物方面缺少信心&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;lack confidence in sth&lt;/p&gt;</summary>
      
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="试卷" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%AF%95%E5%8D%B7/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记本" scheme="http://l1562007999.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Imagination-Shawn Mendes</title>
    <link href="http://l1562007999.github.io/2022/04/22/Imagination-Shawn-Mendes/"/>
    <id>http://l1562007999.github.io/2022/04/22/Imagination-Shawn-Mendes/</id>
    <published>2022-04-22T02:11:32.000Z</published>
    <updated>2022-04-22T03:08:02.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Imagination"><a href="#Imagination" class="headerlink" title="Imagination"></a>Imagination</h1><h3 id="Shawn-Mendes"><a href="#Shawn-Mendes" class="headerlink" title="Shawn Mendes"></a><a href="https://www.lyrics.com/artist/Shawn-Mendes/2979091">Shawn Mendes</a></h3><p>不需要的翻译, 因为我懂英语啦</p>    <div id="aplayer-wKniSiRJ" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="31421331" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload=",metadata" data-theme="#dd001b"    ></div><p>Oh, there she goes again<br>Every morning it’s the same<br>You walk on by my house<br>I wanna call out your name</p><p>I wanna tell you how beautiful you are from where I’m standing<br>You got me thinking what we could because</p><p>I keep craving, craving, you don’t know it but it’s true<br>Can’t get my mouth to say the words they want to say to you<br>This is typical of love<br><mark><strong>Can’t wait anymore, I won’t wait</strong><br><strong>I need to tell you how I feel when I see us together forever</strong><mark></p><p>In my dreams you’re with me<br>We’ll be everything I want us to be<br>And from there, who knows, maybe this will be the night that we kiss for the first time<br>Or is that just me and my imagination</p><hr><p>We walk, we laugh, we spend our time walking by the ocean side<br>Our hands are gently intertwined<br>A feeling I just can’t describe<br>All this time we spent alone, thinking we could not belong to something so damn beautiful<br>So damn beautiful</p><hr><p>I keep craving, craving, you don’t know it, but it’s true<br>Can’t get my mouth to say the words they want to say to you<br>This is typical of love<br>Can’t wait anymore, I won’t wait<br>I need to tell you how I feel when I see us together forever</p><hr><p>In my dreams, you’re with me<br>We’ll be everything I want us to be<br>And from there, who knows, maybe this will be the night<br>That we kiss for the first time<br>Or is that just me and my imagination</p><p>Imagination<br>Imagination<br>(Whoa, whoa, whoa)</p><hr><p>In my dreams, you’re with me<br>We’ll be everything I want us to be<br>And from there, who knows, maybe this will be the night<br>That we kiss for the first time<br>Or is that just me and my imagination</p><p>I keep craving, craving, you don’t know it, but it’s true<br>Can’t get my mouth to say the words they want to say to you</p>]]></content>
    
    
    <summary type="html">一首歌的歌词</summary>
    
    
    
    <category term="歌曲" scheme="http://l1562007999.github.io/categories/%E6%AD%8C%E6%9B%B2/"/>
    
    <category term="歌词" scheme="http://l1562007999.github.io/categories/%E6%AD%8C%E6%9B%B2/%E6%AD%8C%E8%AF%8D/"/>
    
    
    <category term="歌词" scheme="http://l1562007999.github.io/tags/%E6%AD%8C%E8%AF%8D/"/>
    
    <category term="英文歌曲" scheme="http://l1562007999.github.io/tags/%E8%8B%B1%E6%96%87%E6%AD%8C%E6%9B%B2/"/>
    
  </entry>
  
  <entry>
    <title>ACM-《程序员延寿指南》</title>
    <link href="http://l1562007999.github.io/2022/04/22/ACM-%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BB%B6%E5%AF%BF%E6%8C%87%E5%8D%97%E3%80%8B/"/>
    <id>http://l1562007999.github.io/2022/04/22/ACM-%E3%80%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BB%B6%E5%AF%BF%E6%8C%87%E5%8D%97%E3%80%8B/</id>
    <published>2022-04-22T01:51:27.000Z</published>
    <updated>2022-04-22T03:08:56.275Z</updated>
    
    <content type="html"><![CDATA[<p>截取部分学到的内容</p><p>文章来自: <a href="https://www.ithome.com/0/614/212.htm">https://www.ithome.com/0/614/212.htm</a></p><p>GitHub 项目地址：<a href="https://github.com/geekan/HowToLiveLonger">https://github.com/geekan/HowToLiveLonger</a></p><h2 id="程序员，该如何延寿？"><a href="#程序员，该如何延寿？" class="headerlink" title="程序员，该如何延寿？"></a>程序员，该如何延寿？</h2><p>纵观这个项目，其所围绕的一个关键词是 ——ACM。但并不是你以为的那个 ACM，它的全称是 All-Cause Mortality，中文叫做全因死亡率。（连关键词都挺程序员味道的）</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>这项为期八年的研究表明，如果每天平均每天增加至少半份红肉摄入，那么 ACM 将增加 10%。而每周吃两份红肉或加工肉类（不包括禽或鱼类），则 ACM 会增加 3%。</p><hr><p>当然，除了红白肉的分析之外，项目作者也列举了其它人们平时会摄入的食物，对 ACM 的影响分析。总结来说便是：</p><ul><li>吃白肉：ACM 可降低 3%-11%</li><li>蔬果为主 ACM 可降低 17%-26%</li><li>多吃辣：ACM 可降低 23%</li><li>多吃坚果：ACM 可降低 4%-17%</li><li>少吃蛋黄：若每天吃 0.5 颗，ACM 会增加 7%</li><li>中量碳水、多吃植物蛋白：ACM 可降低 10%</li></ul><hr><p>除了“吃的”之外，平时我们“喝的”也会对 ACM 产生影响：</p><p>喝咖啡（-12%<del>-22% ACM）、喝牛奶（-10%</del>-17% ACM）、喝茶（-8%~15% ACM）、少喝或不喝甜味饮料（否则每天一杯 + 7% ACM，+ 多巴胺）、戒酒或每周 100g（纯酒精量 (g)&#x3D; 饮酒量 (ml)× 酒精浓度）。</p><hr><p>吸烟会让 ACM 增加 50%，寿命平均缩短 11 至 12 年。</p><p>除此之外，像多晒太阳可以降低 40% 的 ACM。</p><p>而药物方面，例如二甲双胍可以让糖尿病人可以平均多活 3 年、复合维生素可以患癌风险降低 8%，亚精胺和葡萄糖胺分别可以降低 ACM30%-60% 和 39%。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>类比上述的输入，这里的输出指的便是程序员们在体外的一些活动了。例如运动方面，根据《柳叶刀》一项 120 万人参与的研究，仅是 挥拍运动，若是每周能保持 3 次，每次 45-60 分钟，便可以让 ACM 降低 47%。还有程序员们得好好刷牙，这样会让 ACM 降低 25%！</p><p>除此之外，睡觉也是降低 ACM 的重要因素。例如 JAMA Network Open 的一项研究，便指出了每晚的睡眠时长与全因死亡率的关联。具体而言，每天睡 7 小时全因死亡率最低。若是在 22-24 点间睡觉最好，早睡和晚睡会分别增加 43% 和 15% 的 ACM。</p><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a><strong>Context</strong></h2><p>就像一段代码有了外部变量，这段代码便无法独立运行。程序员们的健康也是如此，ACM 会受到外部环境的影响。例如研究表明，悲观情绪会与 ACM 有所关联（虽然乐观情绪并不会起到保护作用）。甚至贫富差距、减肥都与 ACM 息息相关。</p><p>当然，还有近几年全球爆发的新冠疫情，Nature 子刊的一项研究表明：（美国）新冠死亡率达到了 1.5% 左右，人均预期寿命减少了 2 年。</p><p><img src="https://img.ithome.com/newsuploadfiles/2022/4/d4138004-7232-4fde-8b22-530c6b9b2153.png"></p><blockquote><blockquote><p>所有文献表明的更多是相关而非因果。</p></blockquote></blockquote>]]></content>
    
    
    <summary type="html">跟着程序员搞养生，最高能多活 20 年？！就在最近，一个名为《程序员延寿指南》的项目在 GitHub 上大受欢迎，几天狂揽 5.5k 颗星星。</summary>
    
    
    
    <category term="前端" scheme="http://l1562007999.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="科普" scheme="http://l1562007999.github.io/categories/%E5%89%8D%E7%AB%AF/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="编程" scheme="http://l1562007999.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="软文" scheme="http://l1562007999.github.io/tags/%E8%BD%AF%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>翻译练习-CE-3</title>
    <link href="http://l1562007999.github.io/2022/04/19/%E7%BF%BB%E8%AF%91%E7%BB%83%E4%B9%A0-CE-3/"/>
    <id>http://l1562007999.github.io/2022/04/19/%E7%BF%BB%E8%AF%91%E7%BB%83%E4%B9%A0-CE-3/</id>
    <published>2022-04-19T02:23:35.000Z</published>
    <updated>2022-04-29T06:36:21.232Z</updated>
    
    <content type="html"><![CDATA[<p><strong>建议时间：****60-70分钟</strong></p><p><strong>难点：****意群切分、重复措辞化简、文化概念</strong></p><h1 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h1><p>中华文明是亚洲文明的重要组成部分。自古以来，中华文明在继承创新中不断发展，在应时处变中不断升华，积淀着中华民族最深沉的精神追求，是中华民族生生不息、发展壮大的丰厚滋养。中国的造纸术、火药、印刷术、指南针、天文历法、哲学思想、民本理念等在世界上影响深远，有力推动了人类文明发展进程。</p><p>中华文明是在同其他文明不断交流互鉴中形成的开放体系。从历史上的佛教东传、“伊儒会通”，到近代以来的“西学东渐”、新文化运动、马克思主义和社会主义思想传入中国，再到改革开放以来全方位对外开放，中华文明始终在兼收并蓄中历久弥新。亲仁善邻、协和万邦是中华文明一贯的处世之道，惠民利民、安民富民是中华文明鲜明的价值导向，革故鼎新、与时俱进是中华文明永恒的精神气质，道法自然、天人合一是中华文明内在的生存理念。</p><p>今日之中国，不仅是中国之中国，而且是亚洲之中国、世界之中国。未来之中国，必将以更加开放的姿态拥抱世界、以更有活力的文明成就贡献世界。</p><h1 id="翻译中"><a href="#翻译中" class="headerlink" title="翻译中"></a>翻译中</h1><h2 id="第一段"><a href="#第一段" class="headerlink" title="第一段"></a>第一段</h2><p>中华文明是亚洲文明的<strong>重要组成部分</strong>。</p><p><strong>自古以来</strong>，中华文明<strong>在继承创新中不断发展</strong>，在应时处变中不断升华，积淀着中华民族最深沉的精神追求，是中华民族生生不息、发展壮大的丰厚滋养。</p><p>中国的造纸术、火药、印刷术、指南针、天文历法、哲学思想、民本理念等在世界上影响深远，有力推动了人类文明发展进程。</p><p>翻译: Chinese civilization is an essential part of Asian civilization.</p><p>参考:  Chinese civilization is a vital component of Asian civilization. </p><p>翻译: From ancient time, it has been continuously developing through succession and innovation, evolving by adapting to the trend of times and changes, and accumulating the earnest spiritual inspiration. Thanks to these virtues,  Chinese civilization can be of durability and lasting development.</p><p>参考: <code>Throughout history</code>, it has grown stronger and more diverse <strong>by drawing on strengths from past experiences</strong>, reinventing itself, and <strong>responding to new realities</strong> on the ground. It is an embodiment of the profoundest spiritual pursuit of the nation and a rich source of momentum <strong>for the sustained development</strong> of the nation as well. </p><p>翻译: China’s technologies and arts, such as paper-making, gunpowder, printing, (the compass), astronomy and lunar calender system, philosophical ideas and people-centered principle(s), has forcefully pushed forward the progress of human civilization.</p><p>参考: At the same time, from paper-making to gun powder, from printing to the compass, from astronomical knowledge and calendar systems to philosophy and people-centered <strong>principles</strong> of governance, Chinese inventions have left a far-reaching impact on the world and given a strong boost to the development of human civilization as a whole. </p><p><strong>官方译文</strong></p><p>Being an inseparable part of Asian civilizations, Chinese civilization has, since its early days, evolved and grown by drawing on its past achievement, exploring new ground and adapting to changes. It represents the profound pursuit of the Chinese nation and provides a rich source of strength for its lasting development. Chinese inventions such as paper making, gunpowder, printing and the compass as well as China’s astronomical knowledge, calendar system, philosophy and the people-centered <strong>doctrine</strong> have all had a global impact and <strong>propelled</strong> the development of human civilizations.</p><h2 id="第二段"><a href="#第二段" class="headerlink" title="第二段"></a>第二段</h2><p>中华文明是在同其他文明不断交流互鉴中形成的开放体系。</p><p>从历史上的佛教东传、“伊儒会通”，到近代以来的“西学东渐”、新文化运动、马克思主义和社会主义思想传入中国，再到改革开放以来全方位对外开放，中华文明始终在兼收并蓄中历久弥新。</p><p>亲仁善邻、协和万邦是中华文明一贯的处世之道，惠民利民、安民富民是中华文明鲜明的价值导向，革故鼎新、与时俱进是中华文明永恒的精神气质，道法自然、天人合一是中华文明内在的生存理念。</p><p>翻译: Chinese civilization is an open system forged by exchanges with and mutual learning from other civilizations. </p><p>参考: Chinese civilization is an open system formed through constant exchanges with other civilizations. </p><p>翻译: From XuanZang’s pilgrim for Buddhism, and Confucianism-Islam exchanges, to in modern time,  conversion of Western learning,  New Culture movement, learning of Maxism and Communism,  and to China’s reform and opening up,  this civilization  is always thriving in an eclectic way.   </p><p>参考: In fact, it enhances its diversity by embracing the best of other cultures, from the introduction of Buddhism to the dialogue between Islam and Confucianism in ancient times, from the introduction of Western learning to the New Culture Movement and the import of Marxism and socialism in modern times, along with across-the-board opening up since the launch of reform and opening up.</p><p>翻译: For such civilization,  keeping a friendly neighborhood and harmonious relationships with other nations are the way it deals with the world; Benefiting its people and securing them a prolific livelihood are its distinguished value orientation;  pursuing innovation and advancing with time are its eternal spirit; obeying nature’s law and uniting of human and nature are its philosophy of survival.  </p><p>参考: For Chinese civilization, fostering amity with neighboring countries and harmony with all nations is its way of engaging with the world; delivering benefits, stability and prosperity to the people is its defining value orientation; innovating and moving with the times are its enduring character; and, respecting nature and achieving the unity of man and nature are its guiding principles of existence. </p><p><strong>官方译文</strong></p><p>Chinese civilization, as an inclusive and integrated whole, has become what it is today through constant interactions with other civilizations. It has been enriched by the introduction of Buddhism and the confluence of Islam and Confucianism in the old days, and by the introduction of Western learning, the launch of the New Culture Movement and the introduction of Marxism and socialism in modern times. All-round opening-up of the country, starting with the reform and opening-up program, has added to its vitality today. For Chinese civilization, amity and good neighborliness is the principle guiding our interactions with other countries; and to deliver prosperity and security to the people is the overarching goal, to keep pace with the times through reform and innovation the abiding commitment, and to achieve harmony between man and nature the underlying philosophy.</p><p>伊儒会通: 是伊斯兰文化与儒家文化交流、沟通与融合等</p><p>历久弥新: 指经历长久的时间而更加鲜活，更加有活力，更显价值。或者是指一样东西不因时间而变旧，变腐，反而更加有活力，更显价值，比新的还要好。</p><h2 id="第三段"><a href="#第三段" class="headerlink" title="第三段"></a>第三段</h2><p>今日之中国，不仅是中国之中国，而且是亚洲之中国、世界之中国。<strong>未来之中国</strong>，必将以更加开放的姿态拥抱世界、以更有活力的文明成就贡献世界。</p><p>China of toady, is not only about herself, but also significant to Asian and even to the world.  China of the future will definitely embrace the world with an more open mind and infuse more energy into the world.</p><p>参考: China today is more than a country; it is also <strong>a member of</strong> Asia and the wider world. <strong>In the years to come</strong>, it will definitely expand engagement with the world in a more open manner and contribute to world development by sharing its robust achievements. </p><p><strong>官方译文</strong></p><p>China today is more than the country itself; it is <strong>very much a part of</strong> Asia and the world. In the time to come, China will open its arms wider to embrace the world and contribute the dynamic achievements of Chinese civilization to a better world in the future.</p>]]></content>
    
    
    <summary type="html">待补充的概览</summary>
    
    
    
    <category term="翻译" scheme="http://l1562007999.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="CE" scheme="http://l1562007999.github.io/categories/%E7%BF%BB%E8%AF%91/CE/"/>
    
    
    <category term="翻译" scheme="http://l1562007999.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="中华文化" scheme="http://l1562007999.github.io/tags/%E4%B8%AD%E5%8D%8E%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2021-初</title>
    <link href="http://l1562007999.github.io/2022/04/17/2021-%E5%88%9D/"/>
    <id>http://l1562007999.github.io/2022/04/17/2021-%E5%88%9D/</id>
    <published>2022-04-17T08:51:11.000Z</published>
    <updated>2022-04-23T12:17:28.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="词汇与语法"><a href="#词汇与语法" class="headerlink" title="词汇与语法"></a>词汇与语法</h1><blockquote><p>thought</p></blockquote><p>抽象名词 不可数</p><p>所以  a rational thought  中  不要加 a</p><blockquote><p>seize</p></blockquote><p>British police seized all the items in an operation that March.</p><blockquote><p>注意 historic 与historical的区别</p></blockquote><p>rical  表示 有历史意义的</p><p>ric 表示 历史的  历史事实相关之类的</p><h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><blockquote><p>地道的享受</p></blockquote><p>a real treat</p><h1 id="改错"><a href="#改错" class="headerlink" title="改错"></a>改错</h1><blockquote><p>for this occasion（开头）</p></blockquote><p>for 改为 on  </p><p>on this occasion  这一次</p><p>eg. </p><p>Well, sadly, on this occasion it was not a correct guess.<br>好吧，很遗憾，这次没猜对。</p><blockquote><p>we were driving alone.</p></blockquote><p>alone 改为  alone   这里并不是“we” 与 “alone” 相矛盾</p><p>along： 向前  going forward 向前</p><ul><li><p>I was driving along, thinking about Chris.</p><p>我一边开车，一边想着克里斯。</p></li><li><p>a group of children walking along in a line</p></li></ul><p>  排着队向前走的一群孩子</p><blockquote><p>It was pretty scary, and we were lucky and none of us got hurt.</p></blockquote><p>and 改为 but   后面的lucky 与前面的scary 形成语义转折关系</p><blockquote><p>It was so frightening that I will never forget.</p></blockquote><p>forget 后面加一个it  因为 that 前面不做形式宾语  不然 forget what？？？</p><h1 id="作文"><a href="#作文" class="headerlink" title="作文"></a>作文</h1><p>Never forget the hard lives before, because only with the inspiration of these memories can we go farther in the ever-changeable future.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;词汇与语法&quot;&gt;&lt;a href=&quot;#词汇与语法&quot; class=&quot;headerlink&quot; title=&quot;词汇与语法&quot;&gt;&lt;/a&gt;词汇与语法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;thought&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;抽象名词 不可数&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="试卷" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%AF%95%E5%8D%B7/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记本" scheme="http://l1562007999.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>翻译练习-2</title>
    <link href="http://l1562007999.github.io/2022/04/17/%E7%BF%BB%E8%AF%91%E7%BB%83%E4%B9%A0-2/"/>
    <id>http://l1562007999.github.io/2022/04/17/%E7%BF%BB%E8%AF%91%E7%BB%83%E4%B9%A0-2/</id>
    <published>2022-04-17T06:36:48.000Z</published>
    <updated>2022-04-19T01:35:05.005Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/04/19/2UnqpBhFwGjc8lZ.png" alt="微信图片_20220419093043.png"></p><p>2009年《时代》杂志将一款在三所纽约市公立学校试点的在线数学程序誉为是该年度50项最佳创新之一。</p><p>这款软件每天能为学生生成个性化的数学学习“列表”，然后学生可以凭自己的意愿选择学习模式——<del>软件上学习</del>软件教学，虚拟老师<del>教学</del>或者是<del>实体老师</del>真人教学。其独特的算法能分门别类地将各位老师的专长和课程安排与学生的需求相匹配。一位<del>兽医</del>资深教师夸赞道：“这款软件不仅能<del>自动</del>生成课程，发布测验，还能批改测验。”</p><p>尽管该程序只能略微提升学生的数学成绩（收效甚微），并且采用的这款程序的纽约市学校也不多（没有<del>声称</del><strong>预计</strong>的50所），但是它是安德里亚·加博尔在其《教育战争之后》一书中的<del>提到</del><strong>勾勒</strong>的突出实例化。三十多年来，企业慈善家，教育技术企业<del>家</del>和公共教育官员<del>进行了似乎不可能的联合</del>破天荒地达成统一战线，引领学校改革，<strong>但是</strong>这场改革<del>具有对技术的高估，标准化的测验，降低学生和社区的价值的特点</del>高估了技术和标准化考试的作用，贬低了教师和社区的价值。</p><p>modality： 形式、形态</p><p>sort： 分类</p><p>veteran instructor： 资深教师</p><p>slate： 预定；计划；安排</p><ul><li>例如 计划房子的拆除</li><li>the houses were first slated for demolition five years ago.</li></ul><p>chart： 动词 绘制 制定</p><ul><li><p>书中绘制地藏宝地图</p><p>the charted map for hunting treasure</p></li></ul><p>spearhead： 动词   带领，带头，</p><p>a brand of ： 一连串， 一系列…</p><p>devalue： 贬低…的价值</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这篇翻译练习中，要注意的点：</p><ol><li>单词的意思把握不到位： slate， modality，spearhead，sort，chart，veteran instructor</li><li>a flesh-and-blood one 真人</li><li>注意不要随意增词,例如 这款软件不仅能<del>自动</del>生成课程</li><li>an unlikely coalition 破天荒的统一战线</li><li>a brand of school reform 一股教改浪潮</li><li>谁知道 characterized 这里 竟然是转折关系…</li></ol>]]></content>
    
    
    <summary type="html">待补充的概览</summary>
    
    
    
    <category term="翻译" scheme="http://l1562007999.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="EC" scheme="http://l1562007999.github.io/categories/%E7%BF%BB%E8%AF%91/EC/"/>
    
    
    <category term="翻译" scheme="http://l1562007999.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="外刊" scheme="http://l1562007999.github.io/tags/%E5%A4%96%E5%88%8A/"/>
    
  </entry>
  
  <entry>
    <title>翻译练习-1</title>
    <link href="http://l1562007999.github.io/2022/04/16/%E7%BF%BB%E8%AF%91%E7%BB%83%E4%B9%A0-1/"/>
    <id>http://l1562007999.github.io/2022/04/16/%E7%BF%BB%E8%AF%91%E7%BB%83%E4%B9%A0-1/</id>
    <published>2022-04-16T12:10:40.000Z</published>
    <updated>2022-04-19T01:22:09.845Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接： <a href="https://mp.weixin.qq.com/s/mw2-DH96iC5996FEHVBd6Q">https://mp.weixin.qq.com/s/mw2-DH96iC5996FEHVBd6Q</a></p><h1 id="第一段"><a href="#第一段" class="headerlink" title="第一段"></a>第一段</h1><blockquote><p><code>就业</code>是最大的民生，事关经济发展和社会稳定<code>大局</code>。当前我国经济发展面临<code>需求收缩</code>、供给冲击、预期转弱<strong>三重压力</strong>，加之新冠肺炎<strong>疫情</strong><del>因素</del>，使得<code>市场</code>用人需求存在不确定性。此外，<strong>结构性就业</strong><code>矛盾</code>尚未得到<strong>根本缓解</strong>（原因 as a result）， “就业难”与“招人难”并存的<del>现象</del><strong>仍然存在</strong>（结果）。</p></blockquote><h2 id="我的译文"><a href="#我的译文" class="headerlink" title="我的译文"></a>我的译文</h2><p>Employment, the most important livelihood, is crutial to economic development and social stability. </p><p>For now（At present）, our economic development faces huge pressure from demand shrinking, <del>imbalance of supply and demand</del><code>supply shocks</code>, and <del>lower expectation</del> <code>weakening expectation</code>,(可以断句) </p><p><strong>M</strong>oreover with the impact of +<strong><code>the</code></strong>+COVID-19 epidemic, all togrther <del>bringing</del> bring out (or lead to) uncertainty（add another veil） on <del>hiring and employment</del> <code>labor market</code>. </p><p>In addition(Aside from that), <del>contradiction</del>as a result of fundamentally unresolved   structural issues in the market <del>has yet not (not yet) been  alleviated(relieved)</del>, <del>leaving problems on both hiring and working process</del>， many job seekers aren’t able to secure a job while companies complain they can’t find enough workers。      </p><h2 id="指点"><a href="#指点" class="headerlink" title="指点"></a>指点</h2><ul><li>最大的民生（问题）： the biggest livelihood issue</li><li><code>大局</code> 可以可以翻译成 overall picture 或者不翻译</li><li>第一句话注意两个分句之间的逻辑关系</li><li><code>需求紧缩</code>&#x3D;&#x3D;需求减少： demand contraction&#x2F;shirinking</li><li>供给冲击： supply shocks</li><li><code>（社会性/结构性）矛盾</code>: 矛盾 都是指问题 统一翻译成 problem或者issue</li><li><code>市场</code>: 指的是劳工市场， labor market</li><li>结构性就业矛盾： 市场里面的结构性问题  structural issues in the market</li><li>“就业难”与“招人难”并存: 注意这里怎么翻译： many job seekers aren’t able to secure a job while companies complain they can’t find enough workers</li><li><strong>国内的疫情用epidemic。国际的用pandemic</strong></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Employment is the most important livelihood issue and relates to economic development and social stability. At present, our economy faces triple pressures from demand contraction, supply shocks and weakening expectations. These factors, coupled with the covid-19 epidemic, have led to the uncertainty of demand in the labor market. Meanwhile, as a result of fundamentally unresolved structural issues in the market, many job seekers aren’t able to secure a job while companies complain they can’t find enough workers.</p><h1 id="第二段"><a href="#第二段" class="headerlink" title="第二段"></a>第二段</h1><blockquote><p>与此同时，2022年高校毕业生规模预计达1076万人，（断句）就业形势依然<code>严峻复杂</code>，但机遇与挑战并存。作为全球第二大经济体，我国拥有庞大的<strong>国内</strong>市场和<code>完备</code>的<code>产业体系</code>，就业<code>空间广</code>、<code>潜力足</code>。随着经济结构不断优化，一系列新职业<del>不断</del>涌现，为<code>新增劳动力</code>创造<code>更大的就业天地</code>。</p></blockquote><p>At the same time, it is estimated that in 2022 there will be 10.76 million +<strong>college</strong>+graduates. Although（Despite） it continues to add challenges to job seekers, opportunities come along with it. As the second <strong>largest</strong> economy in the world, China has a giant <strong>domestic</strong> market and equipped with a sound（full-fledged） industrial system(structure)， which provide a wide range of jobs <del>as well as</del> <strong>and</strong> developing potentials. As we insist on optimizing our economic structure, a series of professions are emerging <del>and create</del> ，<strong>creating</strong> mountainous opportunities（a larger job market ） for <strong>new</strong> workforce.</p><h2 id="指点-1"><a href="#指点-1" class="headerlink" title="指点"></a>指点</h2><ul><li>就业形式依然严峻：employment situation is severe&#x2F;grave and complicated</li><li>产业体系： industrial stucture</li><li>完备的：full-fledged </li><li>就业空间广， 潜力足： 就业 有 很多机会和十足的潜力   &#x3D;&gt; present ample opportunities for and strong potential of job creation.</li><li>新增劳动力：new entrants（新职员，新成员） into the labor market</li><li>更大的就业天地： 更多的职业岗位 more posts</li></ul><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p>In 2022, college graduates in China are expected to be 10.76 million. Despite the grave and complicated employment situation, there are opportunities as well as challenges. As the second largest economy in the world, we have a massive domestic market and a full-fledged industrial system, which presents ample opportunities for and strong potential of job creation. Thanks to an increasingly modernized economic structure, a wide range of new occupations are emerging in large numbers, offering greater space for new entrants into the labor market. </p><h1 id="第三段"><a href="#第三段" class="headerlink" title="第三段"></a>第三段</h1><blockquote><p>近年来，<code>各地各部门</code>持续优化营商环境(1)，取得很大成效(2  是1的结果)。但是，<code>针对</code> <code>企业</code>反映强烈的<code>痛点堵点</code> <code>问题</code>，（增加主语 we or it is important that）仍需<del>持续</del>缩减<code>市场准入负面清单</code>，在<code>政府权力做“减法”</code>、监管力度做“加法”、优化服务做“乘法”上<strong>下功夫</strong>，使创新创造创业氛围更加浓厚。</p></blockquote><p>In recent years, <del>local governments and departments</del><strong>authorities across the country</strong> have achieved a lot on the optimization of bussiness environment. However, in order to slove those tricky problems ( that some <del>enterprises</del>firms have appealed) of firms(companies), we still need to shorten the negative list <del>of market permission</del> <strong>for foreign investment</strong>. By <del>weakening government power</del>streamlining administration, stengthening <del>supervision</del><strong>regulation</strong> and improving public services, we will <del>make</del>build a more suitable&#x2F;enabling environment&#x2F;climate for innovation, <del>production</del>invention&#x2F;creativity and business startups.</p><h2 id="指点-2"><a href="#指点-2" class="headerlink" title="指点"></a>指点</h2><ul><li>各地各部门： authorities at all levels across the country</li><li>营商环境： business climate&#x2F;environment</li><li>（结果）取得很大成效： 结果用介词引导  with notable&#x2F;great success</li><li>针对…问题： 面对这些问题 或者说是  为了解决这些问题</li><li>企业： 单独出现的时候 处理成 firms or companies</li><li><code>痛点堵点</code> <code>问题</code>： 面临的一些严峻问题  bottlenecks and pain points</li><li>市场准入负面清单： the negative list for foreign investment  &#x2F;&#x2F;&#x2F; the negative list for market access</li><li>政府权力做“减法”: 固定表达 streamline administration(政府管理)</li><li>加强管理： 这里的管理 翻译成 enhance regulation（尤指通过规章进行的管理） 而不是 supervision</li><li>创新创造创业： 其中 创造 应该翻译为invention&#x2F;creativity   创业: entrepreneurship</li><li>优化服务： improve or upgrade public services</li></ul><h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2><p>Over recent years, authorities at all levels across the country have worked to improve the business environment, with notable success. <strong>In light of bottlenecks and pain points that severely inhibit the growth of companies</strong>, however, much remains to be done to reduce the negative list for market access, streamline administration, enhance regulation, and upgrade public services, so as to create a more enabling environment for innovation, invention and entrepreneurship. </p><h1 id="第四段"><a href="#第四段" class="headerlink" title="第四段"></a>第四段</h1><blockquote><p>我国有9亿<code>劳动年龄人口</code>（1 是事实），兼具人口红利和人才红利（2  是1的结果）。随着我国进入<code>高质量发展阶段</code>，挖掘（培养&#x2F;塑造&#x2F;扩大）人才红利是关键。2019年，劳动年龄人口<code>平均受教育年限</code>达10.7年，（断句）应对日趋激烈的国际竞争、培育我国经济<del>发展</del>新优势，都需要加速<code>人力资本</code>积累，<del>主动</del>塑造人才红利。为此，我们要继续<strong>围绕</strong>(表示目的)提高<code>劳动就业人口</code> <code>平均受教育年限</code>，完善（modernize）义务教育制度，加大职业教育投入。</p></blockquote><p>With a number of 900 million of workforce, China has advanteges on demograhic dividend and talent dividend<del>population and talents dividend</del>. As we are entering in a high-quality developing stage, <del>digging</del> <del>out</del> expanding more talent dividend is the key. </p><p>In 2019, the average years of schooling of the working-age pupulation reached 10.7. </p><p>For gaining positions in drastic international competition and forstering new strengths for economic development, we need to accelerate <del>workforce</del>  accumulation of human capital and promptly <del>create talents dividend</del>expand talent pools. </p><p>Thus , <del>we should continue to add more efforts on the average education span of the working population, compulsory education system and vocational education.</del>  we should continue to improve(mordernize) the compulsory education system and increase investment on vocational education so as to increase the average years of schooling of the working-age population.</p><h2 id="指点-3"><a href="#指点-3" class="headerlink" title="指点"></a>指点</h2><ul><li>劳动年龄人口： the working-age population———With the working-age population of 900 million, …..</li><li>兼具： have &#x2F; be home to &#x2F;</li><li>人口红利：demographic dividend</li><li>人才红利： talent dividen（广）     有时候指 human resources </li><li>高质量发展阶段： a stage of high-quality development</li><li>平均受教育年限：the average years of schooling</li><li>经济发展新优势： new economic advantages</li><li>为应对…: in response to </li><li>日趋激烈的国际竞争：  ever-intense international competition</li><li>人力资本：human capital</li><li>劳动就业人口： 劳动人口 the working&#x2F;employed population</li><li>加大…投入： increase investment</li></ul><h2 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h2><p>With a working-age population of 900 million, we profit from massive demographic dividend and talent dividend. In fact, expanding talent dividend holds the key to success as our country has entered a stage of high-quality development. In 2019, the average years of schooling of the working-age population was 10.7. To respond to the ever-intense international competition and foster new economic advantages, it is important to facilitate the accumulation of human capital and expand talent pools. <strong>It means that</strong> we need to increase the average years of schooling of the working population by modernizing the compulsory education system and increasing investment in vocational education. </p><h1 id="全文译文"><a href="#全文译文" class="headerlink" title="全文译文"></a>全文译文</h1><p>Employment is the most important livelihood issue and relates to economic development and social stability. At present, our economy faces triple pressures from demand contraction, supply shocks and weakening expectations. These factors, coupled with the covid-19 epidemic, have led to the uncertainty of demand in the labor market. Meanwhile, as a result of fundamentally unresolved structural issues in the market, many job seekers aren’t able to secure a job while companies complain they can’t find enough workers.</p><p>In 2022, college graduates in China are expected to be 10.76 million. Despite the grave and complicated employment situation, there are opportunities as well as challenges. As the second largest economy in the world, we have a massive domestic market and a full-fledged industrial system, which presents ample opportunities for and strong potential of job creation. Thanks to an increasingly modernized economic structure, a wide range of new occupations are emerging in large numbers, offering greater space for new entrants into the labor market. </p><p>Over recent years, authorities at all levels across the country have worked to improve the business environment, with notable success. In light of bottlenecks and pain points that severely inhibit the growth of companies, however, much remains to be done to reduce the negative list for market access, streamline administration, enhance regulation, and upgrade public services, so as to create a more enabling environment for innovation, invention and entrepreneurship. </p><p>With a working-age population of 900 million, we profit from massive demographic dividend and talent dividend. In fact, expanding talent dividend holds the key to success as our country has entered a stage of high-quality development. In 2019, the average years of schooling of the working-age population was 10.7. To respond to the ever-intense international competition and foster new economic advantages, it is important to facilitate the accumulation of human capital and expand talent pools. It means that we need to increase the average years of schooling of the working population by modernizing the compulsory education system and increasing investment in vocational education. </p><h2 id="“人才红利”"><a href="#“人才红利”" class="headerlink" title="“人才红利”"></a>“人才红利”</h2><p>狭义：大学毕业生对城市的经济贡献</p><p>广义：国民受教育程度对社会的经济贡献。</p><p>此处可选择广义理解的角度，即可使用talent dividend。</p>]]></content>
    
    
    <summary type="html">就业是最大的民生，事关经济发展和社会稳定大局</summary>
    
    
    
    <category term="翻译" scheme="http://l1562007999.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="CE" scheme="http://l1562007999.github.io/categories/%E7%BF%BB%E8%AF%91/CE/"/>
    
    
    <category term="翻译" scheme="http://l1562007999.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="政经文" scheme="http://l1562007999.github.io/tags/%E6%94%BF%E7%BB%8F%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>2020-初</title>
    <link href="http://l1562007999.github.io/2022/04/15/2020-%E5%88%9D/"/>
    <id>http://l1562007999.github.io/2022/04/15/2020-%E5%88%9D/</id>
    <published>2022-04-15T12:42:54.000Z</published>
    <updated>2022-04-17T08:57:58.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语法与词汇"><a href="#语法与词汇" class="headerlink" title="语法与词汇"></a>语法与词汇</h1><blockquote><p>实际的（需要考虑的）因素</p></blockquote><p>practical consideration</p><blockquote><p>in the names of sth</p></blockquote><p>以…命名</p><p>书中的人物名称都是以街道的名字来命名的.</p><p>The names in the books have been commemorated in the names of streets.</p><blockquote><p> get-together</p></blockquote><p>联欢会</p><blockquote><p>break up</p></blockquote><p>解散</p><blockquote><p>by the day</p></blockquote><p>按天数算</p><blockquote><p>journeyman</p></blockquote><p>短工; 计日工</p><blockquote><p>还记得”暑假”怎么说吗?</p></blockquote><p>summer vacation</p><blockquote><p>关于  in opposite directions</p></blockquote><p>这里的direction 一定要加s</p><blockquote><p>to make sure sth</p></blockquote><p>比如可以用在  “确保某人能胜任某项工作”</p><blockquote><p>努力说服学生将来能从事科学与技术方面的事业</p></blockquote><p>to persuade schoolchildren to take up career in science and technology</p><hr><p>在做阅读理解中的填空题时, 应该注意还原原文部分单词的完整性</p><p>比如原文是 If you’re interested in seeing wildlife I recommended travelling in the <code> more remote</code> areas of the country </p><p>题目是: lots of wildlife in ___ areas.  我填的是 <code>remote</code>  而答案是<code>more remote</code>   </p><p>所以要与原文的表述一致</p><hr><h1 id="改错"><a href="#改错" class="headerlink" title="改错"></a>改错</h1><p>改10个 错6个  TMD!!!</p><ol><li><code>the School Association which meet every two weeks for a...</code>  这里的meet 错了  要改为meets</li><li><code>and I asked about pumpking soup...</code>  这里的about 要改为 <code>for</code>   因为 这里的正确理解是我提出要求要什么东西 . 正确的表达式  ask for sth.   PS: 这么简单的都错了 呜呜呜</li><li><code>soup following by a choice of meat or fish and three vegetables</code> 这里的following 要改成<code>followed</code> . 因为 这里是用 被动 表示伴随状语  有 by 作提醒词</li><li><code>we were offered with salad and dessert</code> 因为<code>offer sb sth</code>  被动就是 <code>sb be offered sth </code> 不要加with啦 固定搭配</li><li><code>..that there was nobody can help me</code> 注意时态一致  这里的can 应该改成could 过去式</li><li><code>The person took my booking said that...</code> 这里的took my book 修饰 The person. 改正的话, 应该是 person后面加who  或者是 将took 改为 taking</li></ol><hr><h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><blockquote><p>我们最好的自己</p></blockquote><p>the best version of ourselves</p><blockquote><p>美图应用</p></blockquote><p>photo editing app</p><blockquote><p>分析</p></blockquote><p>动词: analyze</p><p>名词: analysis</p><p>动词ed: analyzed</p><p>动名词: analyzing</p><blockquote><p>在美颜相机里面</p></blockquote><p>这里需要转译</p><p>理解为 在 “美颜图片”里面:  in filtered photos </p><h1 id="作文"><a href="#作文" class="headerlink" title="作文"></a>作文</h1><h2 id="作文1"><a href="#作文1" class="headerlink" title="作文1"></a>作文1</h2><p>是为所展示动物写一篇简介(Write your entry for the competition)</p><h2 id="作文2"><a href="#作文2" class="headerlink" title="作文2"></a>作文2</h2><p>说说未来的房子是怎样的  还要说出现在的房子有什么不足</p><p>范文:</p><blockquote><p>第一段: 引出主题</p></blockquote><p>很难想象未来的房子回事怎样的  因为现在科技发展很快</p><blockquote><p>第二段: 指出现在的房子不足之处  然后提出改进</p></blockquote><p>有人来拜访 招待客人不方便, 比如找多余的拖鞋 准备美味的事物. 所以在未来 要有机器人来接待客人</p><p>点几下按钮  机器人清洁房屋</p><p>房子的墙壁 由特殊材料支撑 一年四季 恒温  不用收到天气变化的影响</p><p>声控家里的设备 手机控制  不用离开椅子</p><blockquote><p>第三段: 再次与当前的房子对比 指出未来房子的最大不同</p></blockquote><p>未来的房子 全自动化(highly-automated)</p><p>不用担心情节与空间规划问题</p><p>不用担心老人独居问题</p>]]></content>
    
    
    <summary type="html">一点总结</summary>
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="试卷" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%AF%95%E5%8D%B7/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记本" scheme="http://l1562007999.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>2018-初</title>
    <link href="http://l1562007999.github.io/2022/04/11/2018-%E5%88%9D/"/>
    <id>http://l1562007999.github.io/2022/04/11/2018-%E5%88%9D/</id>
    <published>2022-04-11T12:13:22.000Z</published>
    <updated>2022-04-17T08:58:02.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h1><blockquote><p>occpupants<br>居住者 住户</p></blockquote><h1 id="Vocabular-amp-Grammar"><a href="#Vocabular-amp-Grammar" class="headerlink" title="Vocabular &amp; Grammar"></a>Vocabular &amp; Grammar</h1><blockquote><p>It’s high time… that  谓语动词的过去式 &#x2F; should+动词原形  </p></blockquote><blockquote><p>The most versatile <mark>are<mark> embryonic stem cells, which…..</p></blockquote><p>这里的are 是根据后面的真正的主语是复数而选出来的   所以谓语是什么形态 总是查看那个是真正的主语的单复数就行了, 不管是在前面 还是在后面</p><h1 id="Cloze"><a href="#Cloze" class="headerlink" title="Cloze"></a>Cloze</h1><blockquote><p>电话联系人: telephone contact</p></blockquote><h1 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h1><blockquote><p>whatever</p></blockquote><p>无论..   要翻译出来</p><blockquote><p>strive for</p></blockquote><p>努力追求…</p><blockquote><p>文化汇聚</p></blockquote><p>cultural merging</p><blockquote><p>从中国飞到地球另一端的美国, …..</p></blockquote><p>When flying from China to America, the other end of the earth, …..</p><p>这里使用同位语来处理 ‘美国’ 这个词的状语</p><blockquote><p>历史经验</p></blockquote><p>historical experiences</p><h1 id="Erro-Correction"><a href="#Erro-Correction" class="headerlink" title="Erro Correction"></a>Erro Correction</h1><blockquote><p>I decided that entire family would have</p></blockquote><p>这里的 entire 前面要加 the  因为是整个  是唯一的</p><h1 id="图表作文"><a href="#图表作文" class="headerlink" title="图表作文"></a>图表作文</h1><p>介绍主题一句话  也就是用自己的话来重述一下题干 就是这张图是关于什么内容</p><p>接下来 总结信息 第一部分信息是怎样的  第二部分信息是怎样 </p><p>接下来 将各部分信息进行对比描述</p><p>总结信息(不是得出观点, 是得出结论)  什么比什么更怎么样  陈述事实 切记不是陈述自己的观点</p><p><img src="/2022/04/11/2018-%E5%88%9D/1111.png"></p><h1 id="议论作文"><a href="#议论作文" class="headerlink" title="议论作文"></a>议论作文</h1><h2 id="第一段"><a href="#第一段" class="headerlink" title="第一段"></a>第一段</h2><p>第一句话: 介绍话题, paraphrase作文题目 </p><p>第二句话: 中心思想 陈述看法</p><h2 id="第二-x2F-三段"><a href="#第二-x2F-三段" class="headerlink" title="第二&#x2F;三段"></a>第二&#x2F;三段</h2><p>两种写作模式</p><h3 id="第一种-分析优缺点-或者问题与解决方案-这种"><a href="#第一种-分析优缺点-或者问题与解决方案-这种" class="headerlink" title="第一种: 分析优缺点 或者问题与解决方案 这种"></a>第一种: 分析优缺点 或者问题与解决方案 这种</h3><p>第一句: 主题句</p><p>第2&#x2F;3&#x2F;4&#x2F;: firstly(解释或者例子)  secondly(解释或者例子).., finally(解释或者例子)…</p><h3 id="第二种-观点-解释-例子"><a href="#第二种-观点-解释-例子" class="headerlink" title="第二种: 观点+解释+例子"></a>第二种: 观点+解释+例子</h3><p>第1句:观点</p><p>第2&#x2F;3&#x2F;4: 解释</p><p>第5句: 例子</p><h2 id="最后一段"><a href="#最后一段" class="headerlink" title="最后一段:"></a>最后一段:</h2><p>第一句话: 总结</p><p>第二句话: paraphrase第一段后面自己写的观点(注意不要出现新的观点)</p>]]></content>
    
    
    <summary type="html">试卷总结</summary>
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="试卷" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/%E8%AF%95%E5%8D%B7/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记本" scheme="http://l1562007999.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
</feed>
