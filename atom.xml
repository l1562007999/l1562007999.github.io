<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>绕梁</title>
  
  <subtitle>余音绕梁-三日不绝</subtitle>
  <link href="http://l1562007999.github.io/atom.xml" rel="self"/>
  
  <link href="http://l1562007999.github.io/"/>
  <updated>2022-04-09T07:34:33.512Z</updated>
  <id>http://l1562007999.github.io/</id>
  
  <author>
    <name>梁珍发</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019-初</title>
    <link href="http://l1562007999.github.io/2022/04/09/2019-%E5%88%9D/"/>
    <id>http://l1562007999.github.io/2022/04/09/2019-%E5%88%9D/</id>
    <published>2022-04-09T06:33:26.000Z</published>
    <updated>2022-04-09T07:34:33.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vovabulary-amp-Grammar-词汇语法"><a href="#Vovabulary-amp-Grammar-词汇语法" class="headerlink" title="Vovabulary &amp; Grammar 词汇语法"></a>Vovabulary &amp; Grammar 词汇语法</h1><p>in line with : 与…一致</p><blockquote><p> in terms of: 依据; 根据…来解释</p></blockquote><ol><li>The wealth of a country should be measured <mark>in terms of<mark> the health and happiness of tis people as well as the material goods it can produce.</li><li>In terms of tropical storms, sure, in terms of hurricanes, not even close.</li></ol><blockquote><p> forthrightly:  直率的，直截了当的〔含褒义〕 SYN straightforward</p></blockquote><ol><li>She answered in her usual forthright manner.<br>她以一贯的直率作了回答。</li></ol><blockquote><p><strong>not so much.. as …</strong>  这是固定搭配:  与其说是, 不如说是….</p></blockquote><ol><li>She was not so much nervous as impatient for the journey to be over.<br>说她紧张，不如说她是不耐烦，希望旅途快点结束。</li></ol><blockquote><p>Once 可以引导条件状语从句</p></blockquote><ol><li>Once I get him a job, he’ll be fine.<br>一旦我帮他找到了工作，他就会好的。</li></ol><blockquote><p><strong>special</strong>  n.  特价的意思</p></blockquote><p>especially American English a lower price than usual for a particular product for a short period of time </p><p>特价 </p><p>SYN special offer</p><ol><li><p>a lunch special for $4.99<br>4.99 美元的特惠午餐</p></li><li><p>Breyer’s ice cream is on special this week.<br>布瑞尔店的冰激凌本周特价。</p></li></ol><h2 id="Cloze-完形填空"><a href="#Cloze-完形填空" class="headerlink" title="Cloze 完形填空"></a>Cloze 完形填空</h2><p>It may explain why, <code>on average</code>, women have a superior ability with words to men.</p><blockquote><p> dyslexic:  a condition that makes it difficult for someone to read and spell 诵读困难</p></blockquote><p>小说家: novelist(s)</p><blockquote><p>主张v. : maintain</p></blockquote><p>to keep stating that sth is true, even though other people do not agree or do not believe it 坚持意见；固执己见 </p><ol><li><p>The men maintained (that) they were out of the country when the crime was committed. </p><p>这几个男人坚持说案发时他们在国外</p></li></ol><blockquote><p>怀疑的:  doubtful   别忘记了中间的b  虽然b不发音</p></blockquote><h1 id="Translation-翻译"><a href="#Translation-翻译" class="headerlink" title="Translation 翻译"></a>Translation 翻译</h1><blockquote><p> something formal and instructive</p></blockquote><p>这里注意 翻译为名词</p><p>正事  和  指示</p><blockquote><p> 文科和理科</p></blockquote><p>arts and science</p><blockquote><p>各自的</p></blockquote><p>respective</p><h1 id="Error-Correction-改错"><a href="#Error-Correction-改错" class="headerlink" title="Error Correction 改错"></a>Error Correction 改错</h1><blockquote><p>穿上短裤</p></blockquote><p>使用put on underwear  而不是 put up</p><blockquote><p>a packed suitcase</p></blockquote><p>不是 a packing suitcase   packed 才能作形容词 表示塞满了的状态</p><h1 id="Writing-写作"><a href="#Writing-写作" class="headerlink" title="Writing 写作"></a>Writing 写作</h1><h2 id="Chart-图表"><a href="#Chart-图表" class="headerlink" title="Chart 图表"></a>Chart 图表</h2><p><img src="/2022/04/09/2019-%E5%88%9D/22222.jpg" alt="22222"></p><blockquote><p>分析</p></blockquote><p><img src="/2022/04/09/2019-%E5%88%9D/Snipaste_2022-04-09_15-24-10.png"></p><h2 id="议论文"><a href="#议论文" class="headerlink" title="议论文"></a>议论文</h2><p>![1 (1)](1 (2).jpg)</p><p>![1 (1)](1 (1).jpg)</p><blockquote><p> 分析</p></blockquote><p><img src="/2022/04/09/2019-%E5%88%9D/3.jpg" alt="3"></p>]]></content>
    
    
    <summary type="html">待补充的副标题</summary>
    
    
    
    <category term="学习英语" scheme="http://l1562007999.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="笔记本" scheme="http://l1562007999.github.io/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>JS-本地储存</title>
    <link href="http://l1562007999.github.io/2022/04/09/JS-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/"/>
    <id>http://l1562007999.github.io/2022/04/09/JS-%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/</id>
    <published>2022-04-09T04:01:41.000Z</published>
    <updated>2022-04-09T04:33:23.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p><h1 id="本地存储特性"><a href="#本地存储特性" class="headerlink" title="本地存储特性"></a>本地存储特性</h1><p>1、数据存储在用户浏览器中<br>2、设置、读取方便、甚至页面刷新不丢失数据<br>3、容量较大，sessionStorage约5M、localStorage约20M<br>4、只能存储字符串，可以将对象JSON.stringify() 编码后存储</p><h1 id="两种存储方式"><a href="#两种存储方式" class="headerlink" title="两种存储方式"></a>两种存储方式</h1><h2 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ol><li><p>生命周期为关闭浏览器窗口</p><p>​    生命周期就是数据销毁的时间点<br>​    不关闭该页面  可以刷新  数据还在</p></li><li><p>在同一个窗口(页面)下数据可以共享</p></li><li><p>以键值对的形式存储使用</p></li><li><p>本页面下的任何地方都可以使用</p></li></ol><h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据:"></a>存储数据:</h3><blockquote><p>sessionStorage.setItem(key, value)</p></blockquote><p>key:<br>    自定义属性名 如uname    要用单引号包起来<br>value:<br>    实现将获得的值存入一个变量<br>这个key就是变量的名字<br>        <code>var val = input.value;</code></p><p>实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">set.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//当我们点击了之后, 就可以把表单里面的值存储起来</span></span><br><span class="line">    <span class="keyword">var</span> val = input.<span class="property">value</span>;</span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;uname&#x27;</span>, val)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以在f12 下的应用程序里面的存储    绘画存储里面查看</p><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据:"></a>获取数据:</h3><blockquote><p>sessionStorage.getItem(key)</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">get.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//当我们点击了之后, 就可以把表单里面的值获取过来</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&#x27;uname&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据:"></a>删除数据:</h3><blockquote><p>sessionStorage.removeItem(key)</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">remove.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//当我们点击了之后, 就可以把表单里面的值根据属性名删除相应的属性值</span></span><br><span class="line">    sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&#x27;uname&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="改数据-就是重新赋值"><a href="#改数据-就是重新赋值" class="headerlink" title="改数据  就是重新赋值"></a>改数据  就是重新赋值</h3><blockquote><p>用储存数据(<code>sessionStorage.setItem(key, value)</code>)的形式 重新给已设定的属性名赋值  达到覆盖之前的属性值的目的</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">set.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//当我们点击了之后, 就可以把表单里面的值存储起来</span></span><br><span class="line">    <span class="keyword">var</span> val = input.<span class="property">value</span>;</span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;uname&#x27;</span>, val);</span><br><span class="line">    sessionStorage.<span class="title function_">setItem</span>(<span class="string">&#x27;pwd&#x27;</span>, val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除所有数据"><a href="#删除所有数据" class="headerlink" title="删除所有数据:"></a>删除所有数据:</h3><blockquote><p>sessionStorage.clear()</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">del.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//当我们点击了之后,就可以把表单里面所有本地数据全部删除</span></span><br><span class="line">    sessionStorage.<span class="title function_">clear</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个意义: 括号内为空</p><h2 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ol><li><p>声明周期永久生效，除非手动删除 否则关闭页面也会存在</p></li><li><p><strong>可以多窗口（页面）共享（同一浏览器可以共享）</strong></p></li><li><p>以键值对的形式存储使用</p></li></ol><h3 id="存储数据-1"><a href="#存储数据-1" class="headerlink" title="存储数据:"></a>存储数据:</h3><blockquote><p>localStorage.setItem(key, value)</p></blockquote><h3 id="获取数据-1"><a href="#获取数据-1" class="headerlink" title="获取数据:"></a>获取数据:</h3><blockquote><p>localStorage.getItem(key)</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> set = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.set&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> get = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.get&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> remove = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.remove&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> del =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.del&#x27;</span>)</span><br><span class="line">    set.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//当我们点击了之后, 就可以把表单里面的值存储起来</span></span><br><span class="line">        <span class="keyword">var</span> val = input.<span class="property">value</span>;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;uname&#x27;</span>, val);</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;pwd&#x27;</span>, val);</span><br><span class="line">    &#125;)</span><br><span class="line">    get.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//当我们点击了之后, 就可以把表单里面的值获取过来</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;uname&#x27;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    remove.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//当我们点击了之后, 就可以把表单里面的值根据属性名删除相应的属性值</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;uname&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    del.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//当我们点击了之后,就可以把表单里面所有本地数据全部删除</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="删除数据-1"><a href="#删除数据-1" class="headerlink" title="删除数据:"></a>删除数据:</h3><blockquote><p>localStorage.removeItem(key)</p></blockquote><h3 id="移除所有数据"><a href="#移除所有数据" class="headerlink" title="移除所有数据"></a>移除所有数据</h3><blockquote><p>localStorage.removeItem(key)</p></blockquote><h1 id="案例-记住用户名"><a href="#案例-记住用户名" class="headerlink" title="案例:记住用户名"></a>案例:记住用户名</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>如果勾选记住用户名， 下次用户打开浏览器，就在文本框里面自动显示上次登录的用户名</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>① 把数据存起来，用到本地存储<br>② 关闭页面，也可以显示用户名，所以用到localStorage<br>③ 打开页面，先判断是否有这个用户名，如果有，就在表单里面显示用户名，并且勾选复选框<br>④ 当复选框发生改变的时候 change事件<br>⑤ 如果勾选，就存储，否则就移除</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;remember&quot;</span>&gt;</span> 记住用户名</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> username = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> remeber = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#remember&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>))&#123;</span></span><br><span class="line"><span class="language-javascript">            username.<span class="property">value</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            remember.<span class="property">checked</span> = <span class="string">&#x27;true&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        remember.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, username.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><div style="text-align:center">---完结撒花---</div>]]></content>
    
    
    <summary type="html">待补充的副标题</summary>
    
    
    
    <category term="JavaScript" scheme="http://l1562007999.github.io/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://l1562007999.github.io/tags/JS/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="本地存储" scheme="http://l1562007999.github.io/tags/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
    <category term="记住用户名" scheme="http://l1562007999.github.io/tags/%E8%AE%B0%E4%BD%8F%E7%94%A8%E6%88%B7%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>hexo 写文章创建文件自动打开编辑器</title>
    <link href="http://l1562007999.github.io/2022/04/08/hexo-%E5%86%99%E6%96%87%E7%AB%A0%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://l1562007999.github.io/2022/04/08/hexo-%E5%86%99%E6%96%87%E7%AB%A0%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2022-04-08T12:33:37.000Z</published>
    <updated>2022-04-08T13:53:05.491Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>Hexo</code>中新建一篇博文非常简单，只需要在命令行中键入以下命令然后回车即可：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;The title of your blog&quot;</span></span><br></pre></td></tr></table></figure><p>然后hexo就会在hexo的根目录下的<code>source</code>目录下的<code>_post</code>目录下自动创建相对应的md文件。然后我们只需要找到刚刚生成的文件进行编辑就可以了。</p><p>但是一旦文章比较多的情况下，我们就需要在成堆的md文件中找刚刚创建的博文，这就比较麻烦。</p><hr><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>新建<code>scripts</code>目录（hexo根目录）</li><li>创建<code>auto_open.js</code>文件,如下</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">exec</span>;</span><br><span class="line">hexo.<span class="title function_">on</span>(<span class="string">&#x27;new&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="title function_">spawn</span>(<span class="string">&#x27;start  &quot;C:\Program Files\Typora\Typora.exe&quot; &#x27;</span> + data.<span class="property">path</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>PS：上面自行替换为<code>markdown编辑器绝对路径.exe</code>,这里我使用的是<code>typora</code>的地址</p>]]></content>
    
    
    <summary type="html">创建博客 自动编辑器打开</summary>
    
    
    
    <category term="教程" scheme="http://l1562007999.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="http://l1562007999.github.io/tags/hexo/"/>
    
    <category term="博客维护" scheme="http://l1562007999.github.io/tags/%E5%8D%9A%E5%AE%A2%E7%BB%B4%E6%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>JS-移动端页面特效</title>
    <link href="http://l1562007999.github.io/2022/04/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%89%B9%E6%95%88/"/>
    <id>http://l1562007999.github.io/2022/04/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E7%89%B9%E6%95%88/</id>
    <published>2022-04-08T04:42:35.000Z</published>
    <updated>2022-04-09T04:34:27.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="触屏事件"><a href="#触屏事件" class="headerlink" title="触屏事件"></a>触屏事件</h1><p><strong>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android 和 IOS 都有。</strong></p><h2 id="触屏事件touch"><a href="#触屏事件touch" class="headerlink" title="触屏事件touch"></a>触屏事件touch</h2><p>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控<br>笔）对屏幕或者触控板操作。</p><h3 id="touchstart"><a href="#touchstart" class="headerlink" title="touchstart"></a>touchstart</h3><p>手指触摸到一个DOM元素时触发</p><h3 id="touchmove"><a href="#touchmove" class="headerlink" title="touchmove"></a>touchmove</h3><p>手指在一个DOM元素上滑动时触发</p><h3 id="touchend"><a href="#touchend" class="headerlink" title="touchend"></a>touchend</h3><p>手指从一个DOM元素上移开时触发</p><blockquote><p>实例</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我摸了你&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;   <span class="comment">//手指来回触摸事件</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我继续摸&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我走了&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="触摸事件对象TouchEvent"><a href="#触摸事件对象TouchEvent" class="headerlink" title="触摸事件对象TouchEvent"></a>触摸事件对象TouchEvent</h2><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p><h3 id="touches"><a href="#touches" class="headerlink" title="touches"></a>touches</h3><p>正在触摸屏幕的所有手指的一个列表</p><p>整个屏幕的手指状态</p><h3 id="targetTouches"><a href="#targetTouches" class="headerlink" title="targetTouches"></a>targetTouches</h3><p>正在触摸当前DOM元素上的手指的一个列表</p><p>当前元素上的手指状态</p><h3 id="changedTouches"><a href="#changedTouches" class="headerlink" title="changedTouches"></a>changedTouches</h3><p>手指状态发生了改变的列表, 从无到有, 从有到无</p><p>不会有touches和targetTouches的信息<br>会有手指离开的位置的信息</p><blockquote><p>实例</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;我摸了你&#x27;);</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">targetTouches</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// targetTouches[0] 就可以获得正在触摸DOM元素的第一个手指的相关信息 手指的坐标等等...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以获得很多关于这个手指的很多信息</p><p>clientX&#x2F;Y<br>    触摸点在可视区距离左上的坐标<br><strong><strong>pageX&#x2F;Y</strong><br>    触摸点在整个页面的距离左上的坐标</strong><br>screenX&#x2F;Y<br>    触摸点在整个屏幕的距离左上的坐标<br>target:div<br>    触摸点点击的当前元素的名字</p><h2 id="移动端拖动元素"><a href="#移动端拖动元素" class="headerlink" title="移动端拖动元素"></a>移动端拖动元素</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>touchstart、touchmove、touchend 可以实现拖动元素</li><li>但是拖动元素需要当前手指的坐标值 我们可以使用 targetTouches[0] 里面的pageX 和 pageY </li><li>移动端拖动的原理： 手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</li><li>手指移动的距离： 手指滑动中的位置 减去 手指刚开始触摸的位</li></ol><h3 id="拖动元素三部曲"><a href="#拖动元素三部曲" class="headerlink" title="拖动元素三部曲"></a>拖动元素三部曲</h3><p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置<br>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子<br>（3） 离开手指 touchend:</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault</p><h1 id="移动端常见特效"><a href="#移动端常见特效" class="headerlink" title="移动端常见特效"></a>移动端常见特效</h1><h2 id="移动端轮播图"><a href="#移动端轮播图" class="headerlink" title="移动端轮播图"></a>移动端轮播图</h2><h3 id="移动端轮播图功能和基本PC端一致。"><a href="#移动端轮播图功能和基本PC端一致。" class="headerlink" title="移动端轮播图功能和基本PC端一致。"></a>移动端轮播图功能和基本PC端一致。</h3><ol><li>可以自动播放图片</li><li>手指可以拖动播放轮播图</li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>① 自动播放功能<br>② 开启定时器<br>③ 移动端移动，可以使用translate 移动<br>④ 想要图片优雅的移动，请添加过渡效果</p><h3 id="无缝滚动"><a href="#无缝滚动" class="headerlink" title="无缝滚动"></a>无缝滚动</h3><p>② 注意，我们判断条件是要等到图片滚动完毕再去判断，就是过渡完成后判断<br>③ 此时需要添加检测过渡完成事件 transitionend<br>④ 判断条件： 如果索引号等于 3 说明走到最后一张图片，此时 索引号要复原为 0<br>⑤ 此时图片，去掉过渡效果，然后移动<br>⑥ 如果索引号小于0， 说明是倒着走， 索引号等于2<br>⑦ 此时图片，去掉过渡效果，然后移动</p><h3 id="小圆点跟随图片滚动特效"><a href="#小圆点跟随图片滚动特效" class="headerlink" title="小圆点跟随图片滚动特效"></a>小圆点跟随图片滚动特效</h3><h4 id="介绍classList属性"><a href="#介绍classList属性" class="headerlink" title="介绍classList属性"></a>介绍classList属性</h4><p>classList属性是HTML5新增的一个属性，返回元素的类名。但是ie10以上版本支持。</p><p>该属性用于在元素中添加，移除及切换 CSS 类。有以下方</p><blockquote><p>添加类</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="property">classList</span>.<span class="property">add</span>（’类名’）；</span><br><span class="line">focus.<span class="property">classList</span>.<span class="title function_">add</span>(‘current’);</span><br></pre></td></tr></table></figure><blockquote><p>移除类：</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="property">classList</span>.<span class="property">remove</span>（’类名’）;</span><br><span class="line">focus.<span class="property">classList</span>.<span class="title function_">remove</span>(‘current’);</span><br></pre></td></tr></table></figure><blockquote><p>切换类</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="property">classList</span>.<span class="property">toggle</span>（’类名’）；</span><br></pre></td></tr></table></figure><p>​        小实例</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.bg &#123;</span><br><span class="line">    background-color: black;</span><br><span class="line">&#125;</span><br><span class="line">var btn = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;, function()&#123;</span><br><span class="line">    document.body.classList.toggle(&#x27;bg&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><p>注意以上方法里面，所有类名都不带点</p><blockquote><p>区别</p></blockquote><p>className  是覆盖以前的类名</p><p>classList.add( )   是追加类名, 不会覆盖以前的类名</p><h3 id="小圆点跟随变化效果"><a href="#小圆点跟随变化效果" class="headerlink" title="小圆点跟随变化效果"></a>小圆点跟随变化效果</h3><p>② 把ol里面li带有current类名的选出来去掉类名 remove<br>③ 让当前索引号 的小li 加上 current add<br>④ 但是，是等着过渡结束之后变化，所以这个写到 transitionend 事件里</p><blockquote><p>代码</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//小圆点跟随变化效果</span></span><br><span class="line">ol.<span class="title function_">querySelector</span>(<span class="string">&#x27;li.current&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;current&#x27;</span>);</span><br><span class="line">ol.<span class="property">children</span>[index].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;current&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="手指滑动轮播图"><a href="#手指滑动轮播图" class="headerlink" title="手指滑动轮播图"></a>手指滑动轮播图</h3><p>② 本质就是ul跟随手指移动，简单说就是移动端拖动元素<br>③ 触摸元素 touchstart： 获取手指初始坐标<br>④ 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子<br>⑤ 离开手指 touchend: 根据滑动的距离分不同的情况<br>⑥ 如果移动距离小于 某个像素 就回弹原来位置<br>⑦ 如果移动距离大于某个像素就往下一张滑动。<br>⑧ 滑动也分为左滑动和右滑动 判断的标准是 移动距离正负 如果是负值就是左滑 反之右滑<br>⑨ 如果是左滑 就播放下一张 （index++）<br>⑩ 如果是右滑 就播放上一张 (index–)</p><h2 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>当页面滚动某个地方，就显示，否则隐藏<br>点击可以返回顶部</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>① 滚动某个地方显示<br>② 事件： scroll 页面滚动事件<br>③ 如果被卷去的头部（window.pageYOffset ）大于某个数值<br>④ 点击， window.scroll(0,0) 返回顶部</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回顶部模块</span></span><br><span class="line"><span class="keyword">var</span> goBack =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goBack&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> nav =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;nav&#x27;</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">pageYOffset</span>&gt;=nav.<span class="property">offsetTop</span>) &#123;</span><br><span class="line">        goBack.<span class="property">style</span>.<span class="property">display</span> =<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        goBack.<span class="property">style</span>.<span class="property">display</span> =<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">goBack.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scroll</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="click-延时解决方案"><a href="#click-延时解决方案" class="headerlink" title="click 延时解决方案"></a>click 延时解决方案</h2><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ol><li>禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉 300ms 的点击延迟。</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ol start="2"><li>利用touch事件自己封装这个事件解决 300ms 延迟。</li></ol><blockquote><p>原理</p></blockquote><ol><li>当我们手指触摸屏幕，记录当前触摸时间</li><li>当我们手指离开屏幕， 用离开的时间减去触摸的时间</li><li>如果时间小于150ms，并且没有滑动过屏幕， 那么我们就定义为点击动作</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装tap，解决click 300ms 延时</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tap</span> (obj, callback) &#123;</span><br><span class="line"> <span class="keyword">var</span> isMove = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">var</span> startTime = <span class="number">0</span>; <span class="comment">// 记录触摸时候的时间变量</span></span><br><span class="line"> obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line"> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>(); <span class="comment">// 记录触摸时间</span></span><br><span class="line"> &#125;);</span><br><span class="line"> obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line"> isMove = <span class="literal">true</span>; <span class="comment">// 看看是否有滑动，有滑动算拖拽，不算点击</span></span><br><span class="line"> &#125;);</span><br><span class="line"> obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (!isMove &amp;&amp; (<span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime) &lt; <span class="number">150</span>) &#123; <span class="comment">// 如果手指触摸和离开时间小于150ms 算点击</span></span><br><span class="line"> callback &amp;&amp; <span class="title function_">callback</span>(); <span class="comment">// 执行回调函数</span></span><br><span class="line"> &#125;</span><br><span class="line"> isMove = <span class="literal">false</span>; <span class="comment">// 取反 重置</span></span><br><span class="line"> startTime = <span class="number">0</span>;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用 </span></span><br><span class="line"> <span class="title function_">tap</span>(div, <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">// 执行代码 &#125;);     </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  goBack    function()  是  function()&#123;</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">scroll</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><ol start="3"><li>使用插件。 fastclick 插件解决 300ms 延迟。</li></ol><h1 id="移动端常用开发插件"><a href="#移动端常用开发插件" class="headerlink" title="移动端常用开发插件"></a>移动端常用开发插件</h1><h2 id="什么是插件"><a href="#什么是插件" class="headerlink" title="什么是插件"></a>什么是插件</h2><p>JS 插件是 js 文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。<br>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。<br>我们以前写的animate.js 也算一个最简单的插件</p><h2 id="fastclick-插件解决-300ms-延迟。"><a href="#fastclick-插件解决-300ms-延迟。" class="headerlink" title="fastclick 插件解决 300ms 延迟。"></a>fastclick 插件解决 300ms 延迟。</h2><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></p><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><ol><li>引入 js 插件文件。</li><li>按照规定语法使用。</li></ol><h2 id="Swiper轮播图插件的使用"><a href="#Swiper轮播图插件的使用" class="headerlink" title="Swiper轮播图插件的使用"></a>Swiper轮播图插件的使用</h2><p>中文官网地址： <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a> </p><h3 id="1-引入插件相关文件。"><a href="#1-引入插件相关文件。" class="headerlink" title="1. 引入插件相关文件。"></a>1. 引入插件相关文件。</h3><p>把min.css与min.js文件放到自己的对应目录下面</p><p>在index.html中 通过链接引入</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入我们的css初始化文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/normalize.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入我们首页的css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/index.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入swipercss文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/swiper.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入swiper js 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/swiper.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入我们自己的js文件  我们自己写的js依赖上面的swiper  所以要写在下面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-按照规定语法使用"><a href="#2-按照规定语法使用" class="headerlink" title="2. 按照规定语法使用"></a>2. 按照规定语法使用</h3><h4 id="选择swiper的选中样式html的源代码"><a href="#选择swiper的选中样式html的源代码" class="headerlink" title="选择swiper的选中样式html的源代码"></a>选择swiper的选中样式html的源代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Swiper --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span>Slide 10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Add Pagination --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 说明</p></blockquote><ul><li>放入原本轮播图的一个图片的位置  替换这个原本的图片</li><li>注意不要更改里面的结构和类名</li><li>换图片就是Slide 1   Slide2…  换成img标签</li></ul><h4 id="把源代码中css相关样式部分插入到我们css中slide附近"><a href="#把源代码中css相关样式部分插入到我们css中slide附近" class="headerlink" title="把源代码中css相关样式部分插入到我们css中slide附近"></a>把源代码中css相关样式部分插入到我们css中slide附近</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="property">swiper</span>-container &#123;</span><br><span class="line">     <span class="attr">width</span>: <span class="number">100</span>%;</span><br><span class="line">     <span class="attr">height</span>: <span class="number">100</span>%;</span><br><span class="line">   &#125;</span><br><span class="line">   .<span class="property">swiper</span>-slide &#123;</span><br><span class="line">     text-<span class="attr">align</span>: center;</span><br><span class="line">     font-<span class="attr">size</span>: 18px;</span><br><span class="line">     <span class="attr">background</span>: #fff;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/* Center slide text vertically */</span></span><br><span class="line">     <span class="attr">display</span>: -webkit-box;</span><br><span class="line">     <span class="attr">display</span>: -ms-flexbox;</span><br><span class="line">     <span class="attr">display</span>: -webkit-flex;</span><br><span class="line">     <span class="attr">display</span>: flex;</span><br><span class="line">     -webkit-box-<span class="attr">pack</span>: center;</span><br><span class="line">     -ms-flex-<span class="attr">pack</span>: center;</span><br><span class="line">     -webkit-justify-<span class="attr">content</span>: center;</span><br><span class="line">     justify-<span class="attr">content</span>: center;</span><br><span class="line">     -webkit-box-<span class="attr">align</span>: center;</span><br><span class="line">     -ms-flex-<span class="attr">align</span>: center;</span><br><span class="line">     -webkit-align-<span class="attr">items</span>: center;</span><br><span class="line">     align-<span class="attr">items</span>: center;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="源代码中js部分-放入到我们自己写的index-js中"><a href="#源代码中js部分-放入到我们自己写的index-js中" class="headerlink" title="源代码中js部分 放入到我们自己写的index.js中"></a>源代码中js部分 放入到我们自己写的index.js中</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  &lt;!-- <span class="title class_">Initialize</span> <span class="title class_">Swiper</span> --&gt;</span><br><span class="line">    <span class="keyword">var</span> swiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">pagination</span>: &#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="自定义修改某些参数"><a href="#自定义修改某些参数" class="headerlink" title="自定义修改某些参数"></a>自定义修改某些参数</h4><p>修改小圆点的颜色</p><ul><li><p>f12 点击小圆点 选到出现的类名</p></li><li><p>将类名复制到css 中  修改属性值  </p></li><li><p>可能层级不够 属性值后面加入!important</p></li></ul><h2 id="其他移动端常见插件"><a href="#其他移动端常见插件" class="headerlink" title="其他移动端常见插件"></a>其他移动端常见插件</h2><p>superslide： <a href="http://www.superslide2.com/">http://www.superslide2.com/</a><br>iscroll： <a href="https://github.com/cubiq/iscr">https://github.com/cubiq/iscr</a></p><h2 id="插件的使用总结"><a href="#插件的使用总结" class="headerlink" title="插件的使用总结"></a>插件的使用总结</h2><ol><li>确认插件实现的功能</li><li>去官网查看使用说明</li><li>打开demo实例文件，查看需要引入的相关文件，并且引入</li><li>复制demo实例文件中的结构html，样式css以及js代码</li></ol><h2 id="练习—移动端视频插件-zy-media-j"><a href="#练习—移动端视频插件-zy-media-j" class="headerlink" title="练习—移动端视频插件 zy.media.j"></a>练习—移动端视频插件 zy.media.j</h2><p>H5 给我们提供了 video 标签，但是浏览器的支持情况不同。<br>不同的视频格式文件，我们可以通过source 解决。<br>但是外观样式，还有暂停，播放，全屏等功能我们只能自己写代码解决。<br>这个时候我们可以使用插件方式来制作。</p><blockquote><p> 原生的写法:<code> &lt;video src=&quot;mov.mp4&quot; controls&gt;&lt;/video&gt;</code></p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><blockquote><p> 将css和js文件放到我们自己的文件夹下</p></blockquote><blockquote><p>在index.html中引入插件文件.css和.js<br>注意引入顺序</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;<span class="title class_">Document</span>&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;zy.media.min.css&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;zy.media.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>复制源代码中style</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;zy.media.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">       <span class="selector-id">#modelView</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">background-color</span>: <span class="number">#DDDDDD</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">z-index</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">       </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">       <span class="selector-class">.playvideo</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">padding-top</span>: auto;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">width</span>: <span class="number">300px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">height</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">       </span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">       <span class="selector-class">.zy_media</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">           <span class="attribute">z-index</span>: <span class="number">999999999</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>在body中引入相关html代码</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;playvideo&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zy_media&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">video</span> <span class="attr">data-config</span>=<span class="string">&#x27;&#123;&quot;mediaTitle&quot;: &quot;测试视频--视频&quot;&#125;&#x27;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;你的视频路径.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">       您的浏览器不支持HTML5视频</span><br><span class="line">   <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;modelView&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>引入相关js代码</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="title function_">zymedia</span>(<span class="string">&#x27;video&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">autoplay</span>: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="移动端常用开发框架"><a href="#移动端常用开发框架" class="headerlink" title="移动端常用开发框架"></a>移动端常用开发框架</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol><li><p>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p></li><li><p>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p></li><li><p>前端常用的框架有 Bootstrap、Vue、Angular、React 等。既能开发PC端，也能开发移动端</p></li><li><p>前端常用的移动端插件有 swiper、superslide、iscroll等</p></li><li><p>框架与插件</p></li><li><p>框架： 大而全，一整套解决方案</p></li><li><p>插件： 小而专一，某个功能的解决方案</p></li></ol><h2 id="Bootstrap轮播图效果"><a href="#Bootstrap轮播图效果" class="headerlink" title="Bootstrap轮播图效果"></a>Bootstrap轮播图效果</h2><p>Bootstrap 是一个简洁、直观、强悍的前端开发框架，它让 web 开发更迅速、简单。</p><p>它能开发PC端，也能开发移动端</p><h3 id="Bootstrap-JS插件使用步骤"><a href="#Bootstrap-JS插件使用步骤" class="headerlink" title="Bootstrap JS插件使用步骤"></a>Bootstrap JS插件使用步骤</h3><h4 id="1-引入相关js-文件"><a href="#1-引入相关js-文件" class="headerlink" title="1. 引入相关js 文件"></a>1. 引入相关js 文件</h4><p>下载bootstrap之后有css&#x2F;fonts&#x2F;js整个文件夹放入根目录</p><p>在index.html引入jquery文件<br>bootstrap.js<br>css文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bootstrap/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap/js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-复制HTML-结构"><a href="#2-复制HTML-结构" class="headerlink" title="2. 复制HTML 结构"></a>2. 复制HTML 结构</h4><blockquote><p>在 div.focus中加入</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;carousel-example-generic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel slide&quot;</span> <span class="attr">data-ride</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;carousel-indicators&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-inner&quot;</span> <span class="attr">role</span>=<span class="string">&quot;listbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Controls --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;left carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;prev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-left&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;right carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-right&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>这个代码可以在bootstrap :   <a href="https://v3.bootcss.com/javascript/#carousel">https://v3.bootcss.com/javascript/#carousel</a>   找到</p><h4 id="3-修改对应样式"><a href="#3-修改对应样式" class="headerlink" title="3. 修改对应样式"></a>3. 修改对应样式</h4><p>style里面</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.carousel</span>,<span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需修改图片的长度与宽度</p><h4 id="4-修改相应JS-参数"><a href="#4-修改相应JS-参数" class="headerlink" title="4. 修改相应JS 参数"></a>4. 修改相应JS 参数</h4><p>修改图片播放间隔    (写在&#x2F;body上面  script里面)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.carousel&#x27;</span>).<span class="title function_">carousel</span>(&#123;</span><br><span class="line">  <span class="attr">interval</span>: <span class="number">2000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="阿里百秀轮播图应用"><a href="#阿里百秀轮播图应用" class="headerlink" title="阿里百秀轮播图应用"></a>阿里百秀轮播图应用</h2><h4 id="文件引入"><a href="#文件引入" class="headerlink" title="文件引入"></a>文件引入</h4><p>注意顺序</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入bootstrap 样式文件 --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;bootstrap/css/bootstrap.min.css&quot;&gt;</span><br><span class="line">&lt;!-- 引入我们自己的首页样式文件 --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css/index.css&quot;&gt;</span><br><span class="line">&lt;!-- 先引入jquery js文件 --&gt;</span><br><span class="line">&lt;script src=&quot;bootstrap/js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;bootstrap/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="第一个小li里面仿轮播图"><a href="#第一个小li里面仿轮播图" class="headerlink" title="第一个小li里面仿轮播图"></a>第一个小li里面仿轮播图</h3><p>把里面a全部扔掉 插入下面的代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;carousel-example-generic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;carousel slide&quot;</span> <span class="attr">data-ride</span>=<span class="string">&quot;carousel&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;carousel-indicators&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">data-slide-to</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-inner&quot;</span> <span class="attr">role</span>=<span class="string">&quot;listbox&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;carousel-caption&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Controls --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;left carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;prev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-left&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;right carousel-control&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#carousel-example-generic&quot;</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">data-slide</span>=<span class="string">&quot;next&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-right&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;sr-only&quot;</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="根据第一个li-的父元素的高度与宽度-在对应的css后面加上自定义的bootstrap的样式"><a href="#根据第一个li-的父元素的高度与宽度-在对应的css后面加上自定义的bootstrap的样式" class="headerlink" title="根据第一个li 的父元素的高度与宽度  在对应的css后面加上自定义的bootstrap的样式"></a>根据第一个li 的父元素的高度与宽度  在对应的css后面加上自定义的bootstrap的样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">266px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.carousel</span>,</span><br><span class="line"><span class="selector-class">.carousel</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">266px</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="li的子代a-影响了bootstrap里面的a-所以"><a href="#li的子代a-影响了bootstrap里面的a-所以" class="headerlink" title="li的子代a 影响了bootstrap里面的a  所以"></a>li的子代a 影响了bootstrap里面的a  所以</h3><p>原本的.news li a 改为.new li &gt;a </p><p>让我们自己写的a 只限定在自带选择器上  不深入到bootstrp的结构里面, 影响bootstrap里面的a</p><p>让我们自己写的a 只限定在自带选择器上  不深入到bootstrp的结构里面, 影响bootstrap里面的a</p><p>这里的&gt;  是自带选择器的意思 只选择亲儿子  不选择孙子后代….</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span>&gt;<span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="每个轮播图里面的标题的样式修改"><a href="#每个轮播图里面的标题的样式修改" class="headerlink" title="每个轮播图里面的标题的样式修改"></a>每个轮播图里面的标题的样式修改</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.carousel-caption</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">41px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span><span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span><span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.news</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-class">.carousel-caption</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">41px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在轮播图html代码后面加上js代码"><a href="#在轮播图html代码后面加上js代码" class="headerlink" title="在轮播图html代码后面加上js代码"></a>在轮播图html代码后面加上js代码</h3><p>调节滚动间隔事件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.carousel&#x27;</span>).<span class="title function_">carousel</span>(&#123;</span><br><span class="line">  <span class="attr">interval</span>: <span class="number">2000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div style="text-align:center">---完结撒花---</div><hr>]]></content>
    
    
    <summary type="html">触屏事件, 移动端轮播图 返回顶部 轮播图插件 Bootstrap轮播图..</summary>
    
    
    
    <category term="JavaScript" scheme="http://l1562007999.github.io/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://l1562007999.github.io/tags/JS/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="移动端特效" scheme="http://l1562007999.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>余音绕梁的故事---The lingering tune</title>
    <link href="http://l1562007999.github.io/2022/04/06/%E4%BD%99%E9%9F%B3%E7%BB%95%E6%A2%81%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://l1562007999.github.io/2022/04/06/%E4%BD%99%E9%9F%B3%E7%BB%95%E6%A2%81%E7%9A%84%E6%95%85%E4%BA%8B/</id>
    <published>2022-04-06T11:35:56.000Z</published>
    <updated>2022-04-09T04:44:52.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-lingering-tune—余音绕梁"><a href="#The-lingering-tune—余音绕梁" class="headerlink" title="The lingering tune—余音绕梁"></a>The lingering tune—余音绕梁</h1><p>我国古时有一位善歌者韩娥，韩国人。一次她经过齐国，因路费用尽，便在齐国都城的雍门卖唱筹集资金。韩娥声音清脆嘹亮，婉转悠扬，十分动人。这次演唱，轰动全城。唱完之后，听众还聚在雍门，徘徊留恋，久久不肯散去。有人便到旅店去找韩娥，请她再来演唱。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180625/73cf1b56f5db4cf8840874ba7e1ca02b.jpeg" alt="img"></p><p>可是旅店老板却对韩娥很不礼貌，韩娥忍不住放声大哭，哭声悲伤凄楚，附近居民，都被感动得流下泪来。由于韩娥的歌声婉转动听，唱完之后两三天，似乎还有遗留的歌声，在屋梁间缭绕飘荡，一连三天，大家都难过得吃不下饭。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180625/9642fe8034b344be83d5f8ad80197688.jpeg" alt="img"></p><p>当人们听说韩娥已经出城离去时，派人立刻去追，苦苦挽留。韩娥不好拒绝百姓的要求，便回来为大家继续演唱了一次。听众很高兴，几天来的悲伤情绪一扫而空。《列子·汤问》在描写这一情节时说“余音绕梁，三日不绝”。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180625/4f012fe1617b4d2db9bdc7dce0fc7f4f.jpeg" alt="img"></p><p>从此，人们称赞歌声或音乐的美妙，余音不绝，就常用“余音绕梁”来比喻。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;The-lingering-tune—余音绕梁&quot;&gt;&lt;a href=&quot;#The-lingering-tune—余音绕梁&quot; class=&quot;headerlink&quot; title=&quot;The lingering tune—余音绕梁&quot;&gt;&lt;/a&gt;The lingering tun</summary>
      
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="有趣的故事" scheme="http://l1562007999.github.io/tags/%E6%9C%89%E8%B6%A3%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Why do we feel nostalgia</title>
    <link href="http://l1562007999.github.io/2022/04/05/Why-do-we-feel-nostalgia/"/>
    <id>http://l1562007999.github.io/2022/04/05/Why-do-we-feel-nostalgia/</id>
    <published>2022-04-05T08:31:47.000Z</published>
    <updated>2022-04-09T04:48:58.704Z</updated>
    
    <content type="html"><![CDATA[<div style="text-align:center;font-size:18px;color:black;font-weight:800">为什么我们会怀念过去</div><div style="max-width:854px"><div style="position:relative;height:0;padding-bottom:56.25%"><iframe src="https://embed.ted.com/talks/lang/en/clay_routledge_why_do_we_feel_nostalgia" width="854" height="480" style="position:absolute;left:0;top:0;width:100%;height:100%" frameborder="0" scrolling="no" allowfullscreen></iframe></div></div> <p>In the late 17th century, a <mark>medical student</mark> named Johannes Hofer noticed a strange illness affecting Swiss mercenaries serving abroad. </p><p>在17世纪末， 一个叫做约翰内斯·霍弗的<mark>医科学生</mark> 注意到了一种奇怪的疾病 （这种疾病）侵袭着在国外工作的瑞士雇佣兵</p><p>Its symptoms, including fatigue, <mark>insomnia</mark>, irregular heartbeat, indigestion, and fever were so strong, the soldiers often had to be <mark>discharged</mark>. </p><p>这种病的发病症状， 包括疲劳、 <mark>失眠</mark>、 不规律的心脏跳动、 消化不良、 以及发高烧， 这些士兵通常不得不<mark>退伍</mark>。</p><p>As Hofer discovered, the cause was not some physical disturbance, but an intense <mark>yearning for</mark> their mountain homeland. </p><p>霍弗发现，他们的病因并非躯体障碍， 而是一种对他们故土的强烈思慕之情。</p><p>He<mark> dubbed</mark> the <u>condition</u> nostalgia, from the Greek “nostos” for homecoming and “algos” for pain or longing. </p><p>他把这种<u>病情</u><mark>称为</mark>思乡病， （这个词）的回家之意 取自希腊语“nostos”， 痛苦和渴望之意取自词语“algos”。</p><p>At first, nostalgia was considered a particularly Swiss <mark>affliction</mark>.</p><p>起初，思乡病被认作是一种只发生在瑞士的<mark>疾病</mark></p><p>Some doctors proposed that the constant sound of cowbells in the <mark>Alps</mark> caused trauma to the ear drums and brain. </p><p>一些医生提出是<mark>阿尔卑斯山</mark>中连续不断的牛铃声 导致了鼓膜和脑部的创伤。</p><p>Commanders even forbade their soldiers from singing traditional Swiss songs for fear that they’d lead to <mark>desertion</mark> or suicide. </p><p>司令们甚至禁止他们的士兵唱传统瑞士歌曲 以防他们指引士兵<mark>擅离军队</mark>或者自杀。</p><p>But as migration increased worldwide, nostalgia was observed in various groups.<br>但是随着移民的全球化，人们注意到 思乡病出现在许多群体中。</p><p>It turned out that anyone separated from their native place for a long time was vulnerable to nostalgia. </p><p>原来，任何离开故土很久的人 都容易患上思乡病。</p><p>And by the early 20th century, professionals no longer viewed it as a neurological disease, but as <mark>a mental condition</mark> similar to depression. </p><p>可是到了20世纪前期， 专家们已不再将它看作一种神经疾病了， 而看作是一种类似于抑郁症的<mark>心理疾病</mark>。</p><p>Psychologists of the time speculated that it represented difficulties letting go of childhood, or even a longing to return to one’s fetal state. </p><p>当时的心理学家推测 它反映了忘掉儿童时代有多困难， 或说甚至是一种对回到某人婴儿时期的渴望。</p><p>But over the next few decades, the understanding of nostalgia changed in two important ways. </p><p>但是在接下来的几十年中， 对思乡病的认知在两个重要的方面发生了变化。</p><p>Its meaning expanded from indicating homesickness to a general longing for the past.</p><p>它的含义从表明思乡之情扩展为 一种对过去的普遍向往。</p><p>And rather than an awful disease, it began to be seen as a <mark>poignant</mark> and pleasant experience. </p><p>而且并非一种令人厌恶的疾病， 它开始被看作是一次<mark>心酸</mark>而又愉快的体验。</p><p>Perhaps the most famous example of this was captured by French author Marcel Proust. </p><p>或许与此有关的出名的实例 要数法国作家马塞尔·普鲁斯特为最了。</p><p>He described how tasting a madeleine cake he had not eaten since childhood triggered a cascade of warm and powerful sensory associations. </p><p>他描述了品尝一块儿自小时候起 再没吃过的玛德琳蛋糕 是怎样触发了他温暖而强烈的感官联想。</p><p>So what caused such a major reversal in our view of nostalgia? </p><p>因此，造成我们对怀旧情结的看法 改变如此之大的原因是什么？</p><p>Part of it has to do with science. </p><p>科技肯定与此有关。</p><p>Psychology shifted away from pure theory and towards more careful and systematic <mark>empirical observation</mark>.</p><p>心理学由纯理论转变为 更谨慎系统的<mark>观察实践</mark>。</p><p>So professionals realized that many of the negative symptoms may have been simply correlated with nostalgia rather than caused by it. </p><p>因此专家们发现很多负面症状可能仅仅是与思乡病有关 可能仅仅是与怀旧情结有关 而非由它引起。</p><p>And, in fact, despite being a complex emotional state that can include feelings of loss and sadness, nostalgia doesn’t generally put people in a negative mood. </p><p>实际上，除了在处于复杂的情感状态时 一个包含着失落与伤心的状态 怀旧情结并不总是使人沉浸在消极情绪中。</p><p>Instead, by allowing individuals to remember personally meaningful and rewarding experiences they shared with others, nostalgia can <mark>boost</mark> psychological well-being. </p><p>恰恰相反，若是允许个体记下就他们个人而言 那些与他人一起的意义非凡而又有益的经历， 那么怀旧情结<mark>有利于</mark>心理健康。</p><p>Studies have shown that inducing nostalgia in people can help increase their feelings of self-esteem and social belonging, encourage psychological growth, and even make them <mark>act more charitably</mark>. </p><p>研究发现引起人们的怀旧情结 有助于提高他们的自尊心和社会归属感， 激励心理成长， 甚至使他们<mark>变得更加仁爱</mark>。</p><p>So rather than being a cause of mental distress, nostalgia can be a restorative way of coping with it. </p><p>因此，并非一个心理痛苦的诱因， 怀旧情结可以是一个帮助恢复的应对办法。</p><p>For instance, when people experience negative emotional states, they tend to naturally use nostalgia to reduce <mark>distress</mark> and restore well-being. </p><p>例如，当人们陷于消极的情绪状态时， 他们倾向于自然而然地回想过去，借此减轻<mark>痛苦</mark> 并恢复健康。</p><p>Today, it seems that nostalgia is everywhere, partially because advertisers have discovered how powerful it is as a <mark>marketing technique</mark>. </p><p>如今，怀旧情结似乎随处可见， 部分原因是广告商发现了它的影响力之大 当它作为一个<mark>市场营销</mark>手段时。</p><p>It’s tempting to think of this as a sign of us <u>being stuck in the past</u>, but that’s not really how nostalgia works. </p><p>人们很容易将怀旧情结看作 一个昭示着我们<u>沉湎过去</u>的信号， 但那并不真的是它的用途。</p><p>Instead, nostalgia helps us remember that our lives can have meaning and value, helping us find the confidence and motivation to face the challenges of the future.</p><p>取而代之的是，怀旧情结帮助我们牢记 我们的生命可以是有意义与价值的， 帮助我们找到信心、寻得动力 来面对未来的挑战。</p>]]></content>
    
    
    <summary type="html">为什么我们会怀念过去</summary>
    
    
    
    <category term="英语学习" scheme="http://l1562007999.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="英语" scheme="http://l1562007999.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="TED-ED" scheme="http://l1562007999.github.io/tags/TED-ED/"/>
    
  </entry>
  
  <entry>
    <title>JS-PC端网页特效</title>
    <link href="http://l1562007999.github.io/2022/04/04/JS-PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/"/>
    <id>http://l1562007999.github.io/2022/04/04/JS-PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/</id>
    <published>2022-04-04T09:03:07.000Z</published>
    <updated>2022-04-07T08:32:41.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元素偏移量offset系列"><a href="#元素偏移量offset系列" class="headerlink" title="元素偏移量offset系列"></a>元素偏移量offset系列</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li><p>offset 翻译过来就是偏移量， 我们使用 offset 系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p></li><li><p>获得元素距离带有定位父元素的位置</p></li><li><p>获得元素自身的大小（宽度高度）</p></li><li><p>注意： 返回的数值都不带单位</p></li></ol><h2 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h2><h3 id="element-offset"><a href="#element-offset" class="headerlink" title="element.offset"></a>element.offset</h3><h4 id="Parent"><a href="#Parent" class="headerlink" title="Parent"></a>Parent</h4><p><strong>返回</strong>作为该元素带有定位的<strong>父级元素</strong>, 如果父级都没有定位,则返回body</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">offsetParent</span>); <span class="comment">//div father // </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">parentNode</span>);  <span class="comment">//返回父亲 是最近一级的父亲 亲爸爸  不管父亲有没有定位</span></span><br></pre></td></tr></table></figure><h4 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h4><p><strong>返回</strong>元素相对带有定位父元素上方的<strong>偏移</strong></p><h4 id="Left"><a href="#Left" class="headerlink" title="Left"></a>Left</h4><p><strong>返回</strong>元素相对带有定位父元素左边框的<strong>偏移</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> son =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span><br><span class="line">    <span class="comment">// 可以得到元素的偏移位置 返回不带单位的数值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">offsetTop</span>); <span class="comment">//150</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(father.<span class="property">offsetLeft</span>); <span class="comment">//150</span></span><br><span class="line">    <span class="comment">//它以带有定位的父亲为准  如果没有父亲或者父亲没有定位 则以 body为准</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">offsetLeft</span>);  <span class="comment">// 45</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="Width"><a href="#Width" class="headerlink" title="Width"></a>Width</h4><p>返回<strong>自身</strong>包括paddind,边框,内容区<strong>的宽度</strong>, 返回值不带单位</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">offsetWidth</span>);  <span class="comment">//动态获取宽度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w.<span class="property">offsetHeight</span>);  <span class="comment">//动态获取高度</span></span><br></pre></td></tr></table></figure><h4 id="Height"><a href="#Height" class="headerlink" title="Height"></a>Height</h4><p>返回<strong>自身</strong>包括padding, 边框, 内容区的<strong>高度</strong>, 返回数值不带单位</p><h3 id="offset与style的区别"><a href="#offset与style的区别" class="headerlink" title="offset与style的区别"></a>offset与style的区别</h3><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><ol><li><p>offset 可以得到任意样式表中的样式值</p></li><li><p>offset 系列获得的数值是没有单位的</p></li><li><p>offsetWidth 包含padding+border+width</p></li><li><p>offsetWidth 等属性是只读属性，只能获取不能赋值</p></li><li><p><strong>所以，我们想要获取元素大小位置，用offset更合适</strong></p></li></ol><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><ol><li>style 只能得到行内样式表中的样式值</li><li>style.width 获得的是带有单位的字符串</li><li>style.width 获得不包含padding和border 的值</li><li>style.width 是可读写属性，可以获取也可以赋值</li><li>所以，我们想要给元素更改值，则需要用style改变</li></ol><h2 id="案例-获取鼠标在盒子内的坐标"><a href="#案例-获取鼠标在盒子内的坐标" class="headerlink" title="案例:获取鼠标在盒子内的坐标"></a>案例:获取鼠标在盒子内的坐标</h2><blockquote><p>分析</p></blockquote><p>我们在盒子内点击，想要得到鼠标距离盒子左右的距离。<br>② 首先得到鼠标在页面中的坐标（e.pageX, e.pageY）<br>③ 其次得到盒子在页面中的距离 ( box.offsetLeft, box.offsetTop)<br>④ 用鼠标距离页面的坐标减去盒子在页面中的距离，得到 鼠标在盒子内的坐标<br>⑤ 如果想要移动一下鼠标，就要获取最新的坐标，使用鼠标移动事件 mousemove</p><h2 id="案例-模态框拖拽"><a href="#案例-模态框拖拽" class="headerlink" title="案例:模态框拖拽"></a>案例:模态框拖拽</h2><p>弹出框，我们也称为模态框。</p><blockquote><p>要求</p></blockquote><ol><li>点击弹出层， 会弹出模态框， 并且显示灰色半透明的遮挡层。</li><li>点击关闭按钮，可以关闭模态框，并且同时关闭灰色半透明遮挡层。</li><li>鼠标放到模态框最上面一行，可以按住鼠标拖拽模态框在页面中移动。</li><li>鼠标松开，可以停止拖动模态框移动。</li></ol><blockquote><p>分析</p></blockquote><p>① 点击弹出层， 模态框和遮挡层就会显示出来 display:block;<br>② 点击关闭按钮，模态框和遮挡层就会隐藏起来 display:none;<br>③ 在页面中拖拽的原理： 鼠标按下并且移动， 之后松开鼠标<br>④ 触发事件是鼠标按下 mousedown， 鼠标移动mousemove 鼠标松开 mouseup<br>⑤ 拖拽过程: 鼠标移动过程中，获得最新的值赋值给模态框的left和top值， 这样模态框可以跟着鼠标走了<br>⑥ 鼠标按下触发的事件源是 最上面一行，就是 id 为 title<br>⑦ 鼠标的页面坐标 减去 鼠标在盒子内的坐标， 才是模态框真正的位置。<br>⑧ 鼠标按下，我们要得到鼠标在盒子内的坐标。<br>⑨ 鼠标移动，就让模态框的坐标 设置为 ： 鼠标页面坐标 减去鼠标在盒子内的坐标即可，注意移动事件写到按下事件里面。<br>⑩ 鼠标松开，就停止拖拽，就是可以让鼠标移动事件解除</p><h2 id="仿京东商品放大镜效果"><a href="#仿京东商品放大镜效果" class="headerlink" title="仿京东商品放大镜效果"></a>仿京东商品放大镜效果</h2><blockquote><p>分析</p></blockquote><ol><li></li></ol><p>① 整个案例可以分为三个功能模块<br>② 鼠标经过小图片盒子， 黄色的遮挡层 和 大图片盒子显示，离开隐藏2个盒子功能<br>③ 黄色的遮挡层跟随鼠标功能。<br>④ 移动黄色遮挡层，大图片跟随移动功能。</p><ol start="2"><li></li></ol><p>① 鼠标经过小图片盒子， 黄色的遮挡层 和 大图片盒子显示，离开隐藏2个盒子功能<br>② 就是显示与隐藏</p><ol start="3"><li></li></ol><p>① 黄色的遮挡层跟随鼠标功能。<br>② 把鼠标坐标给遮挡层不合适。因为遮挡层坐标以父盒子为准。<br>③ 首先是获得鼠标在盒子的坐标。<br>④ 之后把数值给遮挡层做为left 和top值。<br>⑤ 此时用到鼠标移动事件，但是还是在小图片盒子内移动。<br>⑥ 发现，遮挡层位置不对，需要再减去盒子自身高度和宽度的一半。<br>⑦ 遮挡层不能超出小图片盒子范围。<br>⑧ 如果小于零，就把坐标设置为0<br>⑨ 如果大于遮挡层最大的移动距离，就把坐标设置为最大的移动距离<br>⑩ 遮挡层的最大移动距离： 小图片盒子宽度 减去 遮挡层盒子宽度</p><ol start="4"><li></li></ol><p>① 移动黄色遮挡层，大图片跟随移动<br>① 移动黄色遮挡层，大图片跟随移动功能。<br>② 求大图片的移动距离公<br>大图片移动距离  &#x3D;  遮挡层移动距离*大图片最大移动距离&#x2F;遮挡层最大移动距离</p><h1 id="元素可视区client系列"><a href="#元素可视区client系列" class="headerlink" title="元素可视区client系列"></a>元素可视区client系列</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>client 翻译过来就是客户端，我们使用 client 系列的相关属性来获取元素可视区的相关信息。通过 client 系列的相关属性可以动态的得到该元素的边框大小、元素大小等</p><h2 id="常见属性-element-client"><a href="#常见属性-element-client" class="headerlink" title="常见属性: element.client"></a>常见属性: element.client</h2><ol><li><p>element.clientTop</p><p>返回元素上边框的大小</p></li><li><p>element.clientLeft</p><p>返回元素左边框的大小</p></li><li><p>element.clientWidth</p><p>返回自身padding加上内容区的宽度,不含边框, 返回数值不带单位</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div= <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//client 宽度 和我们offsetWidth最大的区别就是 不包含边框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">clientWidth</span>); <span class="comment">// 200  不包含边框 包含padding</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>element.clientHeight</p><p>返回自身padding 加上内容区的高度,不含边框, 返回数值不带单位</p></li></ol><h2 id="案例-淘宝flexible-js源码分析"><a href="#案例-淘宝flexible-js源码分析" class="headerlink" title="案例:淘宝flexible.js源码分析"></a>案例:淘宝flexible.js源码分析</h2><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><p>不需要调用，立马能够自己执行的函数<br>主要作用:创建一个独立的作用域   避免了命名冲突问题</p><blockquote><p>有两种写法  第二个小括号可以看做是调用函数</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 两个小括号  一个括号内写函数, 一个内不屑</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="string">&#x27;形参1&#x27;</span>,<span class="string">&#x27;形参2&#x27;</span></span>)&#123;&#125;)       (参数<span class="number">1</span>,参数<span class="number">2.</span>..)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个小括号呢内 写一个函数   再写一个小括号</span></span><br><span class="line"> ( <span class="keyword">function</span>(<span class="params"><span class="string">&#x27;形参1&#x27;</span>,<span class="string">&#x27;形参2&#x27;</span></span>)&#123;&#125;   (参数<span class="number">1</span>,参数<span class="number">2.</span>..)    )</span><br></pre></td></tr></table></figure><blockquote><p>代码</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.立即执行函数: 不需要调用，立马能够自己执行的函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">    <span class="comment">// 2. 写法 也可以传递参数进来</span></span><br><span class="line">    <span class="comment">// 1.(function() &#123;&#125;)()    或者  2. (function()&#123;&#125;());</span></span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b); <span class="comment">//3</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    &#125;)(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 第二个小括号可以看做是调用函数   有多个立即执行函数 要用分号隔开</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    (<span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b); <span class="comment">//5</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">// 局部变量</span></span><br><span class="line">    &#125;(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="comment">// 3. 立即执行函数最大的作用就是 独立创建了一个作用域, 里面所有的变量都是局部变量 不会有命名冲突的情况</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p> <strong>立即执行函数最大的作用就是 独立创建了一个作用域, 里面所有的变量都是局部变量 不会有命名冲突的情况</strong></p><blockquote><p>注意</p></blockquote><p>下面三种情况都会刷新页面都会触发 load 事件。</p><ol><li><p>a标签的超链接</p></li><li><p>F5或者刷新按钮（强制刷新）</p></li><li><p>前进后退按钮</p></li><li><p>但是 火狐中，有个特点，有个“往返缓存”，这个缓存中不仅保存着页面数据，还保存了DOM和JavaScript的状态；实际上是将整个页面都保存在了内存里。<br>  所以此时后退按钮不能刷新页面。此时可以使用 pageshow事件来触发。</p></li></ol><p>  这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面中，pageshow会在load事件触发后触发；根据事件对象中的persisted来判断是否是缓存中的页面触发的pageshow事件，注意这个事件给window添加。</p><p><code>window.pageshow</code></p><h1 id="元素滚动scroll系列"><a href="#元素滚动scroll系列" class="headerlink" title="元素滚动scroll系列"></a>元素滚动scroll系列</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol><li><p>element.scrollTop</p><p>被卷去的上侧距离, 返回数值不带单位</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// scroll 系列</span></span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollHeight</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">clientHeight</span>);</span><br><span class="line">    <span class="comment">// scroll滚动事件当我们滚动条发生变化会触发的事件</span></span><br><span class="line">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollTop</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>element.scrollLeft</p><p>返回被卷去的左侧的距离, 返回数值不带单位</p></li><li><p>element.scrollWidth</p><p>返回自身实际的宽度, 不含边框, 返回值不带单位</p></li><li><p>element.scrollHeight</p><p>返回自身实际高度, 不含边框, 返回值不带单位</p></li></ol><h2 id="scroll事件"><a href="#scroll事件" class="headerlink" title="scroll事件"></a>scroll事件</h2><p>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，</p><p>页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll 事件。</p><h2 id="案例-仿淘宝固定侧边栏"><a href="#案例-仿淘宝固定侧边栏" class="headerlink" title="案例: 仿淘宝固定侧边栏"></a>案例: 仿淘宝固定侧边栏</h2><blockquote><p>要求</p></blockquote><ol><li><p>原先侧边栏是绝对定位</p></li><li><p>当页面滚动到一定位置，侧边栏改为固定定位</p></li><li><p>页面继续滚动，会让 返回顶部显示出来</p></li></ol><blockquote><p>分析</p></blockquote><p>① 需要用到页面滚动事件 scroll 因为是页面滚动，所以事件源是 document<br>② 滚动到某个位置，就是判断页面被卷去的上部值。<br>③ 页面被卷去的头部：可以通过window.pageYOffset 获得 如果是被卷去的左侧 window.pageXOffset<br>④ 注意: <strong>元素被卷去的头部是 element.scrollTop</strong> , 如果是<strong>页面被卷去的头部 则是 window.pageYOffset</strong><br>⑤ 其实这个值 可以通过盒子的 offsetTop 可以得到，如果大于等于这个值，就可以让盒子固定定位了</p><h1 id="三大系列的总结"><a href="#三大系列的总结" class="headerlink" title="三大系列的总结"></a>三大系列的总结</h1><h2 id="element-offsetWidth"><a href="#element-offsetWidth" class="headerlink" title="element.offsetWidth"></a>element.offsetWidth</h2><p>返回自身包括padding  边框  内容区的宽度   返回数值不带单位</p><h2 id="element-clientWidth"><a href="#element-clientWidth" class="headerlink" title="element.clientWidth"></a>element.clientWidth</h2><p>返回自身包括padding,  内容区的宽度,  不含边框  返回数值不带单位</p><h2 id="element-scrollWidth"><a href="#element-scrollWidth" class="headerlink" title="element.scrollWidth"></a>element.scrollWidth</h2><p>返回自身实际的宽度(包括溢出),  不含边框  返回数值不带单位</p><h2 id="他们的主要用法"><a href="#他们的主要用法" class="headerlink" title="他们的主要用法"></a>他们的主要用法</h2><blockquote><p>offset系列 经常用于获取元素位置</p></blockquote><p><code>offsetLeft offsetTop</code></p><blockquote><p>client系列经常用于获取元素的宽高</p></blockquote><p><code>clientWidth  clientHeight</code></p><blockquote><p>scroll经常用于获取滚动距离</p></blockquote><p><code>scrollTop scrollLeft</code></p><p>注意: </p><p>页面滚动的距离通过: <code>window.pageXOffset</code></p><h1 id="mouseenter与mouseover的区别"><a href="#mouseenter与mouseover的区别" class="headerlink" title="mouseenter与mouseover的区别"></a>mouseenter与mouseover的区别</h1><h2 id="mouseover-一般用这个"><a href="#mouseover-一般用这个" class="headerlink" title="mouseover(一般用这个)"></a>mouseover(一般用这个)</h2><ul><li>从一个元素到这个元素 就会触发这个事件</li><li>从子盒子移动到父盒子会触发</li><li>从外面 移动到父盒子会触发</li><li>子盒子虽然没有设置鼠标经过事件 但是子盒子得到了鼠标经过事件  通过冒泡 传递给了设置了鼠标经过事件的父盒子  所以…</li></ul><h2 id="moseenter"><a href="#moseenter" class="headerlink" title="moseenter"></a>moseenter</h2><ul><li>只有鼠标从外面移入这个盒子下出发</li><li>从里面的子盒子移入到这个盒子   不会触发</li></ul><h2 id="mouseenter不会冒泡"><a href="#mouseenter不会冒泡" class="headerlink" title="mouseenter不会冒泡"></a>mouseenter不会冒泡</h2><p>跟mouseenter想对相应的 鼠标离开  mouseleave 同样不会冒泡</p><h1 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h1><h2 id="动画原理"><a href="#动画原理" class="headerlink" title="动画原理"></a>动画原理</h2><h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><p>通过定时器 setInterval() 不断移动盒子位置</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>获得盒子当前位置</li><li>让盒子在当前位置加上1个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个结束定时器的条件</li><li>注意此元素需要添加定位，才能使用element.style.left</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (div.<span class="property">offsetLeft</span> &gt;= <span class="number">400</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 停止动画  本质是停止定时器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">style</span>.<span class="property">left</span> = div.<span class="property">offsetLeft</span> + <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">30</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="简单动画函数的封装"><a href="#简单动画函数的封装" class="headerlink" title="简单动画函数的封装"></a>简单动画函数的封装</h2><blockquote><p>注意函数需要传递2个参数，动画对象和移动到的距离。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//简单封装函数  obj目标对象  target 目标位置</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params">obj, target</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> &gt;= target) &#123;</span><br><span class="line">                <span class="comment">// 停止动画  本质是停止定时器</span></span><br><span class="line">                <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            &#125;</span><br><span class="line">            obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;, <span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    <span class="title function_">animation</span>(div, <span class="number">300</span>);</span><br><span class="line">    <span class="title function_">animation</span>(span, <span class="number">400</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="动画函数给不同元素记录不同定时器-性能优化"><a href="#动画函数给不同元素记录不同定时器-性能优化" class="headerlink" title="动画函数给不同元素记录不同定时器(性能优化)"></a>动画函数给不同元素记录不同定时器(性能优化)</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>问题:   如果多个元素都使用这个动画函数，每次都要var 声明定时器, 会浪费内存。<br>我们可以给不同的元素使用不同的定时器（自己专门用自己的定时器）。</p><h3 id="核心原理-1"><a href="#核心原理-1" class="headerlink" title="核心原理"></a>核心原理</h3><p>利用JS是一门动态语言, 可以很方便得给当前对象添加属性</p><h3 id="优化一-将var-timer-改为-obj-timer"><a href="#优化一-将var-timer-改为-obj-timer" class="headerlink" title="优化一: 将var timer  改为  obj.timer"></a>优化一: 将var timer  改为  obj.timer</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//简单封装函数  obj目标对象  target 目标位置</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params">obj, target</span>) &#123;</span><br><span class="line">        obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> &gt;= target) &#123;</span><br><span class="line">                <span class="comment">// 停止动画  本质是停止定时器</span></span><br><span class="line">                <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            &#125;</span><br><span class="line">            obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;, <span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    <span class="title function_">animation</span>(div, <span class="number">300</span>);</span><br><span class="line">    <span class="title function_">animation</span>(span, <span class="number">400</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="优化二-防止多个定时器叠加"><a href="#优化二-防止多个定时器叠加" class="headerlink" title="优化二: 防止多个定时器叠加"></a>优化二: 防止多个定时器叠加</h3><p>点击事件触发后  先清除当前的定时器 再执行新的定时器, 防止多个定时器叠加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//给不同得元素指定了不同得定时器</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params">obj, target</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);  <span class="comment">//清除上一个相同的定时器 防止多次点击出现多个相同的定时器</span></span><br><span class="line">        obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// 将这里得var timer  改为obj.timer</span></span><br><span class="line">            <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> &gt;= target) &#123;</span><br><span class="line">                <span class="comment">// 停止动画  本质是停止定时器</span></span><br><span class="line">                <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + <span class="number">5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;, <span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    <span class="title function_">animation</span>(div, <span class="number">300</span>);</span><br><span class="line">    <span class="comment">// 当我们不断点击按钮,  这个元素得速度会越来越快, 因为开启了太多得定时器</span></span><br><span class="line">    <span class="comment">// 解决方案就是:  让我们元素只有一个定时器执行</span></span><br><span class="line">    <span class="comment">// 先清除以前的定时器, 只保留当前的一个定时器执行;</span></span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">animation</span>(span, <span class="number">400</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="缓动动画原理"><a href="#缓动动画原理" class="headerlink" title="缓动动画原理"></a>缓动动画原理</h2><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来。</li><li>核心算法： (目标值 - 现在的位置(offsetLeft) ) &#x2F; 10 做为每次移动的距离 步长</li><li>停止的条件是： 让当前盒子位置等于目标位置就停止定时器 </li><li>注意步长值需要取整   &#x2F;&#x2F; Math.ceil( step )</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;点击夏雨荷才走&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>夏雨荷<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//给不同得元素指定了不同得定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target</span>) &#123;  <span class="comment">// 传入要移动的目标元素, 移动的目标位置offsetLeft</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);  <span class="comment">//清除上一个相同的定时器 防止多次点击出现多个相同的定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// 将这里得var timer  改为obj.timer</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//步长值写到定时器里面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//盒子达不到指定位置 涉及到小数除法   把我们的步长值改为整数 不要出现小数 往大取整 Math.ceil() 到达500px</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> step = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> == target) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 停止动画  本质是停止定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">15</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 当我们不断点击按钮,  这个元素得速度会越来越快, 因为开启了太多得定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 解决方案就是:  让我们元素只有一个定时器执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 先清除以前的定时器, 只保留当前的一个定时器执行;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">animate</span>(span, <span class="number">500</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//匀速动画 就是 盒子是当前的位置 + 固定的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//缓动动画  盒子当前的位置 + 变化的值( (目标值 - 现在的位置)/ 10   )</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">animate</span>(div, <span class="number">500</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="缓动动画多个目标值之间移动"><a href="#缓动动画多个目标值之间移动" class="headerlink" title="缓动动画多个目标值之间移动"></a>缓动动画多个目标值之间移动</h3><blockquote><p>一定要判断  步长值的正负</p></blockquote><p>正着就往大取整<br>倒着走就往小的取整</p><p>可以让动画函数从 800 移动到 500。<br>当我们点击按钮时候，判断步长是正值还是负值</p><ol><li>如果是正值，则步长 往大了取整</li><li>如果是负值，则步长 向小了取整</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10)   //正着走取整</span></span><br><span class="line">                <span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span></span><br><span class="line">                step = step &gt; <span class="number">0</span>? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step):<span class="title class_">Math</span>.<span class="title function_">floor</span>(step) <span class="comment">// 正着走还是倒着走</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn500&quot;</span>&gt;</span>点击夏雨荷到500<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn800&quot;</span>&gt;</span>点击夏雨荷到800<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>夏雨荷<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//给不同得元素指定了不同得定时器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target</span>) &#123;  <span class="comment">// 传入要移动的目标元素, 移动的目标位置offsetLeft</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);  <span class="comment">//清除上一个相同的定时器 防止多次点击出现多个相同的定时器</span></span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// 将这里得var timer  改为obj.timer</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//步长值写到定时器里面</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//盒子达不到指定位置 涉及到小数除法   把我们的步长值改为整数 不要出现小数 往大取整 Math.ceil() 到达500px</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// -8.1 往小取-9</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">            step = step &gt; <span class="number">0</span>? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step):<span class="title class_">Math</span>.<span class="title function_">floor</span>(step) <span class="comment">// 正着走还是倒着走</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> == target) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 停止动画  本质是停止定时器</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">15</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn500 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn500&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn800 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn800&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 当我们不断点击按钮,  这个元素得速度会越来越快, 因为开启了太多得定时器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 解决方案就是:  让我们元素只有一个定时器执行</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 先清除以前的定时器, 只保留当前的一个定时器执行;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    btn500.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">animate</span>(span, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    btn800.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">animate</span>(span, <span class="number">800</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//匀速动画 就是 盒子是当前的位置 + 固定的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//缓动动画  盒子当前的位置 + 变化的值( (目标值 - 现在的位置)/ 10   )</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">animate</span>(div, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动画函数添加回调函数"><a href="#动画函数添加回调函数" class="headerlink" title="动画函数添加回调函数"></a>动画函数添加回调函数</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>等动画结束之后  我们可以做什么!</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>回调函数原理：函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。</p><h3 id="回调函数写的位置："><a href="#回调函数写的位置：" class="headerlink" title="回调函数写的位置："></a>回调函数写的位置：</h3><blockquote><p>定时器结束的位置。</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn500&quot;</span>&gt;</span>点击夏雨荷到500<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn800&quot;</span>&gt;</span>点击夏雨荷到800<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>夏雨荷<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(callback); <span class="comment">//callback = function () &#123;&#125; 调用的时候 callback()</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">            step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> == target) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (callback) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">callback</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">15</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn500 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn500&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn800 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.btn800&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn500.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">animate</span>(span, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    btn800.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">animate</span>(span, <span class="number">800</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// alert(&#x27;你好吗?&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">            span.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动画函数封装到单独JS文件里面"><a href="#动画函数封装到单独JS文件里面" class="headerlink" title="动画函数封装到单独JS文件里面"></a>动画函数封装到单独JS文件里面</h2><p>因为以后经常使用这个动画函数，可以单独封装到一个JS文件里面，使用的时候引用这个JS文件即可。</p><ol><li>单独新建一个JS文件。</li><li>HTML文件引入 JS 文件</li></ol><h2 id="引用animate动画函数"><a href="#引用animate动画函数" class="headerlink" title="引用animate动画函数"></a>引用animate动画函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1.获取元素</span></span><br><span class="line">    <span class="keyword">var</span> sliderbar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.sliderbar&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> con = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.con&#x27;</span>);</span><br><span class="line">    sliderbar.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">animate</span>(con, -<span class="number">160</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//当我们动画执行完毕 就把左箭头改为右箭头</span></span><br><span class="line">            sliderbar.<span class="property">children</span>[<span class="number">0</span>].<span class="property">innerHTML</span> = <span class="string">&#x27;➡&#x27;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    sliderbar.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">animate</span>(con, <span class="number">0</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//当我们动画执行完毕 就把左箭头改为右箭头</span></span><br><span class="line">            sliderbar.<span class="property">children</span>[<span class="number">0</span>].<span class="property">innerHTML</span> = <span class="string">&#x27;⬅&#x27;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="常见的网页特效"><a href="#常见的网页特效" class="headerlink" title="常见的网页特效"></a>常见的网页特效</h1><h2 id="网页轮播图"><a href="#网页轮播图" class="headerlink" title="网页轮播图"></a>网页轮播图</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>轮播图也称为焦点图，是网页中比较常见的网页特效</p><h3 id="功能要求"><a href="#功能要求" class="headerlink" title="功能要求"></a>功能要求</h3><ol><li>鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</li><li>点击右侧按钮一次，图片往左播放一张，以此类推， 左侧按钮同理。</li><li>图片播放的同时，下面小圆圈模块跟随一起变化。</li><li>点击小圆圈，可以播放相应图片。</li><li>鼠标不经过轮播图， 轮播图也会自动播放图片。</li><li>鼠标经过，轮播图模块， 自动播放停止</li></ol><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</li><li>点击右侧按钮一次，图片往左播放一张，以此类推， 左侧按钮同理。</li><li>图片播放的同时，下面小圆圈模块跟随一起变化。</li><li>点击小圆圈，可以播放相应图片。</li><li>鼠标不经过轮播图， 轮播图也会自动播放图片。</li><li>鼠标经过，轮播图模块， 自动播放停止</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="轮播图要用ul-的li-每个li包含一个a链接的图片"><a href="#轮播图要用ul-的li-每个li包含一个a链接的图片" class="headerlink" title="轮播图要用ul 的li  每个li包含一个a链接的图片"></a>轮播图要用ul 的li  每个li包含一个a链接的图片</h4><h4 id="新建js文件夹-index-js"><a href="#新建js文件夹-index-js" class="headerlink" title="新建js文件夹: index.js"></a>新建js文件夹: index.js</h4><p>添加window事件 等网页加载完 才执行js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>再index.html中引入index.js</p><p><code> &lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;</code></p><p>鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.arrow-l</span>,</span><br><span class="line"><span class="selector-class">.arrow-r</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br></pre></td></tr></table></figure><p>④ 显示隐藏 display 按钮</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取元素</span></span><br><span class="line"><span class="keyword">var</span> arrow_l = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow-l&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> arrow_r = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow-r&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> focus = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.focus&#x27;</span>);</span><br><span class="line"><span class="comment">//鼠标经过focus 就显示隐藏左右按钮</span></span><br><span class="line">focus.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    arrow_l.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    arrow_r.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">focus.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    arrow_l.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    arrow_r.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="动态生成小圆圈"><a href="#动态生成小圆圈" class="headerlink" title="动态生成小圆圈"></a>动态生成小圆圈</h4><p>核心思路：小圆圈的个数要跟图片张数一致</p><p>③ 所以首先先得到ul里面图片的张数（图片放入li里面，所以就是li的个数）</p><p>④ 利用循环动态生成小圆圈（这个小圆圈要放入ol里面）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.动态生成小圆圈  有几张图  我就生成几个小圆圈</span></span><br><span class="line"><span class="keyword">var</span> ul = focus.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);  <span class="comment">// 获取焦点图里面的ul</span></span><br><span class="line"><span class="keyword">var</span> ol = focus.<span class="title function_">querySelector</span>(<span class="string">&#x27;.circle&#x27;</span>);</span><br><span class="line"><span class="comment">// console.log(ul.children.length); //4  得到ul里面有4个li</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ul.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//创建一个li</span></span><br><span class="line">    <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    <span class="comment">//把li插入到ol里面</span></span><br><span class="line">    ol.<span class="title function_">appendChild</span>(li);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把ol里面的li设置类名为current</span></span><br><span class="line">ol.<span class="property">children</span>[<span class="number">0</span>].<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br></pre></td></tr></table></figure><p>⑤ 创建节点 createElement(‘li’)<br>⑥ 插入节点 ol. appendChild(li)<br>⑦ 第一个小圆圈需要添加 current 类</p><h4 id="多选一-小圆圈高亮"><a href="#多选一-小圆圈高亮" class="headerlink" title="多选一  小圆圈高亮"></a>多选一  小圆圈高亮</h4><p>① 小圆圈的排他思想<br>② 点击当前小圆圈，就添加current类</p><p>③ 其余的小圆圈就移除这个current类</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ol.<span class="title function_">appendChild</span>(li);</span><br><span class="line"><span class="comment">//4.小圆圈的排他思想  我们可以直接再生成小圆圈的同时 绑定点击事件</span></span><br><span class="line">li.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//干掉所有人  把所有li清除current 类名</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;ol.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        ol.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//留下我自己  当前li设置current 类名</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>④ 注意： 我们在刚才生成小圆圈的同时，就可以直接绑定这个点击事件了。</p><h4 id="点击小圆圈-滚动图片"><a href="#点击小圆圈-滚动图片" class="headerlink" title="点击小圆圈  滚动图片"></a>点击小圆圈  滚动图片</h4><p>② 此时用到animate动画函数，将js文件引入（注意，因为index.js 依赖 animate.js 所以，animate.js 要写到 index.js 上面）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个animate.js 必须写到 index.js的上面引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/animate.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入我们首页的js文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③ 使用动画函数的前提，该元素必须有定位</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.focus</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④ 注意是ul 移动 而不是小li </p><p>整个ul在动的时候  带着里面的一大串横向图片往左右移动  所以设置ul的left值  而不是设置li的值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//留下我自己  当前li设置current 类名</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line"><span class="comment">//5. 点击小圆圈 移动图片  当然移动的是ul</span></span><br><span class="line"><span class="comment">//ul的移动距离就是小圆圈的索引号*一张banner图片的宽度 注意是负值</span></span><br><span class="line"><span class="comment">//但我们点击了某个小li  就拿到当前li的索引号</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> focusWidth = focus.<span class="property">offsetWidth</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(focusWidth); <span class="comment">//721</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index); <span class="comment">// 0/1/2/3</span></span><br><span class="line"><span class="title function_">animate</span>(ul, -index * focusWidth);   <span class="comment">//向左走 是负值</span></span><br></pre></td></tr></table></figure><p>⑤ 滚动图片的核心算法： 点击某个小圆圈 ， 就让图片滚动 小圆圈的索引号乘以图片的宽度做为ul移动距离</p><p>⑥ 此时需要知道小圆圈的索引号， 我们可以在生成小圆圈的时候，给它设置一个自定义属性，点击的时候获取这个自定义属性即可。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="comment">// 记录当前小圆圈的索引号 通过自定义属性来做</span></span><br><span class="line">li.<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i); <span class="comment">//index是属性名 i是属性值</span></span><br></pre></td></tr></table></figure><h4 id="点击右侧按钮一次，就让图片滚动一张。"><a href="#点击右侧按钮一次，就让图片滚动一张。" class="headerlink" title="点击右侧按钮一次，就让图片滚动一张。"></a>点击右侧按钮一次，就让图片滚动一张。</h4><p><strong>② 声明一个变量num， 点击一次，自增1， 让这个变量乘以图片宽度，就是 ul 的滚动距离。</strong></p><blockquote><p>小箭头不见了</p><p>ul的就绝对定位挡住了小箭头</p><p>解决  index.css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.arrow-l</span>,</span><br><span class="line"><span class="selector-class">.arrow-r</span> &#123;</span><br><span class="line">    ........</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>点击内容为a的链接 会返回页面顶端<br>这是不对的</p><p>解决: index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 左侧按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrow-l&quot;</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;lt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 右侧按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrow-r&quot;</span>&gt;</span> <span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>将foucusWidth提到外面<br>这样我们的箭头点击事件才能利用这个变量<br>知道要移动多长(图片的宽度) </p><p><code>var focusWidth = focus.offsetWidth;</code></p></blockquote><blockquote><p>右侧轮播图按钮</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ol.<span class="property">children</span>[<span class="number">0</span>].<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//7. 点击右侧按钮, 图片滚动一张</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">arrow_r.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    num++;</span><br><span class="line">    <span class="title function_">animate</span>(ul,- num *focusWidth)  <span class="comment">//还是负的 往左走</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>右侧到最后一张图 会是空白背景  需要无缝滚动原理</p></blockquote><p><strong>③ 图片无缝滚动原理</strong></p><blockquote><p>④ 把ul 第一个li 复制一份，放到ul 的最后面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;upload/focus.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>⑤ 当图片滚动到克隆的最后一张图片时， 让ul 快速的、不做动画的跳到最左侧： left 为0</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//7. 点击右侧按钮, 图片滚动一张</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">arrow_r.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//如果走到了最后负值的一张图片, 此时我们ul要快速复原  left == 0;</span></span><br><span class="line">    <span class="keyword">if</span> (num == ul.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>) &#123; <span class="comment">// 等于ul图片的长度即li的个数减1  因为最后一个是重复第一张 不算ul的图片的长度</span></span><br><span class="line">        ul.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="title function_">animate</span>(ul, - num * focusWidth)  <span class="comment">//还是负的 往左走</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>⑥ 同时num 赋值为0，可以从新开始滚动图片了</p></blockquote><p><strong>自动赋值第一张图片的最后 小圆圈不会多</strong></p><blockquote><p>① 克隆第一张图片<br>② 克隆ul 第一个li cloneNode() 加true 深克隆 复制里面的子节点 &#x2F;&#x2F; false 浅克隆<br>③ 添加到 ul 最后面 appendChild<br>        &#x2F;&#x2F;6. 克隆第一张图片 放到ul最后面</p>   <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> first = ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>); <span class="comment">//第一个li深克隆一份</span></span><br><span class="line">    ul.<span class="title function_">appendChild</span>(first);</span><br></pre></td></tr></table></figure><p>小圆圈不会多的原因<br>    复制图片的执行顺序在 生成小圆圈的后面</p></blockquote><h4 id="点击右侧按钮-小圆圈也变化"><a href="#点击右侧按钮-小圆圈也变化" class="headerlink" title="点击右侧按钮, 小圆圈也变化"></a>点击右侧按钮, 小圆圈也变化</h4><p>② 最简单的做法是再声明一个变量circle，每次点击右侧按钮自增1，注意，左侧按钮也需要这个变量，因此要声明全局变量。</p><p>③ 但是图片有5张，我们小圆圈只有4个少一个，必须加一个判断条件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">animate</span>(ul, - num * focusWidth)  <span class="comment">//还是负的 往左走</span></span><br><span class="line"><span class="comment">//8. 点击右侧按钮  小圆圈一起变化  可以声明一个变量控制小圆圈的播放</span></span><br><span class="line">circle++;</span><br><span class="line"><span class="comment">//如果circle等于了4  说明走到最后我们克隆的这张图片了 我们就复原</span></span><br><span class="line"><span class="keyword">if</span> (circle == ol.<span class="property">children</span>.<span class="property">length</span>) &#123; <span class="comment">//如果走到了最后一个小圆点  就复原为第一个</span></span><br><span class="line">    circle = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先清除其余小圆圈的current;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ol.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    ol.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//留下当前的小圆圈的current</span></span><br><span class="line">ol.<span class="property">children</span>[circle].<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br></pre></td></tr></table></figure><p>④ 如果circle &#x3D;&#x3D; 4 就 从新复原为 0</p><h4 id="两个小bug"><a href="#两个小bug" class="headerlink" title="两个小bug"></a>两个小bug</h4><blockquote><p>点击小圆圈的第三个li  再点击右键轮播图按钮 会跳到第二张上去 而不是第四张</p></blockquote><p>原因是 我们的小圆圈点击之间 没有和右侧按钮点击绑定</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当我们点击了某个li, 就要把我们的索引号给num</span></span><br><span class="line">num = index;</span><br><span class="line"><span class="comment">//当我们点击了某个li, 就要把我们的索引号给circle</span></span><br><span class="line">circle = index;</span><br></pre></td></tr></table></figure><p>注意  里面的图片 要与.focus这个盒子的宽度一致, 不然会有缝隙. 因为图片移动的宽度 是根据.focus获取的</p><h4 id="左侧按钮功能制作"><a href="#左侧按钮功能制作" class="headerlink" title="左侧按钮功能制作"></a>左侧按钮功能制作</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arrow_l.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//如果走到了最后负值的一张图片, 此时我们ul要快速复原  left == 0;</span></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123; <span class="comment">// 等于ul图片的长度即li的个数减1  因为最后一个是重复第一张 不算ul的图片的长度</span></span><br><span class="line">            num = ul.<span class="property">children</span>.<span class="property">length</span> -<span class="number">1</span>;</span><br><span class="line">            ul.<span class="property">style</span>.<span class="property">left</span> = -num*focusWidth +<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="title function_">animate</span>(ul, - num * focusWidth)  <span class="comment">//还是负的 往左走</span></span><br><span class="line">        <span class="comment">//8. 点击右侧按钮  小圆圈一起变化  可以声明一个变量控制小圆圈的播放</span></span><br><span class="line">        circle--;</span><br><span class="line">        <span class="comment">//如果circle&lt;0  说明第一章图片, 则小圆圈要改为第四个小圆圈</span></span><br><span class="line">        <span class="keyword">if</span> (circle &lt;<span class="number">0</span>) &#123;</span><br><span class="line">            circle = ol.<span class="property">children</span>.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先清除其余小圆圈的current;</span></span><br><span class="line">        <span class="title function_">circleChange</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">circleChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ol.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            ol.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//留下当前的小圆圈的current</span></span><br><span class="line">        ol.<span class="property">children</span>[circle].<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="自动播放功能"><a href="#自动播放功能" class="headerlink" title="自动播放功能"></a>自动播放功能</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//10. 自动播放轮播图</span></span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//手动调用点击事件</span></span><br><span class="line">    arrow_r.<span class="title function_">click</span>();</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//鼠标经过focus 就显示隐藏左右按钮</span></span><br><span class="line">focus.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    arrow_l.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    arrow_r.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    timer = <span class="literal">null</span>;  <span class="comment">//清除定时器变量</span></span><br><span class="line">&#125;)</span><br><span class="line">focus.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    arrow_l.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    arrow_r.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//手动调用点击事件</span></span><br><span class="line">        arrow_r.<span class="title function_">click</span>();</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="节流阀"><a href="#节流阀" class="headerlink" title="节流阀"></a>节流阀</h3><p>防止轮播图按钮连续点击造成播放过快。</p><p>节流阀目的：当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。</p><p>核心实现思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数。</p><p>开始设置一个变量 var flag &#x3D; true;<br>If(flag) {flag &#x3D; false; do something} 关闭水龙头<br>利用回调函数 动画执行完毕， flag &#x3D; true 打开水龙头</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">            <span class="comment">// if (callback) &#123;</span></span><br><span class="line">            <span class="comment">//     // 调用函数</span></span><br><span class="line">            <span class="comment">//     callback();</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            callback &amp;&amp; <span class="title function_">callback</span>();  </span><br><span class="line"><span class="comment">// 短路运算符  如果callback有  则执行callback() //如果callback没有, 则略过这一行后面的内容</span></span><br></pre></td></tr></table></figure><h2 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h2><h3 id="滚动窗口至文档中的特定位置"><a href="#滚动窗口至文档中的特定位置" class="headerlink" title="滚动窗口至文档中的特定位置"></a>滚动窗口至文档中的特定位置</h3><p><code>window.scroll(x,y)</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.当点击了返回顶部  就让窗口滚动到页面的最上方</span></span><br><span class="line">goBack.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//里面的x,y不跟单位  直接写数字即可</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scroll</span>(<span class="number">0</span>,<span class="number">0</span>);  <span class="comment">// </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="带有动画的返回顶部"><a href="#带有动画的返回顶部" class="headerlink" title="带有动画的返回顶部"></a>带有动画的返回顶部</h3><p>此时可以继续使用我们封装的动画函数</p><p>③ 只需要把所有的left 相关的值 改为 跟 页面垂直滚动距离相关就可以了<br>④ 页面滚动了多少，可以通过 window.pageYOffset 得到<br>⑤ 最后是页面滚动，使用 window.scroll(x,y) </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">     <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target, callback</span>) &#123;</span><br><span class="line">         <span class="comment">// console.log(callback); //callback = function () &#123;&#125; 调用的时候 callback()</span></span><br><span class="line">         <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">         obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">             <span class="keyword">var</span> step = (target - <span class="variable language_">window</span>.<span class="property">pageYOffset</span>) / <span class="number">10</span></span><br><span class="line">             step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step)</span><br><span class="line">             <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> == target) &#123;</span><br><span class="line">                 <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">                 <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">                     <span class="title function_">callback</span>();</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">// obj.style.left = window.pageYoffset + step + &#x27;px&#x27;;</span></span><br><span class="line">             <span class="variable language_">window</span>.<span class="title function_">scroll</span>(<span class="number">0</span>, <span class="variable language_">window</span>.<span class="property">pageYOffset</span> + step);</span><br><span class="line">         &#125;, <span class="number">15</span>)</span><br><span class="line">     &#125;</span><br><span class="line"><span class="title function_">animate</span>(<span class="variable language_">window</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="筋斗云案例"><a href="#筋斗云案例" class="headerlink" title="筋斗云案例"></a>筋斗云案例</h2><p>需求</p><p>鼠标经过某个小li， 筋斗云跟这到当前小li位置<br>鼠标离开这个小li， 筋斗云复原为原来的位置<br>鼠标点击了某个小li， 筋斗云就会留在点击这个小li 的位置</p><p>分析</p><p>① 利用动画函数做动画效果<br>② 原先筋斗云的起始位置是0<br>③ 鼠标经过某个小li， 把当前小li 的 offsetLeft 位置 做为目标值即可<br>④ 鼠标离开某个小li， 就把目标值设为 0<br>⑤ 如果点击了某个小li， 就把li当前的位置存储起来，做为筋斗云的起始位置</p>]]></content>
    
    
    <summary type="html">针对浏览器的一些属性和方法 获取元素相对于浏览器的一些属性, 浏览器的滚动属性或事件 制作JS动画</summary>
    
    
    
    <category term="JavaScript" scheme="http://l1562007999.github.io/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://l1562007999.github.io/tags/JS/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="PC网页特效" scheme="http://l1562007999.github.io/tags/PC%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>在vscode中,nrm无法运行</title>
    <link href="http://l1562007999.github.io/2022/04/04/%E5%9C%A8vscode%E4%B8%AD-nrm%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C/"/>
    <id>http://l1562007999.github.io/2022/04/04/%E5%9C%A8vscode%E4%B8%AD-nrm%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C/</id>
    <published>2022-04-04T01:20:56.000Z</published>
    <updated>2022-04-08T13:52:25.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>nrm : 无法加载文件 C:\Users\xxx\AppData\Roaming\npm\nrm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:&#x2F;go.<br>microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的 about_Execution_Policies。<br>所在位置 行:1 字符: 1</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p><strong>打开Windows PowerShell（管理员）</strong></p><p>输入<code>set-ExecutionPolicy RemoteSigned</code></p><p>在输入Y</p><p>即可~~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;nrm : 无法加载文件 C:\Users\xxx\AppData\Roaming\npm\nrm.ps1，因为在此系统上禁止运行脚本。有关</summary>
      
    
    
    
    <category term="Node.js" scheme="http://l1562007999.github.io/categories/Node-js/"/>
    
    
    <category term="解决问题" scheme="http://l1562007999.github.io/tags/%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    
    <category term="Node.js" scheme="http://l1562007999.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JS-WebAPI-BOM</title>
    <link href="http://l1562007999.github.io/2022/04/01/JS-JSWeb-3/"/>
    <id>http://l1562007999.github.io/2022/04/01/JS-JSWeb-3/</id>
    <published>2022-04-01T03:31:38.000Z</published>
    <updated>2022-04-09T04:50:15.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BOM概述—什么是BOM"><a href="#BOM概述—什么是BOM" class="headerlink" title="BOM概述—什么是BOM"></a>BOM概述—什么是BOM</h1><p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window</p><p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window</p><p>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape 浏览器标准的一部分。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>浏览器对象模型</p></li><li><p>把「浏览器」当做一个「对象」来看待</p></li><li><p>BOM 的顶级对象是 window</p></li><li><p>BOM 学习的是浏览器窗口交互的一些对象</p></li><li><p>BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</p></li></ul><p>window :BOM比DOM大 它包含DOM:</p><ol><li>document</li><li>location</li><li>navigation</li><li>screen</li><li>history</li></ol><h1 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h1><p>是浏览器的顶级对象, 它具有双重角色</p><ol><li>它是 JS 访问浏览器窗口的一个接</li><li>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法<br> 在调用的时候可以省略 window，前面学习的对话框都属于 window 对象方法，如 alert()、prompt() 等。<br> 注意：window下的一个特殊属性 window.name<br> 声明对象&#x2F;变量不要用name</li></ol><h1 id="window对象的常见事件"><a href="#window对象的常见事件" class="headerlink" title="window对象的常见事件"></a>window对象的常见事件</h1><h2 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h2><blockquote><p>说明</p></blockquote><p>window.onload 是窗口 (页面）加载事件,当文档内容完全加载完成会触发该事件(包括图像、脚本文件、CSS<br>文件等), 就调用的处理函数。</p><p>这样 触发事件的书写位置就不受限制了  可以写在页面元素的上面</p><h3 id="窗口加载"><a href="#窗口加载" class="headerlink" title="窗口加载"></a>窗口加载</h3><blockquote><p>语法</p></blockquote><p><code>window.onload = function()&#123;&#125;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// 等其余事件加载完了 再调用这个onload事件 这样来 不按顺序也能设置事件 触发想要的事件</span></span><br><span class="line">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;点到我啦!&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>window.addEventListener(&quot;load&quot;,function()&#123;&#125;);</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;点到我啦!&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;22&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>等窗口中所有内容 包括css 图片 等加载完毕后才执行js带啊</strong></p><blockquote><p> 注意</p></blockquote><ol><li>有了 window.onload 就可以把 JS 代码写到页面元素的上方，因为 onload 是等页面内容全部加载完毕，<br>再去执行处理函数。</li><li>window.onload 传统注册事件方式 只能写一次，如果有多个，会以最后一个 window.onload 为准。</li><li>如果使用 addEventListener 则没有限制</li></ol><h3 id="页面加载"><a href="#页面加载" class="headerlink" title="页面加载"></a>页面加载</h3><blockquote><p>说明</p></blockquote><p><strong>等页面标签加载完毕  就会执行js代码</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">33</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="窗口加载与页面加载的区别"><a href="#窗口加载与页面加载的区别" class="headerlink" title="窗口加载与页面加载的区别"></a>窗口加载与页面加载的区别</h3><p>load事件 等页面内容全部加载完毕  包括页面dom元素  图片 flash css等等</p><p>DOMContentLoaded 是DOM加载完毕, 不包括图片falsh css 等就可以执行 加载速度比 load 快一些</p><h2 id="调整窗口大小的时间"><a href="#调整窗口大小的时间" class="headerlink" title="调整窗口大小的时间"></a>调整窗口大小的时间</h2><blockquote><p>说明</p></blockquote><p>window.onresize 是调整窗口大小加载事件, 当触发时就调用的处理函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">addEventListener</span> (<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变化了&#x27;</span>);  <span class="comment">// 拉动窗口 就会触发</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><ol><li><p>只要窗口大小发生像素变化，就会触发这个事件。</p></li><li><p>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变化了&#x27;</span>);  <span class="comment">// 拉动窗口 就会触发</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">innerWidth</span> &lt;= <span class="number">800</span>) &#123;  <span class="comment">// 如果窗口宽度小于800px  则隐藏div</span></span><br><span class="line">            div.<span class="property">style</span>.<span class="property">display</span>= <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 否则显示div</span></span><br><span class="line">            div.<span class="property">style</span>.<span class="property">display</span>= <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="setTimeout-调用函数-延迟的毫秒数"><a href="#setTimeout-调用函数-延迟的毫秒数" class="headerlink" title="setTimeout(调用函数,  [延迟的毫秒数]);"></a>setTimeout(调用函数,  [延迟的毫秒数]);</h2><blockquote><p>setTimeout() 方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//直接调用函数</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2s时间到了&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>); <span class="comment">// 到了2s之后 就去调用这个函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写函数名</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(callback, <span class="number">3000</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);  <span class="comment">//刷新后3秒钟执行&#x27;爆炸了&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><ol><li>window 可以省略。</li><li>这个调用函数可以直接写函数，或者写函数名或者采取字符串‘函数名()’三种形式。第三种不推荐</li><li>延迟的毫秒数省略默认是 0，如果写，必须是毫秒。</li><li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</li></ol><h3 id="解决问题-定时器很多-怎么办-取名字-为了停止定时器"><a href="#解决问题-定时器很多-怎么办-取名字-为了停止定时器" class="headerlink" title="解决问题: 定时器很多 怎么办 取名字 (为了停止定时器)"></a>解决问题: 定时器很多 怎么办 取名字 (为了停止定时器)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);  <span class="comment">//刷新后3秒钟执行&#x27;爆炸了&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(callback ,<span class="number">3000</span>) <span class="comment">//3s后调用函数callback</span></span><br><span class="line"><span class="keyword">var</span> timer2 = <span class="built_in">setTimeout</span>(callback ,<span class="number">5000</span>) <span class="comment">// 5s后调用函数callback</span></span><br></pre></td></tr></table></figure><h3 id="案例-5s后广告自动关闭"><a href="#案例-5s后广告自动关闭" class="headerlink" title="案例:5s后广告自动关闭"></a>案例:5s后广告自动关闭</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;images/ad.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;ad&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ad = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ad&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ad.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">5000</span>)  <span class="comment">//5s之后隐藏图片</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="停止定时器"><a href="#停止定时器" class="headerlink" title="停止定时器"></a>停止定时器</h3><p><code>windows.clearTimeout(timeout ID)</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;点击停止计时器&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5S到了,爆炸了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">5000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">clearTimeout</span>(timer1);  <span class="comment">// 点击之后 没到5s  不爆炸了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><ol><li>window 可以省略。</li><li>里面的参数就是定时器的标识符 。</li></ol><h2 id="setInterval-回调函数-间隔的毫秒数"><a href="#setInterval-回调函数-间隔的毫秒数" class="headerlink" title="setInterval(回调函数,[间隔的毫秒数])"></a>setInterval(回调函数,[间隔的毫秒数])</h2><blockquote><p>注意</p></blockquote><ol><li>window 可以省略。</li><li>这个调用函数可以直接写函数，或者写函数名或者采取字符串 ‘函数名()’ 三种形式。</li><li>间隔的毫秒数省略默认是 0，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数。</li><li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</li><li>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次。</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">&#x27;继续输出&#x27;</span>));</span><br><span class="line">    &#125;, <span class="number">1000</span>); <span class="comment">//每隔1s钟就输出一个log</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p> 清除定时器clearInterval</p></blockquote><p><code>windows.clearInterval(interval ID)</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">&quot;begin&quot;</span>&gt;开始&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;stop&quot;</span>&gt;</span>结束定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> begin = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.begin&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> stop = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.stop&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> timer = <span class="literal">null</span>; <span class="comment">// 全局变量  //对象赋值给的对象初始化时 一般取null值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    begin.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       timer =  <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好啊&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我很好&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    stop.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">clearInterval</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>timer一定要定义为全局变量</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li>setTimeout是对设定毫秒之后仅调用一次这个函数</li><li>setInterval 是每隔设定毫秒数调用一次这个函数(重复调用)}</li></ol><h2 id="案例-jd倒计时"><a href="#案例-jd倒计时" class="headerlink" title="案例:jd倒计时"></a>案例:jd倒计时</h2><blockquote><p>分析</p></blockquote><p>① 这个倒计时是不断变化的，因此需要定时器来自动变化（setInterval）<br>② 三个黑色盒子里面分别存放时分秒<br>③ 三个黑色盒子利用innerHTML 放入计算的小时分钟秒数<br>④ 第一次执行也是间隔毫秒数，因此刚刷新页面会有空白<br>⑤ 最好采取封装函数的方式， 这样可以先调用一次这个函数，防止刚开始刷新页面有空白问题</p><blockquote><p>实施</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hour&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;minute&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;second&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//1.获取元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> hour = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hour&#x27;</span>); <span class="comment">//小时的黑色盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> minute = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.minute&#x27;</span>); <span class="comment">//分钟的黑色盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> second = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.second&#x27;</span>); <span class="comment">//秒数的黑色盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022-3-7 18:00:00&#x27;</span>); <span class="comment">// 返回的是用户输入时间 总的毫秒数; 用户输入一个时间 会转换为毫秒数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">countDown</span>(); <span class="comment">// 解决一刷新是默认文字的问题</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//2. 开启定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setInterval</span>(countDown, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">//times 就是剩余时间总的(/毫/)秒数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span>) <span class="comment">//得到剩余的小时 //这里不要整除%24  否则会变成天数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        hour.<span class="property">innerHTML</span> = h; <span class="comment">//剩余的小时数给小时黑色盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 得到剩余的分钟数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        minute.<span class="property">innerHTML</span> = m; <span class="comment">//剩余的分钟数给分钟黑色盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 得到剩余的秒数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s; <span class="comment">// 小于10  利用字符串连接 补0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        second.<span class="property">innerHTML</span> = s; <span class="comment">// 剩余的s数给s盒子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="案例-发送短信倒计时"><a href="#案例-发送短信倒计时" class="headerlink" title="案例:发送短信倒计时"></a>案例:发送短信倒计时</h2><blockquote><p>要求</p></blockquote><p>点击按钮后，该按钮60秒之内不能再次点击，防止重复发送短信</p><blockquote><p>分析</p></blockquote><p>① 按钮点击之后，会禁用 disabled 为true<br>② 同时按钮里面的内容会变化， 注意 button 里面的内容通过 innerHTML修改<br>③ 里面秒数是有变化的，因此需要用到定时器<br>④ 定义一个变量，在定时器里面，不断递减<br>⑤ 如果变量为0 说明到了时间，我们需要停止定时器，并且复原按钮初始状态。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    手机号码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> time = <span class="number">3</span>; <span class="comment">//定义剩下的秒数</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            btn.<span class="property">disabled</span> = <span class="literal">true</span>;  <span class="comment">//true 不要加引号</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//清除定时器和复原按钮</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">                    btn.<span class="property">disabled</span> = <span class="literal">false</span>; <span class="comment">//false 不要加引号</span></span></span><br><span class="line"><span class="language-javascript">                    btn.<span class="property">innerHTML</span> = <span class="string">&#x27;发送&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    time = <span class="number">3</span>;  <span class="comment">// 倒计时后 回复原始等待时长</span></span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    btn.<span class="property">innerHTML</span> = <span class="string">&#x27;还剩下&#x27;</span> + time + <span class="string">&#x27;秒&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    time--;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="this指向问题"><a href="#this指向问题" class="headerlink" title="this指向问题"></a>this指向问题</h2><p>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，一般情况下this的最终指向的是那个调用它的对象</p><ol><li><p>全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//window</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);   <span class="comment">//window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">fn</span>();</span><br><span class="line">   </span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">//window</span></span><br><span class="line">   </span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>方法调用中谁调用this指向谁</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;/button&gt;      </span><br><span class="line">   </span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">       <span class="comment">// btn.onclick = function() &#123;</span></span><br><span class="line">       <span class="comment">//     console.log(this); // this指向的是btn这个按钮对象</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line">       btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是btn这个按钮对象</span></span><br><span class="line">   </span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></li><li><p>构造函数中this指向构造函数的实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this 指向的是fun 实例对象</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br></pre></td></tr></table></figure></li></ol><h1 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h1><h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// console.log(1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout(function() &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     console.log(3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;, 1000);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(2);</span></span><br></pre></td></tr></table></figure><p>结果是123</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// console.log(1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout(function() &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     console.log(3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;, 0);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(2);</span></span><br></pre></td></tr></table></figure><p>由1000改为0</p><p>结果还是123</p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做<br>法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p><blockquote><p>他们的本质区别： 这条流水线上各个流程的执行顺序不</p></blockquote><h2 id="同步任务与异步任务"><a href="#同步任务与异步任务" class="headerlink" title="同步任务与异步任务"></a>同步任务与异步任务</h2><blockquote><p>同步任务</p></blockquote><p>同步任务都在主线程上执行，形成一个执行栈。</p><blockquote><p>异步任务</p></blockquote><p>JS 的异步是通过回调函数实现的。</p><p>一般而言，异步任务有以下三种类型:<br>                1、普通事件，如 click、resize 等<br>                2、资源加载，如 load、error 等<br>                3、定时器，包括 setInterval、setTimeout 等</p><p>异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）。</p><h2 id="JS执行机制详解"><a href="#JS执行机制详解" class="headerlink" title="JS执行机制详解"></a>JS执行机制详解</h2><ol><li>先执行执行栈中的同步任务。</li><li>异步任务（回调函数）放入任务队列中。</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</li></ol><blockquote><p>例如</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><blockquote><p> 结果是</p></blockquote><p>1<br>2<br>3<br>(鼠标点击) click</p><p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（ event loop）。</p><h1 id="location对象-地址栏操作"><a href="#location对象-地址栏操作" class="headerlink" title="location对象(地址栏操作)"></a>location对象(地址栏操作)</h1><blockquote><p>简介</p></blockquote><p>window 对象给我们提供了一个 location 属性用于<strong>获取或设置窗体的 URL</strong>，并且可以用于解析 URL 。 因为这个属性返回的是一个对象，所以我们将这个属性也称为location 对象</p><h2 id="URL的知识"><a href="#URL的知识" class="headerlink" title="URL的知识"></a>URL的知识</h2><p>统一资源定位符 (Uniform Resource Locator, URL) 是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><blockquote><p>语法格式</p></blockquote><p><code>protocol://host[:port]/path/[?query]#fragment</code><br> <a href="http://www.itcast.cn/index.html?name=andy&amp;age=18#link">http://www.itcast.cn/index.html?name=andy&amp;age=18#link</a></p><p><img src="/2022/04/01/JS-JSWeb-3/Snipaste_2022-04-04_16-25-24.png" alt="Snipaste_2022-04-04_16-25-24"></p><h2 id="location对象的属性"><a href="#location对象的属性" class="headerlink" title="location对象的属性"></a>location对象的属性</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="/2022/04/01/JS-JSWeb-3/Snipaste_2022-04-04_16-26-44.png" alt="Snipaste_2022-04-04_16-26-44"></p><h3 id="案例-5秒钟之后自动跳转页面"><a href="#案例-5秒钟之后自动跳转页面" class="headerlink" title="案例:5秒钟之后自动跳转页面"></a>案例:5秒钟之后自动跳转页面</h3><blockquote><p>分析</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="tag">&lt;<span class="name">button</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// btn.addEventListener(&#x27;click&#x27;, function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     // console.log(location.href);  //拿到当前页面的url</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     location.href = &#x27;http://www.baidu.com&#x27;  // 跳转到新的页面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer = <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span>= <span class="string">&#x27;您将在&#x27;</span>+ <span class="string">&#x27;*&#x27;</span>+<span class="string">&#x27;秒中之后跳转到首页&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(timer == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                location.<span class="property">href</span> = <span class="string">&#x27;http://baidu.com&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span>= <span class="string">&#x27;您将在&#x27;</span>+ timer+<span class="string">&#x27;秒中之后跳转到首页&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            timer--;</span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="18-案例-获取URL参数数据"><a href="#18-案例-获取URL参数数据" class="headerlink" title="18-案例:获取URL参数数据"></a>18-案例:获取URL参数数据</h3><blockquote><p>要求: 在login.html下输入的英文名 能在index页面显示</p></blockquote><p>login.html</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;index.html&quot;</span>&gt;</span><br><span class="line">    用户名: <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>); <span class="comment">//?uname = andy</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.先去掉问号 substr(&#x27;起始的位置&#x27;, 截取几个字符);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>) <span class="comment">//uname =andy</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//利用=  把字符串分割为数组  split(&#x27;=&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr = params.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3. 把数据写入div中</span></span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">innerHTML</span> = arr[<span class="number">1</span>]+<span class="string">&#x27;欢迎你&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="location对象的方法"><a href="#location对象的方法" class="headerlink" title="location对象的方法"></a>location对象的方法</h2><h3 id="location-assign-跳转页面"><a href="#location-assign-跳转页面" class="headerlink" title="location.assign()   跳转页面"></a>location.assign()   跳转页面</h3><blockquote><p>跟href一样, 可以跳转页面(也称为重定向页面)</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;方法&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        location.<span class="title function_">assign</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//特点  计入到历史中  可以后退页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>特点</p></blockquote><p>特点  计入到浏览历史中  可以后退页面</p><h3 id="location-replace-替换当前页面"><a href="#location-replace-替换当前页面" class="headerlink" title="location.replace()   替换当前页面"></a>location.replace()   替换当前页面</h3><blockquote><p> 替换当前页面, 因为不留下历史记录, 所以不能后退页面</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;方法&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        location.<span class="title function_">replace</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//特点  不计入到历史中  不可以后退页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="location-reload-重新加载页面"><a href="#location-reload-重新加载页面" class="headerlink" title="location.reload()  重新加载页面"></a>location.reload()  重新加载页面</h3><blockquote><p>重新加载页面, 相当于刷新按钮或者f5,</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;方法&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        location.<span class="title function_">reload</span>();  <span class="comment">//刷新页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>如果参数为true 强制刷新ctrl+f5  不读取本地缓存</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;方法&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        location.<span class="title function_">reload</span>(<span class="literal">true</span>); <span class="comment">// 加入true 强制刷新 不读取本地缓存</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h1><blockquote><p>介绍</p></blockquote><p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客<br>户机发送服务器的 user-agent 头部的值</p><p>下面前端代码可以判断用户那哪个终端打开页面，实现跳转</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line"> <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>; <span class="comment">//手机</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>; <span class="comment">//电脑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 一般是服务端来做的</p></blockquote><h1 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h1><p>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的 URL</p>]]></content>
    
    
    <summary type="html">JS PAI中的浏览器对象模型, 包括window对象的常见事件, 定时器, JS执行机制 location对象 Navigator对象 history对象...</summary>
    
    
    
    <category term="JavaScript" scheme="http://l1562007999.github.io/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://l1562007999.github.io/tags/JS/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="BOM" scheme="http://l1562007999.github.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>JS-WebAPI-DOM-2</title>
    <link href="http://l1562007999.github.io/2022/03/31/JS-JSWeb-2/"/>
    <id>http://l1562007999.github.io/2022/03/31/JS-JSWeb-2/</id>
    <published>2022-03-31T11:48:10.000Z</published>
    <updated>2022-04-09T04:50:22.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-API-2"><a href="#Web-API-2" class="headerlink" title="Web API(2)"></a>Web API(2)</h1><h2 id="DOM–DOM基础"><a href="#DOM–DOM基础" class="headerlink" title="DOM–DOM基础"></a>DOM–DOM基础</h2><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><h4 id="为什么学节点操作"><a href="#为什么学节点操作" class="headerlink" title="为什么学节点操作"></a>为什么学节点操作</h4><p>除了之前通过DOM提供的方法获取元素</p><p>包括: </p><p>document.getElementById()<br>document.getElementByTagName()<br>document.querySelector等</p><p><strong>还可以: 利用节点层级关系获取元素</strong></p><p>利用父子兄节点关系获取元素<br>逻辑性强, 但是兼容性稍差</p><p>这两种方式都可以获取元素节点, 我们后面都会使用, 但是节点操作更加简单</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>三种节点</p><blockquote><p>元素节点 nodeType 1</p><p>属性节点 nodeType  2</p><p>文本节点  nodeType   3</p><p>文本节点包括文字, 空格, 换行</p></blockquote><h4 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h4><h5 id="获取父级节点-父级节点-parentNode"><a href="#获取父级节点-父级节点-parentNode" class="headerlink" title="获取父级节点:  父级节点 parentNode"></a>获取父级节点:  父级节点 parentNode</h5><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;erweima&quot;</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> erweima = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.erweima&#x27;</span>);</span><br><span class="line"><span class="comment">// var box = document.querySelector(&#x27;.box&#x27;);</span></span><br><span class="line">erweima.<span class="property">parentNode</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(erweima.<span class="property">parentNode</span>); <span class="comment">//可以获取到div这个元素</span></span><br></pre></td></tr></table></figure><p>注意: 得到的是离元素最近的父级节点(亲爸爸), 如果找不到父节点 则返回为null</p></blockquote><h5 id="获取子级节点element-children"><a href="#获取子级节点element-children" class="headerlink" title="获取子级节点element.children[*]"></a>获取子级节点element.children[*]</h5><blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取ul下面的所有li</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DOM提供的方法</span></span><br><span class="line">     <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">     <span class="comment">//var lis=ul.querySelectorAll(&#x27;li&#x27;);</span></span><br></pre></td></tr></table></figure><p>现在利用子节点获取ul的li</p><blockquote><p>已得到的父节点.childNodes(标准)</p><p>ul.childNodes<br><strong>会得到所有的子节点 包括元素节点 文本节点(换行)等等</strong><br>如果只想要获得里面的元素节点, 则需要专门处理. 所以我们一边不提倡使用childNodes</p></blockquote><blockquote><p><strong>[常用]</strong>—-已得到父元素节点.children(非标准)</p><p><strong>获取所有的子元素节点</strong>——<em><strong>实际开发常用</strong></em><br>ul.children</p></blockquote></blockquote><blockquote><p><strong>子节点:获取第一个子元素和最后一个子元素</strong></p><blockquote><ul><li><p>parentNode.firstChild</p><p>返回第一个子节点, 找不到则返回null.同样也是包含所有的节点 不管是文本节点  还是元素节点等</p></li><li><p>parentNode.lastChild</p></li></ul></blockquote><blockquote><p>parentNode.firstElementChild    返回第一个子元素节点</p><p><code>console.log(ol.firstElementChild);</code>  可以拿到第一个li元素</p></blockquote><blockquote><p>parentNode.lastElementChild   返回最后一个子元素节点</p><p><code>console.log(ol.lastElementChild);</code>  可以拿到最后一个li元素</p></blockquote></blockquote><p><strong>实际开发的写法(照顾兼容性)</strong></p><p>返回第一个子元素 <code>ol.children[0]</code></p><p>返回最后一个子元素 <code>console.log(ol.children[3]); // li4</code></p><p>返回最后一个子元素, 但是不确定有多少个子元素 <code> console.log(ol.children[ol.children.length - 1]); // li4</code></p><blockquote><p>案例:新浪网的下拉菜单</p><p><img src="/2022/03/31/JS-JSWeb-2/Snipaste_2022-03-31_20-48-53.png"></p><p>分析</p><p>① 导航栏里面的li 都要有鼠标经过效果，所以需要循环注册鼠标事件<br>② 核心原理： 当鼠标经过li 里面的 第二个孩子 ul 显示， 当鼠标离开，则ul 隐藏</p></blockquote><h5 id="兄弟节点-node-nextSibling"><a href="#兄弟节点-node-nextSibling" class="headerlink" title="兄弟节点 node.nextSibling"></a>兄弟节点 node.nextSibling</h5><blockquote><p>node.nextSibling</p></blockquote><p>返回当前元素的下一个兄弟节点,找不到返回null.<br>同样包含所有的节点</p><p><code>      console.log(div.nextSibling); //#text 换行</code></p><blockquote><p>node.previousSibling</p></blockquote><p>上一个兄弟节点<br><code> console.log(div.previousSibling); //#text 换行</code></p><blockquote><p>node.nextElementSibling</p></blockquote><p>下一个兄弟元素节点<br><code>console.log(div.nextElementSibling);// 得到span元素</code></p><blockquote><p>node.previousElementSibling</p></blockquote><p>上一个兄弟元素节点</p><blockquote><p> 兼容性IE9  封装一个函数解决</p></blockquote><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><blockquote><p>语法</p></blockquote><p><code>document.createElement(&#39;tagName&#39;)</code></p><blockquote><p>说明</p></blockquote><p>这个方法创建由tagName指定的HTML元素.应为这些元素原先不存在, 是根据我们的需求动态生成的, 所以我们也称为创建元素节点.</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实施</p></blockquote><p><code>var li = document.createElement(&#39;li&#39;);</code></p><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><blockquote><p>追加元素</p></blockquote><p><code>node.appendChild(child)</code></p><p>说明:</p><p>这个方法将一个节点添加到指定父节点的子节点列表末尾.类似于css里面的after伪元素.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ul =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">ul.<span class="title function_">appendChild</span>(li);</span><br></pre></td></tr></table></figure><blockquote><p>追加元素到指定位置</p></blockquote><p><code>node.insertBefore(child, 指定元素)</code></p><p>说明:</p><p>将一个节点添加到父节点的指定子节点的前面.类似与css里面的before伪元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lili = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">ul.<span class="title function_">insertBefore</span>(lili,ul.<span class="property">children</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p><strong>因此 我们想要页面添加一个元素:</strong></p><p><strong>1.创建元素,</strong>  </p><ol start="2"><li><strong>添加元素</strong></li></ol><blockquote><p>案例:简单版发布浏览案例</p></blockquote><p>分析: </p><p>① 核心思路： 点击按钮之后，就动态创建一个li，添加到ul 里面。<br>② 创建li 的同时，把文本域里面的值通过li.innerHTML 赋值给 li<br>③ 如果想要新的留言后面显示就用 appendChild 如果想要前面显示就用insertBefore</p><p>实施:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.注册事件</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (text.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;你没有输入内容&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//(1)创建元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 现有li 才能赋值</span></span></span><br><span class="line"><span class="language-javascript">            li.<span class="property">innerHTML</span> = text.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//(2)添加元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// ul.appendChild(li); //在后面追加留言</span></span></span><br><span class="line"><span class="language-javascript">            ul.<span class="title function_">insertBefore</span>(li,ul.<span class="property">children</span>[<span class="number">0</span>])  <span class="comment">//最新的留言 最前面显示</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>大姐姐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>大哥哥<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>小弟弟<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>获取元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除元素  node.removeChild(child);</p><p><code>        ul.removeChild(ul.children[0]);  //能够删除</code></p><p>说明: 删除父元素里面的一个子元素</p></li><li><p>点击按钮 一次  删除里面的孩子</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ul.<span class="property">children</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>  <span class="comment">//如果里面的li没有了 则禁用按钮</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ul.<span class="title function_">removeChild</span>(ul.<span class="property">children</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例:删除留言</p></li></ol><h4 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h4><p>语法:</p><p><code>node.cloneNode()</code>  <strong>括号为空或者false 则是浅拷贝 只复制标签  不复制内容</strong></p><p><code>node.cloneNode(true);</code>  <strong>括号为true 则是深拷贝 复制标签与子内容</strong></p><p>说明: </p><p>返回调用该方法的节点的第一个副本. 克隆节点&#x2F;拷贝节点</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊大<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>光头强<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> ul =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">    <span class="comment">//1. node.cloneNode(); 括号为空或者false 则是浅拷贝 只复制标签  不复制内容</span></span><br><span class="line">    <span class="comment">//1. node.cloneNode(true); 括号为true 则是深拷贝 复制标签与子内容</span></span><br><span class="line">    <span class="keyword">var</span> lili = ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">    ul.<span class="title function_">appendChild</span>(lili); <span class="comment">//追加一个li</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="案例-动态生成表格"><a href="#案例-动态生成表格" class="headerlink" title="案例:动态生成表格"></a>案例:动态生成表格</h4><p>分析</p><p>① 因为里面的学生数据都是动态的，我们需要js 动态生成。 这里我们模拟数据，自己定义好数据。 数据我们采取对象形式存储。<br>② 所有的数据都是放到tbody里面的行里面。<br>③ 因为行很多，我们需要循环创建多个行（对应多少人）<br>④ 每个行里面又有很多单元格（对应里面的数据），我们还继续使用循环创建多个单元格，并且把数据存入里面（双重for循环）<br>⑤ 最后一列单元格是删除，需要单独创建单元格。<br>⑥ 最后添加删除操作，单击删除，可以删除当前行。</p><h4 id="三种动态创建元素区别"><a href="#三种动态创建元素区别" class="headerlink" title="三种动态创建元素区别"></a>三种动态创建元素区别</h4><blockquote><p>document.write</p></blockquote><p>直接在js中 写 document.write(‘<div>123</div>‘)<br>是直接讲内容写入页面的内容流, 但是文档流执行完毕, 会导致页面重绘.</p><blockquote><p>element.innerHTML</p></blockquote><p>示例: 追加100个相同的a链接</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   for (var i = 0; i &lt;= 100; i++) &#123;</span><br><span class="line">   inner.innerHTML += &#x27;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种速度很慢</p><p>解决方案: 采用数组形式拼接, 但是结构稍微复杂  稍快</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;create&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr = [];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        arr.<span class="title function_">push</span>(<span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>);  <span class="comment">//给数组追加100个a链接 </span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    inner.<span class="property">innerHTML</span> = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">//join 数组转为字符串   &#x27;&#x27;内是数组内数据的分隔符  这里不加</span></span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>document.createElement</p></blockquote><p>大量创建标签  用createElement<br>结构清晰  较快</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> create = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.create&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);  <span class="comment">//先创建a</span></span><br><span class="line">    create.<span class="title function_">appendChild</span>(a);  <span class="comment">//再选择要添加的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 在不同浏览器下, 通过数组方式的innerHTML方法效率要比createElement高</p><h3 id="DOM重点核心"><a href="#DOM重点核心" class="headerlink" title="DOM重点核心"></a>DOM重点核心</h3><h4 id="DOM说明"><a href="#DOM说明" class="headerlink" title="DOM说明"></a>DOM说明</h4><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言(HTML或者XML）的标准编程接口。</p><blockquote><p> 作用</p></blockquote><ol><li>对于JavaScript，为了能够使JavaScript操作HTML，JavaScript就有了一套自己的dom编程接口。</li><li>对于HTML，dom使得html形成一棵dom树. 包含 文档、元素、节点</li></ol><blockquote><p> 注意</p></blockquote><p>我们获取过来的DOM元素是一个对象（object），所以称为 文档对象模型</p><h4 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h4><blockquote><p>说明</p></blockquote><p>关于dom操作，我们主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。</p><blockquote><p>创建</p></blockquote><ol><li>document.write</li><li>innerHTML</li><li>createElement</li></ol><blockquote><p>增加</p></blockquote><ol><li>appendChild 后面添加</li><li>insertBefore  前面添加</li></ol><blockquote><p>删除</p></blockquote><ol><li>removeChild</li></ol><blockquote><p>修改</p></blockquote><p>主要修改dom元素, dom元素的内容, 属性, 表单的值</p><ol><li>修改元素属性： src、href、title等</li><li>修改表单元素： value、type、disabled等</li><li>修改元素样式： style、className</li></ol><blockquote><p>查询</p></blockquote><ol><li><del>DOM提供的API 方法： getElementById、getElementsByTagName 古老用法 不太推荐</del></li><li><strong>H5提供的新方法： querySelector、querySelectorAll 提倡</strong></li><li><strong>利用节点操作获取元素： 父(parentNode)、子(children)、兄(previousElementSibling、nextElementSibling) 提倡</strong></li></ol><blockquote><p>属性操作</p></blockquote><p>主要针对于自定义属性。</p><ol><li>setAttribute：设置dom的属性值</li><li>getAttribute：得到dom的属性值</li><li>removeAttribute移除属性</li></ol><blockquote><p>事件操作</p></blockquote><p>给元素注册事件， 采取 事件源.事件类型 &#x3D; 事件处理程序<br>鼠标事件</p><h2 id="DOM事件高级"><a href="#DOM事件高级" class="headerlink" title="DOM事件高级"></a>DOM事件高级</h2><h3 id="注册事件-绑定事件-的方法"><a href="#注册事件-绑定事件-的方法" class="headerlink" title="注册事件(绑定事件)的方法"></a>注册事件(绑定事件)的方法</h3><blockquote><p>概述</p></blockquote><p>给元素添加事件</p><blockquote><p>方式一: 传统注册事件</p></blockquote><p>利用on开头的事件onclick</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;alert(&#x27;hi~&#x27;)&quot;</span>&gt;&lt;/button&gt;</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>特点:注册事件的唯一性</p><p>同一个元素同一个事件只能设置一个处理函数, 最后注册的处理函数将会覆盖前面注册的处理函数</p><blockquote><p>(推荐)方式二: 方法监听注册方式</p></blockquote><p>w3c标准 推荐方法</p><p>addEventListener()       它是一个方法</p><p>特点:同一个元素同一个事件可以注册多个监听器</p><h4 id="addEventListener-事件监听方式-重点"><a href="#addEventListener-事件监听方式-重点" class="headerlink" title="addEventListener 事件监听方式(重点)"></a>addEventListener 事件监听方式(重点)</h4><blockquote><p>语法</p></blockquote><p><code>eventtarget.addEventListener(type, listener[, useCapture])</code></p><p>type: </p><p>​        事件类型字符串,名字要加引号, 比如click, mouseover, 注意这里不要带on</p><p>listener: </p><p>​    事件处理函数, 事件发生时, 会调用该监听函数</p><p>useCapture:</p><p>​    可选参数, 是一个布尔值, 默认是false. 学完DOM事件流后,我们再进一步学习</p><p>eventTarget.addEventListener()方法将指定的监听器注册到eventTarget(目标对象)上, 当该对象触发指定的事件时, 就会执行事件处理函数</p><blockquote><p>实例</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;22&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><ol><li>事件类型要加引号</li><li>listener 写在括号里面</li></ol><blockquote><p>好处</p></blockquote><p>同一个元素可以添加多个侦听器(事件处理程序), 只要触发这个事件,  多个事件处理程序会依次执行</p><p>完全没用  (了解):attachEvent 事件监听方式</p><h3 id="删除绑定的事件"><a href="#删除绑定的事件" class="headerlink" title="删除绑定的事件"></a>删除绑定的事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divs=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br></pre></td></tr></table></figure><blockquote><p>传统注册事件的删除</p></blockquote><p><code>evenTarget.onclick = null</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">    divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法监听注册事件的删除</p></blockquote><p><code>eventTarget.removeEventListener(type, listener[,useCapture]</code></p><p>注意: 要删除的话,建立函数的时候必须是独立函数, 才能指定到要删除的函数</p><blockquote><p>实施</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">divs[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,fn)  <span class="comment">//里面的fn不需要调用加小括号</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;   <span class="comment">//fn是函数名  你不记得了吗?</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">    divs[<span class="number">1</span>].<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>事件流描述的是从页面中接收事件的顺序。</p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件</p><p>比如我们给一个div 注册了点击事件：</p><p>​    DOM 事件流分为3个阶段：</p><ol><li>侦听阶段:  从父级到子级的元素  依次监听鼠标的点击动作</li><li>当前目标阶段:   当前目标绑定点击事件  则触发绑定的点击事件</li><li>冒泡阶段: 从目标往回走,<br>要么有1—2<br>要么就是2—-3</li></ol><blockquote><p>事件冒泡</p></blockquote><p>IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过</p><blockquote><p>事件捕获</p></blockquote><p>网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。</p><blockquote><p>代码验证</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        注意</p><ol><li>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</li><li>onclick 和 attachEvent（ie） 只能得到冒泡阶段。</li></ol><p><strong>验证捕获阶段</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span><br><span class="line">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span><br><span class="line">        &#125;, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span><br><span class="line">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span><br><span class="line">        &#125;, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//先弹出father</span></span><br><span class="line"><span class="comment">//后弹出son</span></span><br></pre></td></tr></table></figure><p>捕获阶段 如果<strong>addEventListener 第三个参数是 true</strong> 那么则处于捕获阶段  document -&gt; html -&gt; body -&gt; father -&gt; son</p><p><strong>验证冒泡阶段</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span><br><span class="line">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span><br><span class="line">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="comment">//先弹出son</span></span><br><span class="line"><span class="comment">//后弹出father</span></span><br></pre></td></tr></table></figure><p>冒泡阶段 如果<strong>addEventListener 第三个参数是 false</strong> <strong>或者 省略</strong> 那么则处于冒泡阶段  son -&gt; father -&gt;body -&gt; html -&gt; document</p><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><h4 id="事件对象概述与使用"><a href="#事件对象概述与使用" class="headerlink" title="事件对象概述与使用"></a>事件对象概述与使用</h4><blockquote><p>官方解释</p></blockquote><ul><li>event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态。</li><li>简单理解：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象</li><li>event，它有很多属性和方法。</li></ul><blockquote><p>语法: 填在执行函数的参数中</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventTarget.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;&#125; </span><br><span class="line">eventTarget.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;&#125;）</span><br></pre></td></tr></table></figure><blockquote><p>作用</p></blockquote><p>通过该对象, 我们可以知道</p><ol><li>谁绑定了这个事件。</li><li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</li><li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</li></ol><p>注意: 这个 event 就是事件对象，我们还喜欢的写成 e  少evt</p><blockquote><p>实例</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"> <span class="comment">//  div.onclick = function (e) &#123;</span></span><br><span class="line"> <span class="comment">//    console.log(e);  //PointerEvent</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"> div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(event); <span class="comment">// PointerEvent</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h4 id="事件对象的常见属性和方法"><a href="#事件对象的常见属性和方法" class="headerlink" title="事件对象的常见属性和方法"></a>事件对象的常见属性和方法</h4><blockquote><p><strong>e.target</strong></p></blockquote><p>返回触发事件的对象&#x2F;&#x2F; 返回的是触发事件的对象(元素) 标准</p><p>与this的区别:  </p><ul><li>​            e.target点击了哪个元素　就返回哪个元素</li><li>​            this是  哪个元素绑定了这个点击事件 那么就返回谁</li></ul><p>实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1.e.target 返回的是触发事件的对象(元素)</span></span><br><span class="line">    <span class="comment">// 区别:e.target点击了哪个元素　就返回哪个元素</span></span><br><span class="line">    <span class="comment">//　this是  哪个元素绑定了这个点击事件 那么就返回谁</span></span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>); <span class="comment">//div123</span></span><br><span class="line">    &#125;)  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ul =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">    ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;  <span class="comment">//(利用了事件委托)</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//ul       我们给ul绑定了事件  那么this 就指向ul</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);  <span class="comment">//li     e.target指向我们点击的那个对象 谁出发了这个事件 我们点击的是li  e.target指向的就是li</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>e.type</strong></p></blockquote><p>返回事件的类型  比如click mouseover 不带on</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, fn);</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, fn);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">type</span>); <span class="comment">//返回事件类型 click /mouseover  / mouseout</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><del>e.cancelBuble</del></p></blockquote><p>该属性阻止冒泡  非标准  ie6-8</p><blockquote><p><del>e.returnValue</del></p></blockquote><p>该属性 阻止默认事件(默认行为) ,  <strong>非标准  ie6-8使用</strong>  比如不让链接跳转</p><blockquote><p><strong>e.preventDefault()</strong></p></blockquote><p><strong>该方法 阻止默认事件(默认行为)  标准  比如不让链接跳转</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p align= "center" >监听事件下的写法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();  <span class="comment">// a链接没有跳转  dom标准写法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p align ="center">传统注册事件的方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 普通浏览器   方法</span></span><br><span class="line">    e.<span class="title function_">preventDefault</span>();  </span><br><span class="line">    <span class="comment">//低版本浏览器  属性</span></span><br><span class="line">    e.<span class="property">returnValue</span>;</span><br><span class="line">    <span class="comment">//我们可以利用利用 return false 也能阻止默认行为  特点:retur后面的代码就不执行了  而且只限于传统的注册方式</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p><strong>e.stopPropagation()  (实际开发&#x2F;面试问题)</strong></p></blockquote><p><strong>阻止冒泡  标准</strong></p><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><blockquote><p>事件冒泡</p></blockquote><p>开始时,由最具体的元素接收, 然后逐级向上传播到DOM最顶层节点.<br>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</p><blockquote><p><strong>做法</strong>:e.stopPropagation()</p></blockquote><p>标准写法</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 常见事件对象的属性和方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 阻止冒泡  dom 推荐的标准 stopPropagation() </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">stopPropagation</span>(); <span class="comment">// 只点击son  则father与document 都不会弹出来了</span></span></span><br><span class="line"><span class="language-javascript">            e.<span class="property">cancelBubble</span> = <span class="literal">true</span> ; <span class="comment">// 兼容写法</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件委托-代理-委派"><a href="#事件委托-代理-委派" class="headerlink" title="事件委托(代理,委派)"></a>事件委托(代理,委派)</h4><blockquote><p>情景</p></blockquote><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。生活中有如下场景：<br>咱们班有100个学生， 快递员有100个快递， 如果一个个的送花费时间较长。同时每个学生领取的时候，也需<br>要排队领取，也花费时间较长，何如？<br>解决方案： 快递员把100个快递，委托给班主任，班主任把这些快递放到办公室，同学们下课自行领取即可。<br>优势： 快递员省事，委托给班主任就可以走了。 同学们领取也方便，因为相信班主任</p><blockquote><p>实际问题</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应该有弹框在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应该有弹框在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应该有弹框在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应该有弹框在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应该有弹框在手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击每个 li 都会弹出对话框，以前需要给每个 li 注册事件，是非常辛苦的，</p><p>而且访问 DOM 的次数越多，这就会延长整个页面的交互就绪时间。</p><p>解决:</p><blockquote><p>介绍</p></blockquote><p>事件委托也称为事件代理， 在 jQuery 里面称为事件委派</p><blockquote><p>事件委托的原理(面试问题)</p></blockquote><ul><li>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。</li><li>以上案例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上，ul 有注册事件，就会触发事件监听器。</li></ul><blockquote><p> 作用</p></blockquote><p>我们只操作了一次 DOM ，提高了程序的性能</p><blockquote><p>实例:  父级添加监听器  子级点击有弹窗</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//事件委托的核心原理: 给父节点添加侦听器, 利用事件冒泡影响每一个子节点</span></span><br><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;知否知否，点我应有弹框在手！&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>实例: 点击子级变色效果</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//事件委托的核心原理: 给父节点添加侦听器, 利用事件冒泡影响每一个子节点</span></span><br><span class="line">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">    ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">// alert(&#x27;知否知否，点我应有弹框在手！&#x27;);</span></span><br><span class="line">        <span class="comment">//e.target 这个可以得到我们点击的对象</span></span><br><span class="line">        e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;  <span class="comment">//点击的子级变粉色</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h4><blockquote><p>鼠标事件</p></blockquote><p>onclick<br>    鼠标点击左键触发<br>onmouseover<br>    鼠标经过触发<br>onmouseout<br>    鼠标离开触发<br>onfocus<br>    获得鼠标焦点触发<br>onblur<br>    失去鼠标焦点触发<br>onmousemove<br>    鼠标移动触发<br>onmouseup<br>    鼠标弹起触发<br>onmousedown<br>    鼠标按下触发</p><ol><li>禁用鼠标右键菜单</li></ol><p>​            contextmenu主要控制应该如何显示上下文菜单, 主要取决于程序员取消默认的上下文菜单</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>禁止鼠标选中（selectstart 开始选中）</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>鼠标事件对象</p></blockquote><p>event对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象MouseEvent 和键盘事件对象KeyboardEvent</p><p>e.clientX<br>    返回鼠标相对于浏览器窗口可视区的X坐标<br>    用户可视区来讲<br>e.clientY<br>    返回鼠标相对于浏览器窗口可视区的Y坐标<br>    用户可视区来讲</p><p><strong>e.pageX</strong>  (常用)<br>    返回鼠标相对于文档页面的X坐标  ie9+<br>    相对于文档页面的左边距离</p><p><strong>e.pageY</strong>   (常用)<br>    返回鼠标相对于文档页面的Y坐标  ie9+<br>    相对文档页面的顶部的距离</p><p>e.screenX<br>    返回鼠标相对于电脑屏幕的X坐标<br>e.screenY<br>    返回鼠标相对于电脑屏幕的Y坐标</p><blockquote><p>案例:跟随鼠标的天使</p></blockquote><p>分析: </p><p>① 鼠标不断的移动，使用鼠标移动事件： mousemove<br>② 在页面中移动，给document注册事件<br>③ 图片要移动距离，而且不占位置，我们使用绝对定位即可<br>④ 核心原理： 每次鼠标移动，我们都会获得最新的鼠标坐标， 把这个x和y坐标做为图片的top和left 值就可以移动图片</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/angel.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1. mousemove只要我们鼠标移动1px 就会触发这个事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(1);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2.核心原理： 每次鼠标移动，我们都会获得最新的鼠标坐标， 把这个x和y坐标做为图片的top和left 值就可以移动图片</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = e.<span class="property">pageX</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = e.<span class="property">pageY</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x坐标是&#x27;</span> + x, <span class="string">&#x27;y坐标是&#x27;</span> + y);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//3 . 千万不要忘记给left 和top 添加px 单位</span></span></span><br><span class="line"><span class="language-javascript">            pic.<span class="property">style</span>.<span class="property">left</span> = x - <span class="number">50</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            pic.<span class="property">style</span>.<span class="property">top</span> = y - <span class="number">40</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="常用的键盘事件-KeyboardEvent-及键盘事件对象"><a href="#常用的键盘事件-KeyboardEvent-及键盘事件对象" class="headerlink" title="常用的键盘事件(KeyboardEvent)及键盘事件对象"></a>常用的键盘事件(KeyboardEvent)及键盘事件对象</h4><blockquote><p>键盘事件</p></blockquote><p><strong>onkeyup</strong><br>    某个键盘被松开时触发<br><strong>onkeydown</strong><br>    某个键盘被按下时触发<br><del>onkeypress</del><br>    某个键盘按键被按下时触发,  但是不识别功能键比如ctrl shift 箭头等</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我演起来了&#x27;</span>);  <span class="comment">//确实可以</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈哈&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;键盘按下才会触发keydown&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;键盘按下才会触发keypress&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意:</p><p>三个事件的执行顺序</p><ol><li>keydown</li><li>keypress</li><li>keyup</li></ol><blockquote><p>键盘事件对象  e.keyCode</p></blockquote><p>键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">keyCode</span>); <span class="comment">//65</span></span><br><span class="line">    <span class="comment">//1. 我们的keyup和keydown事件不区分字母大小写 a和A 得到的都是65;</span></span><br><span class="line">    <span class="comment">//2. 我们的keypress事件区分字母大小写 a和A 得到的</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;keypress&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">keyCode</span>); <span class="comment">//  a 97   A65</span></span><br><span class="line">    <span class="comment">//2. 我们的keypress事件区分字母大小写 a和A 得到的 A 97 a 65</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>用来判断用户按下了哪个按键</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(e.<span class="property">keyCode</span> ===<span class="number">65</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;您按下的是A/a键哦&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你按下的不是A/a键&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>onkeydown 和 onkeyup 不区分字母大小写，onkeypress 区分字母大小写。<br><strong>在我们实际开发中，我们更多的使用keydown和keyup</strong>， 它能识别所有的键（包括功能键）<br>Keypress 不识别功能键，但是keyCode属性能区分大小写，返回不同的ASCII值</p><blockquote><p>案例:模拟京东按键输入内容</p></blockquote><p>要求: </p><p>当我们按下 s 键， 光标就定位到搜索</p><p>分析: </p><p>① 核心思路： 检测用户是否按下了s 键，如果按下s 键，就把光标定位到搜索框里面<br>② 使用键盘事件对象里面的keyCode 判断用户按下的是否是s键<br>③ 搜索框获得焦点： 使用 <strong>js 里面的 focus()</strong> 方</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> search = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;  <span class="comment">//用keydwon不太合适  会把s也输入进去</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">keyCode</span>); <span class="comment">//83</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span>(e.<span class="property">keyCode</span> ===<span class="number">83</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            search.<span class="title function_">focus</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>案例:模拟京东快递单号查询</p></blockquote><p>要求: 当我们在文本框中输入内容时，文本框上面自动显示大字号的内容。</p>]]></content>
    
    
    <summary type="html">Web APAIs里面的DOM操作, DOM事件高级</summary>
    
    
    
    <category term="JavaScript" scheme="http://l1562007999.github.io/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://l1562007999.github.io/tags/JS/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="DOM" scheme="http://l1562007999.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>JS-WebAPI-DOM-1</title>
    <link href="http://l1562007999.github.io/2022/03/31/JS-JSWeb-1/"/>
    <id>http://l1562007999.github.io/2022/03/31/JS-JSWeb-1/</id>
    <published>2022-03-31T05:43:10.000Z</published>
    <updated>2022-04-09T04:50:28.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-API-1"><a href="#Web-API-1" class="headerlink" title="Web API(1)"></a>Web API(1)</h1><h2 id="Web-APIs-和JS基础的关联性"><a href="#Web-APIs-和JS基础的关联性" class="headerlink" title="Web APIs 和JS基础的关联性"></a>Web APIs 和JS基础的关联性</h2><p>JS的组成: </p><p>ECMAScript<br>DOM<br>BOM</p><h1 id="API和Web-API"><a href="#API和Web-API" class="headerlink" title="API和Web API"></a>API和Web API</h1><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>Application Programming Interface 应用成语编程接口<br>是一些预先定义的函数, 目的是提供应用程序与开发人员基于某软件或硬件得以访问一组列程的能力,而无需访问源代码, 或理解内部工作机制的细节</p><h3 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h3><p>介绍:</p><p>是浏览器提供的一套<strong>操作浏览器功能</strong>和<strong>页面元素</strong>的API(DOM和BOM)<br>现阶段我们主要针对浏览器讲解常用的API, 做浏览器的交互效果</p><p>Web APIs: </p><p>Web API 一般都有输入和输出(函数的传参和返回值), Web API很多都是方法(函数).</p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="DOM基础"><a href="#DOM基础" class="headerlink" title="DOM基础"></a>DOM基础</h2><h3 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h3><p>是W3C组织推荐的处理可扩展标记语言(html或者xml)的标准编程接口</p><p>可以改变网页的内容,结构和样式</p><p>DOM树 文档</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201804%2F20180407204211007128.gif&refer=http%3A%2F%2Fimage.bubuko.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1651297952&t=cedb67c7e95e0d3787a5b147c625be1f" alt="点击查看图片来源"></p><p>解释:</p><p>文档:  一个页面就是一个文档, DOM中使用document表示</p><p>元素: 页面中所有标签都是元素, DOM中使用element表示</p><p>节点: 网页中的所有内容都是节点(标签,属性,文本,注释等)  使用node表示</p><p>DOM把以上内容都看做是对象</p><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><h3 id="根据ID获取-getElementById"><a href="#根据ID获取-getElementById" class="headerlink" title="根据ID获取:getElementById()"></a>根据ID获取:getElementById()</h3><blockquote><p>使用getElementById()方法可以获取带有ID的元素对象</p></blockquote><p><code>&lt;div id=&quot;time&quot;&gt;2019-9-9&lt;/div&gt;</code></p><p>说明</p><pre><code>    //因为我们文档页面从上往下加载, 所以得先有标签    //驼峰命名法    //参数:大小写敏感的字符串 加引号    //返回的是一个对象</code></pre><p>实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;time&#x27;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timer); <span class="comment">// &lt;div id=&quot;time&quot;&gt;2019-9-9&lt;/div&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer); <span class="comment">//object</span></span><br><span class="line"><span class="comment">//console.dir() 打印我们返回元素对象  更好的查看里面的属性和方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(timer)</span><br></pre></td></tr></table></figure><h3 id="根据标签名获取-getElementsByTagName"><a href="#根据标签名获取-getElementsByTagName" class="headerlink" title="根据标签名获取:getElementsByTagName"></a>根据标签名获取:getElementsByTagName</h3><blockquote><p>获取文档中指定标签的所有这个标签元素</p></blockquote><p>说明:</p><ul><li>使用**getElementByTagName()**方法 可以返回带有指定标签的对象的集合</li><li>返回的是 获取元素对象的集合   以伪数组的形式存储的</li></ul><p>实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">        &lt;ul&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> lis =<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis); <span class="comment">//  [li, li, li, li, li]</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]); <span class="comment">//获取第一个li</span></span><br></pre></td></tr></table></figure><blockquote><p> 遍历—把拿到的所有li取出来</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>注意</p><p>因为得到的是一个对象的集合, 所以我们想要操作里面的元素就需要遍历<br>得到的元素对象是动态的<br>如果页面中只有一个li  返回的还是为数组的形式<br>如哦页面中没有这个元素  返回的是一个空的伪数组 [  ]  长度为0</p><blockquote><p> 获取某个元素(父元素)内部所有指定标签名的子元素</p></blockquote><p><strong>element.getElementsByTagName(‘标签名’)</strong></p><p>例如 获得ol下的li,  而不是ul下的li</p><p>问题:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var ol = document.getElementsByTagName(&#x27;ol&#x27;); // [ol]  这是一个伪数组</span></span><br><span class="line"><span class="comment">// console.log(ol.getElementsByTagName(&#x27;li&#x27;)); // 错误  ol是伪数组  不能执行对象才有的方法;</span></span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将html中的ol标签增加id属性;</span></span><br><span class="line"><span class="keyword">var</span> ol=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ol&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>));  <span class="comment">//[li, li, li, li, li, li]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ol);  <span class="comment">// 获取父元素本身</span></span><br></pre></td></tr></table></figure><h3 id="重点html5-根据类名-document-getElementsByClassName-‘类名’"><a href="#重点html5-根据类名-document-getElementsByClassName-‘类名’" class="headerlink" title="(重点html5)根据类名:document.getElementsByClassName(‘类名’)"></a>(重点html5)根据类名:document.getElementsByClassName(‘类名’)</h3><p>根据类名返回元素对象集合</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boxs);</span><br></pre></td></tr></table></figure><h3 id="重点html5-querySelector"><a href="#重点html5-querySelector" class="headerlink" title="(重点html5)querySelector"></a>(重点html5)querySelector</h3><p>返回指定选择器的第一个元素  切记  <strong>里面的选择器需要加符号</strong> .box #nav</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstBox);</span><br><span class="line"><span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nav&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nav);</span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(li);</span><br></pre></td></tr></table></figure><h3 id="重点html5-querySelectorAll"><a href="#重点html5-querySelectorAll" class="headerlink" title="(重点html5)querySelectorAll()"></a>(重点html5)querySelectorAll()</h3><p>返回指定选择器的所有元素对象集合</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> allBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allBox);</span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span><br></pre></td></tr></table></figure><h3 id="特殊元素获取"><a href="#特殊元素获取" class="headerlink" title="特殊元素获取"></a>特殊元素获取</h3><p>获取body元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyEle = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bodyEle);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">dir</span>(bodyEle);</span><br></pre></td></tr></table></figure><p>获取html元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlEle = <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(htmlEle);</span><br></pre></td></tr></table></figure><h2 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>JS使我们能有能力创建动态页面, 而事件是可以被JS侦测到的行为</p><p>简单理解 :触发—-响应机制</p><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><blockquote><p>事件源</p></blockquote><p>事件被触发对象</p><p>var btn &#x3D; document.getElementById(‘btn’);</p><blockquote><p> 事件类型</p></blockquote><p>如何触发, 什么事件  </p><p>比如鼠标点击(onclick), 还是鼠标经过  还是键盘按下</p><blockquote><p>事件处理程序</p></blockquote><p>格式: 被赋予元素的变量名.事件类型&#x3D; function(  )  { 要达到的效果  }</p><p>通过一个函数赋值的方式  完成</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Sammy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&#x27;你好&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="事件执行的步骤"><a href="#事件执行的步骤" class="headerlink" title="事件执行的步骤"></a>事件执行的步骤</h3><ol><li>获取事件源</li><li>注册事件(绑定事件)</li><li>添加事件处理程序(采用函数赋值的方式)</li></ol><p>实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被选中了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="利用事件来操作元素"><a href="#利用事件来操作元素" class="headerlink" title="利用事件来操作元素"></a>利用事件来操作元素</h2><h3 id="改变元素的文本"><a href="#改变元素的文本" class="headerlink" title="改变元素的文本"></a>改变元素的文本</h3><blockquote><p>element.innerText</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;当前系统时间&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>某个时间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">//注册事件</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="title function_">getDate</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取系统时间的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//调用当前日期对象</span></span><br><span class="line">    <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> dates = date.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>] <span class="comment">//星期日写在最前面</span></span><br><span class="line">    <span class="keyword">var</span> day = arr[date.<span class="title function_">getDay</span>()];<span class="comment">//利用数组 将数字的星期1换成汉字的星期一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;今天是&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日 &#x27;</span> + day;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷新页面直接显示当前日期</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">p.<span class="property">innerHTML</span> = <span class="title function_">getDate</span>();</span><br></pre></td></tr></table></figure><p>说明</p><p>从起始位置到终止位置的内容, 不识别我们写入的html标签  去除空格与换行</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)  <span class="comment">//非标准</span></span><br><span class="line">div.<span class="property">innerText</span> = <span class="string">&#x27;&lt;strong&gt;今天是:2019&#x27;</span>  <span class="comment">// 不会加粗  &lt;strong&gt;今天是:2019</span></span><br></pre></td></tr></table></figure><blockquote><p>element.innerHTML</p></blockquote><p>起始位置到终止位置的全部内容, 包括html标签, 同时保留空格和换行</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerText</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>); </span><br></pre></td></tr></table></figure><blockquote><p><strong>这以上两个属性是可读写的  可以获取元素里面的内容</strong></p></blockquote><h3 id="常用元素属性操作-修改src-href"><a href="#常用元素属性操作-修改src-href" class="headerlink" title="常用元素属性操作: 修改src, href"></a>常用元素属性操作: 修改src, href</h3><blockquote><p>innerText, innerHTML改变元素内容</p></blockquote><blockquote><p>img.src&#x3D;, </p><p>a.href&#x3D;</p></blockquote><p>案例: 点击更换图片</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;ldh&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;zxy&quot;</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/ldh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;刘德华&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ldh&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> zxy = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;zxy&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//2.注册事件  处理程序</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        zxy.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            img.<span class="property">src</span> = <span class="string">&#x27;images/zxy.jpg&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            img.<span class="property">title</span> = <span class="string">&#x27;张学友&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ldh.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            img.<span class="property">src</span> = <span class="string">&#x27;images/ldh.jpg&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            img.<span class="property">title</span> = <span class="string">&#x27;刘德华&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>案例:分时间显示不同图片, 显示不同问候语</p><p>要求:</p><p>根据不同时间，页面显示不同图片，同时显示不同的问候语。<br>如果上午时间打开页面，显示上午好，显示上午的图片。<br>如果下午时间打开页面，显示下午好，显示下午的图片。<br>如果晚上时间打开页面，显示晚上好，显示晚上的图片。</p><p>分析: </p><p>① 根据系统不同时间来判断，所以需要用到日期内置对象<br>② 利用多分支语句来设置不同的图片<br>③ 需要一个图片，并且根据时间修改图片，就需要用到操作元素src属性<br>④ 需要一个div元素，显示不同问候语，修改元素内容即可</p><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;images/s.gif&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>上午好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//获取元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//得到当前的小时数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> h = date.<span class="title function_">getHours</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//判断小时数 改变图片和文字信息;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (h &lt; <span class="number">12</span> &amp;&amp; h&gt;=<span class="number">6</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        img.<span class="property">src</span> = <span class="string">&#x27;images/s.gif&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;亲,上午好啊,好好写代码&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h &lt; <span class="number">18</span> &amp;&amp; h&gt;=<span class="number">12</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        img.<span class="property">src</span> = <span class="string">&#x27;images/x.gif&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;亲,下午好啊,好好写代码&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        img.<span class="property">src</span> = <span class="string">&#x27;images/w.gif&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;亲,晚上好,好好写代码&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>element.id</p><p>element.alt</p><p>element.title</p></blockquote><h3 id="表单元素的操作"><a href="#表单元素的操作" class="headerlink" title="表单元素的操作"></a>表单元素的操作</h3><p>可以操作如下表单元素的属性:</p><ol><li><p>type</p></li><li><p>value</p></li><li><p>checked</p></li><li><p>selected</p></li><li><p><strong>disabled</strong></p><blockquote><p>element.disabled &#x3D; true&#x2F;false;</p></blockquote><p>案例: 点击按钮禁用</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入内容&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//1.获取元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//2.注册时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            input.<span class="property">value</span>=<span class="string">&#x27;被点击了&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//表单禁用 disabled  我们想要按钮禁用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// btn.disabled = true;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>; <span class="comment">//this指向的是事件函数的调用者  this指向btn</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>案例:仿京东显示隐藏密码明文案例(<strong>作废了  可以通过设置文本框的类型为password</strong>)</p><p>要求:</p><p>点击按钮 将密码切换为文本框, 并可以查看密码明文</p><p>分析</p><ul><li>核心思路: 点击眼睛按钮, 把密码框类型改为文本框就可以看见里面的密码了.</li><li>一个按钮两个状态，点击一次，切换为文本框，继续点击一次切换为密码框</li><li>算法：利用一个flag变量，来判断flag的值，如果是1 就切换为文本框，flag 设置为0，如果是0 就切换为密码框，flag设置为1</li></ul><h3 id="style样式属性的操作"><a href="#style样式属性的操作" class="headerlink" title="style样式属性的操作"></a>style样式属性的操作</h3><p>通过JS修改元素的大小, 颜色, 位置等样式.</p><p>如果样式较少或者功能较简单的情况下 则使用element.style<br>如果要一次修改大量样式, 则用element.className</p><h4 id="element-style-网页行内操作"><a href="#element-style-网页行内操作" class="headerlink" title="element.style   网页行内操作"></a>element.style   网页行内操作</h4><blockquote><p> 实现为行内样式的直接改动,权重很高, 可以立即生效</p></blockquote><p>实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>= <span class="string">&#x27;purple&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">width</span>= <span class="string">&#x27;150px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意:</p><p>JS里面的样式采取驼峰命名大:fontSize, backgroundColor</p><p>JS修改style样式操作, 产生的是行内样式, css权重比较高</p><blockquote><p> 案例:仿淘宝关闭二维码案例</p></blockquote><p>要求: 当鼠标点击二维码关闭按钮的时候，则关闭整个二维码。</p><p>分析:</p><p>核心思路： </p><p>利用样式的显示和隐藏完成， display&#x3D;none 隐藏元素 display&#x3D;block 显示元素<br> 点击按钮，就让这个二维码盒子隐藏起来即可</p><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1.获取元素</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.close-btn&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span><br><span class="line">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        box.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>案例:循环精灵图背景</p></blockquote><p>要求: 可以利用 for 循环设置一组元素的精灵图背景</p><p>分析:<br>① 首先精灵图图片排列有规律的<br>② 核心思路： 利用for循环 修改精灵图片的 背景位置 background-position<br>③ 剩下的就是考验你的数学功底了<br>④ 让循环里面的 i 索引号 * 44 就是每个图片的y坐标</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1.获取元素</span></span><br><span class="line">    <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>); <span class="comment">//取所有的li</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">0</span>; i&lt;lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 让索引号   乘以44  就是每个li 的背景y坐标 index就是y坐标</span></span><br><span class="line">        <span class="keyword">var</span> index = i*<span class="number">44</span>;   </span><br><span class="line">        lis[i].<span class="property">style</span>.<span class="property">backgroundPosition</span> = <span class="string">&#x27;0 -&#x27;</span>+ index +<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>案例:显示隐藏文本框内容</p></blockquote><p>要求: 当鼠标点击文本框时，里面的默认文字隐藏，当鼠标离开文本框时，里面的文字显示。<br>分析<br>    ① 首先表单需要<strong>2个新事件，获得焦点 onfocus 失去焦点 onblur</strong><br>    ② 如果获得焦点， 判断表单里面内容是否为默认文字，如果是默认文字，就清空表单内容<br>    ③ 如果失去焦点， 判断表单内容是否为空，如果为空，则表单内容改为默认文字</p><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1.获取元素</span></span><br><span class="line">    <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">    <span class="comment">//2.注册事件 获取焦点 onfocus</span></span><br><span class="line">    text.<span class="property">onfocus</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;得到了焦点&#x27;);</span></span><br><span class="line">        <span class="keyword">if</span> (text.<span class="property">value</span> ===<span class="string">&#x27;手机&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得焦点 文字颜色变深</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#333&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.注册事件 失去焦点事件 onblur</span></span><br><span class="line">    text.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;失去了焦点&#x27;);</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">value</span>===<span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">value</span>= <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//失去焦点 文字颜色变浅</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#999&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="element-className-引用css中的类-加入到html中"><a href="#element-className-引用css中的类-加入到html中" class="headerlink" title="element.className 引用css中的类, 加入到html中"></a>element.className 引用css中的类, 加入到html中</h4><blockquote><p> 类名样式操作</p></blockquote><p>在<style> 中声明一个.class 样式集合</p><p>在 test.onclick &#x3D; function() {  }  中声明这个className</p><p>这个声明的className会在事件触发时将这个类名加入要修改的元素属性当中</p><p>实例</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//在css中</span><br><span class="line"><span class="selector-class">.change</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;change&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意:</p><p>如果一次性要修改一个元素的很多属性,则可以采用这种方法</p><ol><li>如果样式修改较多，可以采取操作类名方式更改元素样式。</li><li>class因为是个保留字，因此使用className来操作元素类名属性</li><li><strong>className 会直接更改元素的类名，会覆盖原先的类名</strong>。</li></ol><p>如果想要保留原先的类名，我们可以这么做 <strong>多类名选择器</strong>,也就使在修改类名的时候在原有的类名(name1), 追加上要修改的类名name2</p><p>比如:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;name1 name2&#x27;</span>;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name1 name2&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>案例: 密码框格式提示错误信息</p></blockquote><p>分析:</p><p>① 首先判断的事件是表单失去焦点 onblur<br>② 如果输入正确则提示正确的信息颜色为绿色小图标变化<br>③ 如果输入不是6到16位，则提示错误信息颜色为红色 小图标变化<br>④ 因为里面变化样式较多，我们采取className修改样式</p><h3 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3><p>如果有同一组元素，我们想要某一个元素实现某种样式， 需要用到循环的排他思想算法：</p><p>前提:利用循环 给所有按钮加上点击触发事件 设置样式   </p><p>但是在触发样式之前 先遍历一遍所有的按钮 将所有按钮恢复默认样式</p><blockquote><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式 （留下我自己）</li><li>注意顺序不能颠倒，首先干掉全部人(包括自己)，再设置自己</li></ol></blockquote><h3 id="案例-隔行变色"><a href="#案例-隔行变色" class="headerlink" title="案例: 隔行变色"></a>案例: 隔行变色</h3><p>分析:</p><p>① 用到新的鼠标事件 鼠标经过 onmouseover 鼠标离开 onmouseout<br>② 核心思路：鼠标经过 tr 行，当前的行变背景颜色， 鼠标离开去掉当前的背景颜色<br>③ 注意： 第一行（thead里面的行）不需要变换颜色，因此我们获取的是 tbody 里面的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1.获取元素 获取的是tbody里面所有的元素</span></span><br><span class="line">    <span class="keyword">var</span> trs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">    <span class="comment">//2.利用循环  注册事件 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;trs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//3.鼠标经过</span></span><br><span class="line">        trs[i].<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;经过了&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;bg&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//鼠标离开</span></span><br><span class="line">        trs[i].<span class="property">onmouseout</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="案例-表单全选取消"><a href="#案例-表单全选取消" class="headerlink" title="案例: 表单全选取消"></a>案例: 表单全选取消</h3><p>业务需求:</p><ol><li>点击上面全选复选框，下面所有的复选框都选中（全选）</li><li>再次点击全选复选框，下面所有的复选框都不中选（取消全选）</li><li>如果下面复选框全部选中，上面全选按钮就自动选中</li><li>如果下面复选框有一个没有选中，上面全选按钮就不选中</li><li>所有复选框一开始默认都没选中状态</li></ol><p>思路</p><p>① 全选和取消全选做法： 让下面所有<strong>复选框的checked属性</strong>（选中状态） 跟随 全选按钮即可<br>② 下面复选框需要全部选中， 上面全选才能选中做法： 给下面所有复选框绑定点击事件，每次点击，都要循环查看所有单个的复选框是否有没选中的，如果全选中了， 上面全选就显示checked状态。<br>③ </p><h3 id="自定义属性的操作"><a href="#自定义属性的操作" class="headerlink" title="自定义属性的操作:"></a>自定义属性的操作:</h3><p>意思是 我们程序员自己添加的属性</p><h4 id="获取-自定义-属性-element-getAttribute-‘属性’"><a href="#获取-自定义-属性-element-getAttribute-‘属性’" class="headerlink" title="获取(自定义)属性: element.getAttribute(‘属性’)"></a>获取(自定义)属性: element.getAttribute(‘属性’)</h4><p><code> &lt;div id=&quot;demo&quot; index=&quot;1&quot; class=&quot;nav&quot;&gt;&lt;/div&gt;</code></p><blockquote><p>方法一: element.属性</p></blockquote><p><code>console.log(div.id);</code></p><blockquote><p>方法二: element.getAttribute(‘属性’)</p></blockquote><p><code>div.getAttribute(&#39;id&#39;)</code></p><p><strong><code>div.getAttribute(&#39;index&#39;)</code></strong> </p><p><strong>index &#x3D; ‘1’   是一个自定义属性   则只能用getAttribute获得</strong></p><h4 id="设置-自定义-属性值-element-setAttribute-‘属性’-‘值’"><a href="#设置-自定义-属性值-element-setAttribute-‘属性’-‘值’" class="headerlink" title="设置(自定义)属性值: element.setAttribute(‘属性’, ‘值’);"></a>设置(自定义)属性值: element.setAttribute(‘属性’, ‘值’);</h4><blockquote><p>方法一: element.属性 &#x3D; ‘值’      </p></blockquote><p>实现在html中设置内置属性值</p><p><code>div.id = &#39;test&#39;; div.className = &#39;navs&#39;;</code></p><p>class比较特殊, 在用这个方法获取&#x2F;设置某个元素的class属性值的时候 要写:    某元素.className &#x3D; ‘   ‘</p><blockquote><p>方法2: element.setAttribute(‘属性’, ‘值’);</p></blockquote><p>主要针对于自定义属性</p><p><code>       div.setAttribute(&#39;index&#39;, 2); </code>index的属性值会等于2</p><p><code>div.setAttribute(&#39;class&#39;, &#39;footer&#39;);</code>  class的属性值会等于footer</p><h4 id="移除属性-element-removeAttribute-‘属性’"><a href="#移除属性-element-removeAttribute-‘属性’" class="headerlink" title="移除属性: element.removeAttribute(‘属性’);"></a>移除属性: element.removeAttribute(‘属性’);</h4><blockquote><p>element.removeAttribute(‘属性’);</p></blockquote><p><code>div.removeAttribute(&#39;index&#39;);</code></p><h4 id="案例-tab栏切换-重点案例"><a href="#案例-tab栏切换-重点案例" class="headerlink" title="案例:tab栏切换(重点案例)"></a>案例:tab栏切换(重点案例)</h4><p>当鼠标点击上面相应的选项卡（tab），下面内容跟随变化</p><p>案例分析: </p><p>① Tab栏切换有2个大的模块<br>② 上的模块选项卡，点击某一个，当前这一个底色会是红色，其余不变（排他思想） 修改类名的方式<br>③ 下面的模块内容，会跟随上面的选项卡变化。所以下面模块变化写到点击事件里面。<br>④ 规律：下面的模块显示内容和上面的选项卡一一对应，相匹配。<br>⑤ 核心思路： 给上面的tab_list 里面的所有小li 添加自定义属性，属性值从0开始编号。<br>⑥ 当我们点击tab_list 里面的某个小li，让tab_con 里面对应序号的 内容显示，其余隐藏（排他思想）</p><h4 id="H5自定义属性-自定义属性取名标准"><a href="#H5自定义属性-自定义属性取名标准" class="headerlink" title="H5自定义属性(自定义属性取名标准)"></a>H5自定义属性(自定义属性取名标准)</h4><p>目的:<br>是为了保存并使用数据<br>有些数据可以保存到页面中而不用保存到数据库中</p><p>使用方法:  通过getAttribute（‘属性’）获取    但是无法区别自定义属性和内置属性</p><blockquote><p>H5新增自定义属性规定</p></blockquote><p>规定: </p><p>H5规定自定义属性data-开头作为属性名并赋值 : <code>&lt;div data-index = &quot;1&quot;&gt;&lt;/div&gt;</code></p><blockquote><blockquote><p><strong>获取属性的方法一</strong></p><p>依旧使用getAttribute(‘属性名’)</p><p><code>element.setAttribute(&#39;data-index&#39;, 2)</code></p></blockquote><blockquote><p><strong>获取属性的方法二</strong></p><p>html:  <code>&lt;div getTime=&quot;20&quot; data-index=&quot;2&quot; data-list-name=&quot;andy&quot;&gt;&lt;/div&gt;</code></p><p>然后 使用.dataset.    来获取以data- 开头的属性的值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">index</span>); <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;index&#x27;</span>]); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>说明: </p><blockquote><p>dataset 是一个集合, 里面存放了所有以data开头的自定义属性<br>查看一下div 的dataset是一个怎样的集合<br><code>console.log(div.dataset); //&#123;index: &#39;2&#39;, time: &#39;20&#39;&#125;</code></p></blockquote><p>补充说明</p><blockquote><p>如果自定义属性里面有多个-连接的单词. 我们获取的时候采取 驼峰命名法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">listName</span>); <span class="comment">//andy</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;listName&#x27;</span>]); <span class="comment">//andy</span></span><br></pre></td></tr></table></figure></blockquote><p>注意:</p><blockquote><p>!!! 只能获取data-开头的属性名!!! </p><p>兼容性问题ie10</p></blockquote></blockquote></blockquote><hr><p>还有 节点操作 和DOM核心重点 没</p><p>还有 DOM事件高级</p><p>还有BOM</p>]]></content>
    
    
    <summary type="html">包含了DOM中的一些操作 包括 获取元素</summary>
    
    
    
    <category term="JavaScript" scheme="http://l1562007999.github.io/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://l1562007999.github.io/tags/JS/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="DOM" scheme="http://l1562007999.github.io/tags/DOM/"/>
    
    <category term="排他思想" scheme="http://l1562007999.github.io/tags/%E6%8E%92%E4%BB%96%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>JS-JS基础-4</title>
    <link href="http://l1562007999.github.io/2022/03/28/JS-JS%E5%9F%BA%E7%A1%80-4/"/>
    <id>http://l1562007999.github.io/2022/03/28/JS-JS%E5%9F%BA%E7%A1%80-4/</id>
    <published>2022-03-28T02:14:16.000Z</published>
    <updated>2022-04-06T11:12:14.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在JS中, 对象Object是一组无序的相关属性和方法的集合, 所有的事物都是对象, 例如字符串, 数值, 数组, 函数等</p><p>组成: </p><blockquote><ul><li>属性<br>事物的特征, 在对象中用属性来表示</li><li>方法<br>事物的行为, 在对象中用方法来表示</li></ul></blockquote><p>为什么需要对象: </p><p>保存一个值时, 可以使用变量, 保存多个值(一组值)时,, 可以使用数组.</p><p>如果要保存一个人完整的信息呢?</p><p>JS中的对象表达结构更加清晰, 强大</p><p><img src="/2022/03/28/JS-JS%E5%9F%BA%E7%A1%80-4/Snipaste_2022-03-28_10-18-29.png" alt="对象"></p><h2 id="创建对象以及使用对象"><a href="#创建对象以及使用对象" class="headerlink" title="创建对象以及使用对象"></a>创建对象以及使用对象</h2><h3 id="利用字面量创建对象"><a href="#利用字面量创建对象" class="headerlink" title="利用字面量创建对象"></a>利用字面量创建对象</h3><blockquote><p>创建一个空对象</p></blockquote><p><code>var obj = &#123;&#125;; 创建了一个空对象</code></p><p>实例:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">username</span>:<span class="string">&#x27;张三丰&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;   <span class="comment">//方法</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><ol><li>里面的<strong>属性</strong>或者方法我们我们采取<strong>键值对的形式</strong>  属性名: 值,</li><li>多个<strong>属性</strong>或者方法中间用<strong>逗号隔开</strong></li><li><strong>方法</strong>冒号后面跟的是一个匿名函数</li></ol><blockquote><p>使用对象</p></blockquote><ul><li>调用对象的属性(里面的属性值)</li></ul><ol><li><p>调用对象的属性  我们采取     对象名.属性名  的形式  小点.  理解为”的”  对象的属性<br><code>console.log(obj.username);</code></p></li><li><p>第二种方法: 对象名[‘属性名’]</p></li></ol><p>  <strong>在遍历对象中的属性值会用到这个方法</strong></p><p>  <code>console.log(obj[&#39;age&#39;]);</code></p><ul><li>调用对象的方法</li></ul><p>​            调用对象的方法&#x2F;行为  sayHi  对象名.方法名()  就是函数调用(别忘记添加小括号)</p><p>​            <code>obj.sayHi();</code></p><blockquote><p>一些区别</p></blockquote><blockquote><p>变量与对象中的属性</p><p>变量:  单独声明并赋值   使用的时候直接写变量名  单独存在</p><p>对象中的属性:  在对象里面的不需要声明,  使用的时候必须:   对象.属性</p></blockquote><blockquote><p>函数与对象中的方法</p><p>函数: 单独声明  调用的   函数名()   单独存在</p><p>方法:  在对象里面  调用时   对象.方法()</p></blockquote><h3 id="利用new-Object创建"><a href="#利用new-Object创建" class="headerlink" title="利用new Object创建"></a>利用new Object创建</h3><p>创建空对象</p><p><code>var obj = new Object(); //创建了一个空对象</code></p><p>给创建的对象追加属性和方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">uname</span> = <span class="string">&#x27;张三丰&#x27;</span>; <span class="comment">//给对象obj追加一个uname属性 其值为&#x27;张三丰&#x27;;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">obj.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  <span class="comment">// 给对象obj追加一个方法</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>注意: </p><p>(1) 我们是利用等号赋值的方法  添加对象的属性和方法</p><p>(2) 每个属性和方法之间  用分号结束</p><h3 id="利用构造函数来创建对象"><a href="#利用构造函数来创建对象" class="headerlink" title="利用构造函数来创建对象"></a>利用构造函数来创建对象</h3><p>因为我们前面两种创建对象的方式  一次只能创建一个具体的对象</p><p>把对象封装到函数里面: 把对象里面一些相同的属性和方法抽象出来 封装到函数里面</p><p>语法:</p><ul><li>构造</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 构造函数名(形参) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.属性 = 值(形参);</span><br><span class="line">    <span class="variable language_">this</span>.方法 = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用(实例化这个构造函数&#x2F;或者说实例化这个对象)</p><p> new 构造函数名(实参)</p><p><code>var 变量名 = new 构造函数名()</code></p></li></ul><p>实例:</p><p>创建构造函数(对象模板)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age, sex</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params">sang</span>)&#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(sang)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用构造函数(实例化对象)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>);  <span class="comment">// 调用函数 返回的是一个对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh[<span class="string">&#x27;sex&#x27;</span>]);</span><br><span class="line">ldh.<span class="title function_">sing</span>(<span class="string">&#x27;冰雨&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span> (<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zxy.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zxy.<span class="property">age</span>);</span><br></pre></td></tr></table></figure><p>注意:</p><ol><li><strong>构造函数的名字首字母要大写</strong></li><li><strong>构造函数不需要return  就可以返回结果</strong></li><li>我们调用函数 <strong>必须使用 new</strong> </li><li>只要new Star() 调用函数就创建一个对象 </li><li>在创建构造函数时, 我们的属性和方法前面必须加上this.</li></ol><h3 id="构造函数与对象的关系"><a href="#构造函数与对象的关系" class="headerlink" title="构造函数与对象的关系"></a>构造函数与对象的关系</h3><p>构造函数将一类对象的共同属性封装在函数里面</p><p><code>function Stars() &#123;  this.....&#125;</code></p><p>利用构造函数创建对象的过程 称为 <strong>对象的实例化</strong></p><p><code>new Satrs(实参)</code>      将实参传入构造函数  进行对象实例化</p><h2 id="New关键词"><a href="#New关键词" class="headerlink" title="New关键词"></a>New关键词</h2><p>执行过程: </p><blockquote><ol><li>在内存中创建一个空对象</li><li>让this指向这个新的对象</li><li>执行构造函里面的代码, 给这个新对象添加属性和方法</li><li>返回这个新对象(记得把这个新对象赋值给一个变量) , 所以构造函数里面不需要return</li></ol></blockquote><h2 id="遍历对象的属性及属性值"><a href="#遍历对象的属性及属性值" class="headerlink" title="遍历对象的属性及属性值"></a>遍历对象的属性及属性值</h2><p>例子</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;pink老师&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法</p><p>for…in语句用于对数组或者对象的属性进行循环操作.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量(属性名) <span class="keyword">in</span> 要遍历的对象名) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>实例:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k);  <span class="comment">//k 变量 输出 得到的是属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k])  <span class="comment">// obj[k] 得到的是属性值 []不可以用加&#x27;&#x27; 这里的obj[]指的不是查看数组元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><p>我们使用for in 里面的变量 我们喜欢写k或者key</p><p>小结:</p><blockquote><ol><li>对象可这样放代码结构更清晰</li><li>对象是复杂数据类型object</li><li>本质:对象就是一组无序的相关属性和方法的集合</li><li>构造函数泛指某一大类, 比如苹果, 不管是青苹果还是红苹果, 都统称为苹果</li><li>对象实例特指一个对象 比如这个苹果</li><li>for…in 语句用于对 对象的属性进行循环操作</li></ol></blockquote><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><blockquote><p> 内置对象的分类</p></blockquote><ul><li>自定义对象</li><li>内置对象:</li></ul><p>​                JS语言自带的一些对象 也可以实现一些常用且必要的功能, (属性和方法)</p><p>​                Math, Date, Array, String</p><ul><li>浏览器对象</li></ul><h3 id="Math对象—Math"><a href="#Math对象—Math" class="headerlink" title="Math对象—Math."></a>Math对象—Math.</h3><p><strong>不是一个构造函数</strong>  不需要new来调用  而是直接使用里面的属性和方法即可</p><p>案例: 封装自己的数学对象</p><p>要求:利用对象封装自己的数学对象 里面有PI  求最大值方法  求最小值方法</p><p>实例:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myMath = &#123;   <span class="comment">//字面量创建对象 </span></span><br><span class="line">    <span class="attr">PI</span>:<span class="number">3.1415926</span>,  <span class="comment">// 创建一个对象的属性 注意逗号</span></span><br><span class="line">    <span class="attr">max</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//创建一个求最大值的方法</span></span><br><span class="line">        <span class="keyword">var</span> max = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i]&gt;max) &#123;</span><br><span class="line">                max =<span class="variable language_">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;  <span class="comment">//返回最大值</span></span><br><span class="line">    &#125;,   <span class="comment">//注意这里的逗号 (属性或方法之间 用逗号隔开)</span></span><br><span class="line">    <span class="attr">min</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//创建一个求最小值的方法</span></span><br><span class="line">        <span class="keyword">var</span> min = <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i]&lt;min) &#123;</span><br><span class="line">                min =<span class="variable language_">arguments</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;  <span class="comment">//返回最小值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="property">PI</span>); <span class="comment">//3.1415926</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">max</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>)); <span class="comment">//9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMath.<span class="title function_">min</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>));  <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="Math常用对象"><a href="#Math常用对象" class="headerlink" title="Math常用对象"></a>Math常用对象</h4><blockquote><p>Math.PI  圆周率   它时一个属性, 不是一个方法 不需要加小括号</p></blockquote><blockquote><p>Math.floor()   向下<strong>取整</strong></p><p>1.1—–1<br>1.9—-1</p></blockquote><blockquote><p>Math.ceil()  向上<strong>取整</strong>   往大的整数取值</p><p>1.1—-2<br>1.9—-2</p></blockquote><blockquote><p>Math.round()   四舍五入<strong>取整</strong> 就近取值<br>注意- 3.5 取-3<br>恰好在整数中间的这个数往大了取(无论正整数还是负整数)</p><blockquote><p>-1.5 取-1<br>-2.5取-2<br>2.5取3</p></blockquote></blockquote><blockquote><p>Math.abs()    取绝对值<br>遇到字符串型的数字会隐式转换   ‘1’&#x3D;1</p></blockquote><blockquote><p>Math.max()&#x2F;Math.min()   求数字中的最大值和最小值<br>注意: 只能传参数, 不能传数组</p><p>解决: 利用apply(    参数1,   参数2(数组)   )   先把数组转化为字符串</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">66</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr);</span><br><span class="line"><span class="keyword">var</span> min = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max,min); <span class="comment">//99,1</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Math对象—random()   随机数</p><p>注意:</p><blockquote><p>返回一个随机的浮点数  范围[0,1)之间<br>取到0  但是娶不到1<br><strong>不跟参数</strong></p></blockquote><p>使用: 得到一个两数之间的随机整数，包括两个数在内</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min, max</span>) &#123; <span class="comment">//作用  得到一个两数之间的随机整数，包括两个数在内</span></span><br><span class="line">    <span class="comment">// min = Math.ceil(min);</span></span><br><span class="line">    <span class="comment">// max = Math.floor(max);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min; <span class="comment">//含最大值，含最小值 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getRandom</span>(<span class="number">1</span>, <span class="number">10</span>)); <span class="comment">//获得[1,10]之间的一个随机整数</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//班级点名</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;Angel&#x27;</span>, <span class="string">&#x27;网吧&#x27;</span>,<span class="string">&#x27;或者&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="title function_">getRandom</span>(<span class="number">0</span>,arr.<span class="property">length</span>-<span class="number">1</span>)]);</span><br></pre></td></tr></table></figure></blockquote><h4 id="案例-猜数字游戏"><a href="#案例-猜数字游戏" class="headerlink" title="案例:  猜数字游戏"></a>案例:  猜数字游戏</h4><p>要求: </p><p>程序随机生成一个 1~ 10 之间的数字，并让用户输入一个数字，</p><ol><li>如果大于该数字，就提示，数字大了，继续猜；</li><li>如果小于该数字，就提示数字小了，继续猜；</li><li>如果等于该数字，就提示猜对了， 结束程序</li></ol><p>分析: </p><p>① 随机生成一个1~10 的整数 我们需要用到 Math.random() 方法。<br>② 需要一直猜到正确为止，所以一直循环。<br>③ 用while 循环合适更简单。<br>④ 核心算法：使用 if else if 多分支语句来判断大于、小于、等于。</p><h3 id="日期对象—new-Date"><a href="#日期对象—new-Date" class="headerlink" title="日期对象—new Date( )"></a>日期对象—new Date( )</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>是一个构造函数, 必须使用new来调用我们的日期对象</p><p><code>new Date( )</code></p><p>不使用参数:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date= <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//参数为空  返回系统当前时间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">//获取当前时间 Mon Mar 28 2022 11:20:58 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><p>得到了一个非格式化的时间字符串, 浏览器不同 得到的格式也不同</p><p>所以我们需要</p><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><p>调用日期对象 并赋予date</p><p><code>var date = new Date();</code></p><blockquote><p> 提取单个的年, 月, 日</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);  <span class="comment">//获取当前系统的年月日时间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>());<span class="comment">//返回当前系统日期的年  2022</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>); <span class="comment">// 本应该输出2  实际是1 所以事实是返回的月份会小一个月  必须加1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>());<span class="comment">// 输出当前的日期号  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>());<span class="comment">// 输出当前的星期号 周一到周六返回的是1-6 但是周日返回的是0</span></span><br></pre></td></tr></table></figure><p>实例: </p><p>我们写一个****年**月**日 星期几 格式的结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//调用当前日期对象</span></span><br><span class="line"><span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="keyword">var</span> month = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> dates =date.<span class="title function_">getDate</span>();</span><br><span class="line"><span class="keyword">var</span> arr =[<span class="string">&#x27;星期日&#x27;</span>,<span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>,<span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;星期六&#x27;</span>] <span class="comment">//星期日写在最前面</span></span><br><span class="line"><span class="keyword">var</span> day = arr[date.<span class="title function_">getDay</span>()];<span class="comment">//利用数组 将数字的星期1换成汉字的星期一</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今天是&#x27;</span>+year+<span class="string">&#x27;年&#x27;</span>+ month+<span class="string">&#x27;月&#x27;</span>+ dates+<span class="string">&#x27;日 &#x27;</span>+day);</span><br></pre></td></tr></table></figure><blockquote><p>提取单个的 时 分 秒 </p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getHours</span>());  <span class="comment">//11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMinutes</span>()); <span class="comment">//11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getSeconds</span>());  <span class="comment">//11</span></span><br></pre></td></tr></table></figure><p>实例:</p><p>要求封装一个函数  返回当前的时分秒  格式08:08:08</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getTimer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> h = time.<span class="title function_">getHours</span>(); </span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h; <span class="comment">//  用三元表达式   给个位数的时间 补0 </span></span><br><span class="line">    <span class="keyword">var</span> m = time.<span class="title function_">getMinutes</span>();</span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = time.<span class="title function_">getSeconds</span>();</span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h + <span class="string">&#x27;:&#x27;</span> + m + <span class="string">&#x27;:&#x27;</span> + s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getTimer</span>());</span><br></pre></td></tr></table></figure><h4 id="获取日期的总的毫秒数"><a href="#获取日期的总的毫秒数" class="headerlink" title="获取日期的总的毫秒数"></a>获取日期的总的毫秒数</h4><p>获取Date总的毫秒数(时间戳)(永远不会重复)  不是当前时间的毫秒数  而是距离1970年1月1号过了多少毫秒数</p><p>三种方法</p><blockquote><p>1.通过 valueOf() 或者  getTime()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>()); <span class="comment">//就是我们现在时间 距离1970年1月1号过了多少毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>());<span class="comment">//就是我们现在时间 距离1970年1月1号过了多少毫秒数</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>2.简单的写法:  +new Date()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// +new Date() 就是返回的总毫秒数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1);</span><br></pre></td></tr></table></figure><blockquote><p>对象括号中如果输入一个时间, 格式是: 2022-2-23 18:00:00</p><p>则返回这个时间距离1970年初始时间的毫秒数</p></blockquote></blockquote><blockquote><p>3.H5 新增的 获得总毫秒数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure></blockquote><h4 id="案例-倒计时"><a href="#案例-倒计时" class="headerlink" title="案例:倒计时"></a>案例:倒计时</h4><p>分析:</p><blockquote><p> 核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时 ，但是不能拿着时分秒相减，比如 05 分减去25分，结果会是负数的。</p><p>用时间戳来做。用户输入时间总的毫秒数减去现在时间的总的毫秒数，得到的就是剩余时间的毫秒数。</p><p> 把剩余时间总的毫秒数转换为天、时、分、秒 （时间戳转换为时分秒）</p><p>1s &#x3D;&#x3D;&#x3D;1000ms</p></blockquote><blockquote><p>转换公式如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">总秒数 = ms /<span class="number">1000</span></span><br><span class="line">d = <span class="built_in">parseInt</span>(总秒数/ <span class="number">60</span>/<span class="number">60</span> /<span class="number">24</span>); <span class="comment">// 计算天数</span></span><br><span class="line">h = <span class="built_in">parseInt</span>(总秒数/ <span class="number">60</span>/<span class="number">60</span> %<span class="number">24</span>) <span class="comment">// 计算小时</span></span><br><span class="line">m = <span class="built_in">parseInt</span>(总秒数 /<span class="number">60</span> %<span class="number">60</span> ); <span class="comment">// 计算分数</span></span><br><span class="line">s = <span class="built_in">parseInt</span>(总秒数%<span class="number">60</span>); <span class="comment">// 计算当前秒数</span></span><br></pre></td></tr></table></figure></blockquote><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数;</span></span><br><span class="line">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(time); <span class="comment">// 返回的是用户输入时间 总的毫秒数; 用户输入一个时间 会转换为毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">//times 就是剩余时间总的(/毫/)秒数</span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>); <span class="comment">// 得到剩余的天数</span></span><br><span class="line">    d = d &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + d : d;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>) <span class="comment">//得到剩余的小时</span></span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 得到剩余的分钟数</span></span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 得到剩余的秒数</span></span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s; <span class="comment">// 小于10  利用字符串连接 补0</span></span><br><span class="line">    <span class="keyword">return</span> d + <span class="string">&#x27;天&#x27;</span> + h + <span class="string">&#x27;时&#x27;</span> + m + <span class="string">&#x27;分&#x27;</span> + s + <span class="string">&#x27;秒&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countDown</span>(<span class="string">&#x27;2022-2-23 18:00:00&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="数组内置对象"><a href="#数组内置对象" class="headerlink" title="数组内置对象"></a>数组内置对象</h3><ol><li>利用数组字面量创建数组—–回顾上文</li></ol><h4 id="利用数组内置对象创建数组"><a href="#利用数组内置对象创建数组" class="headerlink" title="利用数组内置对象创建数组"></a>利用数组内置对象创建数组</h4><blockquote><p>利用new创建数组</p></blockquote><p>注意Array();    A要大写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">// 利用new Array() 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>); <span class="comment">// 还是一个空数据  数组长度为2   只不过有两个空元素</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 等价于[2,3] 这样写表示 里面有两个数组元素 是2和3</span></span><br></pre></td></tr></table></figure><h4 id="利用数组内置对象检测参数是否为数组"><a href="#利用数组内置对象检测参数是否为数组" class="headerlink" title="利用数组内置对象检测参数是否为数组"></a>利用数组内置对象检测参数是否为数组</h4><blockquote><p>(1) instanceof <strong>运算符</strong> 它可以用来检测是否为数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>);  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125; <span class="comment">//这是对象的写法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>(2)Array.isArray(参数);  H5 新增的方法  ie9以上版本才支持</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></blockquote><p>实例: 翻转数组的规范:确定传入的数据为数组才倒叙</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="comment">// if (arr instanceof Array) &#123;  /////</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="keyword">var</span> newArr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  <span class="comment">//arr.length-1  是为了获取旧数组的最后一个元素的索引号, 以便调用最后一个元素 换成新数组的第一个, 以实现顺序调换;  i&gt;=0: 取到旧数组的索引号为0 即第1个元素.</span></span><br><span class="line">            newArr[newArr.<span class="property">length</span>] = arr[i]; <span class="comment">//  newArr[newArr.length] 这样是当是长度为0 存入第一个 arr中的最后一个元素,  此时长度变成1, //则可继续接收一个新的元素, 长度自动变成2...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">////</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;error 这个参数要求必须是数组格式[1,2,3]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reverse</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">reverse</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><h4 id="添加和删除数组元素"><a href="#添加和删除数组元素" class="headerlink" title="添加和删除数组元素"></a>添加和删除数组元素</h4><blockquote><p>增加数组元素</p></blockquote><ul><li>在后面增加</li></ul><p>被添加元素的数组名.push(元素1,元素2,…. )            在数组的末尾 添加一个或者多个数组元素  </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>, <span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// (5) [1, 2, 3, 4, &#x27;pink&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">push</span>()); <span class="comment">// 5  数组的长度</span></span><br></pre></td></tr></table></figure><p>注意: </p><pre><code>//(1) .push()可以给数组追加新的元素//(2) .push() 参数直接写数组元素就可以//(3) .push()  无参数 则返回 数组的长度</code></pre><ul><li>在前面增加</li></ul><p>被添加元素的数组名.unshift(元素1,元素2,….  )      在数组的开头 添加一个或者多个数组元素;</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);  <span class="comment">//[&#x27;red&#x27;, 1, 2, 3, 4, &#x27;pink&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">unshift</span>()); <span class="comment">//6</span></span><br></pre></td></tr></table></figure><p>注意:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//(1) .unshift可以给数组前面追加新的元素</span></span><br><span class="line"><span class="comment">//(2) .unshift() 参数直接写数组元素就可以</span></span><br><span class="line"><span class="comment">//(3) .unshift()  无参数 则返回 数组的长度</span></span><br></pre></td></tr></table></figure><blockquote><p>删除数组元素</p></blockquote><ul><li>在后面删除</li></ul><p>被修改的数组名.pop(最后一个元素)               它可以删除数组的最后一个元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>()); <span class="comment">//删除arr这个数组的最后一个元素 并返回被删除的元素</span></span><br><span class="line">arr.<span class="title function_">pop</span>()  <span class="comment">//删除最后一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//(5) [&#x27;red&#x27;, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>注意:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//(1) .pop是可以删除数组的最后一个元素, 记住一次只能删除一个</span></span><br><span class="line"><span class="comment">//(2) .pop() 没有参数</span></span><br><span class="line"><span class="comment">//(3) .pop完毕后会, 返回的结果是 删除的那个元素</span></span><br><span class="line"><span class="comment">//(4) 原数组也会发生变化</span></span><br></pre></td></tr></table></figure><ul><li>在前面删除</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>());  <span class="comment">//删除数组第一的元素 并返回被删除的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1, 2, 3] </span></span><br></pre></td></tr></table></figure><p>案例1: 删选数组:有一个包含工资的数组[1500, 1200, 2000, 2100, 1800]，要求把数组中工资超过2000的删除，剩余的放到新数组里面</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1500</span>, <span class="number">1200</span>, <span class="number">2000</span>, <span class="number">2100</span>, <span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i&lt;arr.<span class="property">length</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i]&lt;<span class="number">2000</span>) &#123;</span><br><span class="line">        <span class="comment">// newArr[newArr.length] = arr[i];</span></span><br><span class="line">        newArr.<span class="title function_">push</span>(arr[i]) <span class="comment">//依次添加  不用担心担心序号的问题</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><blockquote><p>.reverse( )</p></blockquote><p>颠倒数组中元素的顺序,无参数</p><p><strong>修改原来的数组</strong>,返回值为新数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);   <span class="comment">//[7, 6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><blockquote><p>.sort( )</p></blockquote><p>该方法<strong>会改变原来的数组</strong>, 返回新数组</p><ul><li>单位数可以实现完美的从小到达排序</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=[<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>];</span><br><span class="line">arr1.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);  <span class="comment">//[3, 4, 5, 6, 6, 6, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><ul><li>双位数则不行::解决方案</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=[<span class="number">4</span>,<span class="number">33</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>];</span><br><span class="line">arr1.<span class="title function_">sort</span>( <span class="keyword">function</span>(<span class="params">a,b</span>) &#123; <span class="comment">//数组含双位数</span></span><br><span class="line">    <span class="comment">// return a-b; //升序的顺序排列</span></span><br><span class="line">    <span class="keyword">return</span> b-a;   <span class="comment">//降序的排序排列</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);  </span><br></pre></td></tr></table></figure><h4 id="获取数组索引方法"><a href="#获取数组索引方法" class="headerlink" title="获取数组索引方法"></a>获取数组索引方法</h4><blockquote><p>.indexOf( )</p></blockquote><p>说明: 数组中从<strong>前面</strong>开始查找给定元素的第一个索引</p><p>返回值:  如果存在则返回索引号, 如果不存在, 则返回 -1</p><p>​                    可以用来查找用户</p><p>实例:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;给个&#x27;</span>,<span class="string">&#x27;你好&#x27;</span>,<span class="string">&#x27;真棒&#x27;</span>,<span class="string">&#x27;给个&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;给个&#x27;</span>));  <span class="comment">// 1 有两个 &#x27;给个&#x27; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;哈哈&#x27;</span>));  <span class="comment">// 哈哈 不在数组中 则返回 -1</span></span><br></pre></td></tr></table></figure><p>注意: <strong>它只返回第一个查找到的元素的索引号</strong>.</p><blockquote><p>.lastIndexOf( )</p></blockquote><p>说明: 数组中从<strong>后面</strong>开始查找给定元素的索引—从最后一个元素开始查找, 只查找第一次</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;给个&#x27;</span>, <span class="string">&#x27;你好&#x27;</span>, <span class="string">&#x27;真棒&#x27;</span>, <span class="string">&#x27;给个&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;真棒&#x27;</span>)); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h4 id="重点-数组去重"><a href="#重点-数组去重" class="headerlink" title="(重点)数组去重"></a><em><strong>(重点)数组去重</strong></em></h4><p>要求:有一个数组[‘c’, ‘a’, ‘z’, ‘a’, ‘x’, ‘a’, ‘x’, ‘c’, ‘b’]，要求去除数组中重复的元素。</p><p>分析:</p><blockquote><p>目标:<br>    把就数组里面不重复的元素选出来放到新数组中, 重复的元素只保留一个, 放到新数组中去重.<br>核心算法:<br>    我们遍历旧数组, 然后拿着旧数组元素去查询新数组, 如果该元素在新数组里面没有出现过, 我们即添加, 否则不添加<br>我们怎么知道该元素有没有存在呢?<br>    来利用新数组indexOf(数组元素). 如果返回-1, 就说明新数组里面没有该元素</p></blockquote><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123; <span class="comment">//如果arr[i]在newArr中查不到 即-1,</span></span><br><span class="line">            newArr.<span class="title function_">push</span>(arr[i]); <span class="comment">// 则将arr[i]这个元素存到newArr中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="title function_">unique</span>([<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demo);</span><br></pre></td></tr></table></figure><h4 id="数组转为字符串"><a href="#数组转为字符串" class="headerlink" title="数组转为字符串"></a>数组转为字符串</h4><blockquote><p>.toString( )</p></blockquote><p>说明: 把数组转换为一条字符串, <strong>默认逗号分隔每一项</strong>  <strong>不需要传参数</strong></p><p>返回值: 返回一个字符串</p><p>实例:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">//1,2,3 黑色</span></span><br></pre></td></tr></table></figure><blockquote><p>.join(‘分隔符’)</p></blockquote><p>说明: 方法用于把数组中的所有元素转换为一条字符串  <strong>可以自定义分隔符</strong></p><p>返回值: 返回一个字符串</p><p>实例:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=[<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">//green-blue-pink</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)); <span class="comment">// green&amp;blue&amp;pink   后台表单提交样式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mutant=arr1.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>);  <span class="comment">//把返回值赋值给mutant</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mutant); <span class="comment">//green-blue-pink</span></span><br></pre></td></tr></table></figure><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><blockquote><p>被连接的第一个数组1.concat(数组2,数组3,… )    连接两个或多个数组, 不影响原数组  </p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.<span class="title function_">concat</span>(arr2,arr4);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);<span class="comment">//[1, 2, 3, 4, 5, 6, 8, 8, 8, 8]</span></span><br></pre></td></tr></table></figure><blockquote><p>需要被<strong>截取</strong>的数组名.slice(index begin, index end)</p></blockquote><p>参数: 指定的数组的索引号开始截取, 截取到指定数组索引号之前的那一个元素</p><p>返回值: 被截取的数组</p><p>注意: 不影响原数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">      <span class="keyword">var</span> arr3 =[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>];</span><br><span class="line">      <span class="keyword">var</span> arrSlice = arr3.<span class="title function_">slice</span>(<span class="number">5</span>,<span class="number">10</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arrSlice); <span class="comment">//[6, 8, 8, 8, 8]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSlice); <span class="comment">//[1, 2, 3, 4, 5, 6, 8, 8, 8, 8]</span></span><br></pre></td></tr></table></figure><blockquote><p>需要<strong>被截取删除</strong>的数组名.splice(index begin, index end)</p></blockquote><p>参数: 指定的数组的索引号开始截取, 截取到指定数组索引号之前的那一个元素</p><p>返回值: 返回被删除元素 成为一个新数组,</p><p><strong>注意: 这个会影响原数组</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 =[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">var</span> arrSlice = arr3.<span class="title function_">splice</span>(<span class="number">5</span>,<span class="number">10</span>);   </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrSlice); <span class="comment">//[6, 8, 8, 8, 8]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">//[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>疑惑</p><blockquote><p><code>var str = &#39;andy&#39;; console.log(str.length); //4</code><br>按道理 只有复杂数据类型(对象)才会有属性和方法, 但是简单数据类型为什么有length属性呢?</p></blockquote><p>原因</p><blockquote><p>就是把简单数据类型包装成为了复杂数据类型</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把简单数据类型包装为复杂数据类型;</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;andy&#x27;</span>);</span><br><span class="line"><span class="comment">//把临时变量给temp </span></span><br><span class="line">str = temp;</span><br><span class="line"><span class="comment">// 销毁这个临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>使得基本数据类型就有了属性和方法</p></blockquote><p>为了方便操作基本数据类型, JS还提供了三个特殊的引用类型</p><p>String<br>Number<br>Boolean</p><h4 id="字符串的不可变性"><a href="#字符串的不可变性" class="headerlink" title="字符串的不可变性"></a>字符串的不可变性</h4><p>指的是里面的值不可变, 虽然看上去可以改变内容, 但是地址改变了, 内存中新开辟了一个内存空间</p><h4 id="根据字符返回位置-经典面试"><a href="#根据字符返回位置-经典面试" class="headerlink" title="根据字符返回位置(经典面试)"></a><em><strong>根据字符返回位置(经典面试)</strong></em></h4><blockquote><p>被查找的字符串.indexOf(‘要查找的字符’, 开始查找的位置(默认为0) )    </p></blockquote><p>作用: 查出<strong>指定的字符</strong>在什么位置?  得到索引号</p><p>返回指定内容的原字符串中的位置(索引号), 如果找不到就返回 -1 , <strong>开始的位置是index 索引号</strong></p><blockquote><p>被查找的字符串.lastIndexOf(‘要查找的字符’, 开始的位置(默认为0))</p></blockquote><p>从后往前找, 只找第一个匹配的</p><p>案例:返回字符的位置</p><p>要求:查找字符’abcoefoxyozzopp’中所有出现o的位置以及次数.</p><p>分析: </p><blockquote><p>核心算法: 先查找出第一个o出现的位置<br>然后 只要indexOf()返回的不是-1就继续查找<br>因为indexOf只能查找到第一个, 所以后面的查找, 利用第二个参数, 即返回的索引号加1, 从而继续查找</p></blockquote><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;oabcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">    num++;</span><br><span class="line">    index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o出现的次数是&#x27;</span>+num +<span class="string">&#x27;次&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="根据位置返回字符-重点"><a href="#根据位置返回字符-重点" class="headerlink" title="根据位置返回字符(重点)"></a><em>根据位置返回字符(重点)</em></h4><blockquote><p>.charAt(index)  </p></blockquote><p>说明: 返回指定位置的字符(index字符串的<strong>索引号</strong>)  </p><p>作用:  查出这个位置有什么字符?  得到字符</p><p>使用: <code>str.charAt(0)</code></p><p>实例: </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str =<span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">3</span>)); <span class="comment">//y</span></span><br></pre></td></tr></table></figure><p>​            遍历所有字符</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历所有字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;str.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(i)); <span class="comment">//a n  d  y</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>.charCode(index)</p></blockquote><p>说明: 获取指定位置处字符的ASCII(index索引号)</p><p><code>var str = &#39;andy&#39;;</code></p><p>使用: <code>str.charCodeAt(0)</code></p><p>实例: <code>console.log(str.charCodeAt(0)); //97</code></p><blockquote><p>str[index]</p></blockquote><p>说明: 获取指定位置处字符</p><p>使用:  html5, IE8  和charAt()等效</p><p>实例: <code>console.log(str[0]); //a</code></p><p>案例: 查找字符串”abcoefoxyozzopp”中出现次数最多的字母以及打印这个次数</p><p>分析: </p><p>​        核心算法: 利用charAt()遍历这个字符串</p><p>​        把每个祖父储存给对象, 如果对象没有该属性, 就为1, 如果存在 就+1;</p><p>​        遍历对象, 得到最大值和该字符</p><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;; <span class="comment">//声明一个对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> chars = str.<span class="title function_">charAt</span>(i); <span class="comment">// chars 是字符串的每一个字符</span></span><br><span class="line">    <span class="keyword">if</span> (o[chars]) &#123;  <span class="comment">//o[chars] 得到的是属性值 第一次属性值为0;</span></span><br><span class="line">        o[chars]++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        o[chars] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o); <span class="comment">//&#123;a: 1, b: 1, c: 1, o: 4, e: 1, …&#125;</span></span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="comment">// k 得到的是o的属性名,  o[k]得到的是属性值</span></span><br><span class="line">    <span class="keyword">if</span> (o[k] &gt; max) &#123;</span><br><span class="line">        max = o[k]</span><br><span class="line">        ch = k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">//原始字符串某个字符最大的次数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最多的字符是&#x27;</span> + ch);  <span class="comment">// 得到出现最大出现次数的这个字符  o对象中方的属性</span></span><br></pre></td></tr></table></figure><h4 id="字符串操作方法-重点"><a href="#字符串操作方法-重点" class="headerlink" title="字符串操作方法(重点)"></a>字符串操作方法(重点)</h4><blockquote><p>concat(str1, str2, str3…)</p><p>用于链接两个或多个字符串. 拼接字符串,等效于+,  +更常用</p></blockquote><blockquote><p><strong>substr(start, length)</strong></p><p>从start位置开始(索引号), length取的个数  重点记住这个</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;改革春风吹满地&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">substr</span>(<span class="number">2</span>,<span class="number">2</span>)); <span class="comment">//春风</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>slice(start, end)</p><p>从start位置开始, 截取到end位置, end取不到(他们俩都是索引号)</p></blockquote><blockquote><p>substring(start, end)</p><p>从start位置开始, 截取到end位置, end取不到  基本和slice相同  但是不接收负值</p></blockquote><h4 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h4><blockquote><p>replace( ‘ 被替换的字符’, ‘替换为的字符’)</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)); <span class="comment">//bndy</span></span><br></pre></td></tr></table></figure><p>!!!只会替换第一个检测到的字符</p><p>案例: 有一串字符  里面的o全部替换为*</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abcoefoxyozzopp&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span> (str2.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    str2 = str2.<span class="title function_">replace</span>(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2); <span class="comment">//abc*ef*xy*zz*pp</span></span><br></pre></td></tr></table></figure><h4 id="字符串转换为数组"><a href="#字符串转换为数组" class="headerlink" title="字符串转换为数组"></a>字符串转换为数组</h4><blockquote><p>split(‘分隔符’)</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = <span class="string">&#x27;red,pink,blue&#x27;</span>; <span class="comment">// , 分隔符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str3.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)); <span class="comment">// [&#x27;red&#x27;, &#x27;pink&#x27;, &#x27;blue&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">&#x27;red&amp;pink&amp;blue&#x27;</span>; <span class="comment">// , 分隔符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str4.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>)); <span class="comment">// [&#x27;red&#x27;, &#x27;pink&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="转换为大写或小写"><a href="#转换为大写或小写" class="headerlink" title="转换为大写或小写"></a>转换为大写或小写</h4><blockquote><p>toUpperCase()</p></blockquote><p>转换为大写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str5 = <span class="string">&#x27;red,pink,blue&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str5.<span class="title function_">toUpperCase</span>());<span class="comment">//RED,PINK,BLUE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str6 = <span class="string">&#x27;red,pink,BLUE&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str6.<span class="title function_">toUpperCase</span>()); <span class="comment">//RED,PINK,BLUE</span></span><br></pre></td></tr></table></figure><blockquote><p>toLowerCase()</p></blockquote><p>转换为小写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str7 = <span class="string">&#x27;red,pink,BLUE&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str7.<span class="title function_">toLowerCase</span>()); <span class="comment">//red,pink,blue</span></span><br></pre></td></tr></table></figure><p>作业</p><p>7、 遍历字符串，并将遍历出的字符两头添加符号“@”</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str9 = <span class="string">&#x27;abaasdffggggggggggghhjjkk22fddbbs3444343&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> newArr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">0</span>; i&lt;str9.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    newArr += str9.<span class="title function_">substr</span>(i,<span class="number">1</span>) + <span class="string">&#x27;@&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">newArr = <span class="string">&#x27;@&#x27;</span>+ newArr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">//@a@b@a@a@s@d@f@f@g@g@g@g@g@g@g@g@g@g@g@h@h@j@j@k@k@2@2@f@d@d@b@b@s@3@4@4@4@3@4@3@</span></span><br></pre></td></tr></table></figure><p>!!! 如果要去掉字符串的某些字符  可以先转换为数组,  进行操作, 在从编辑后的数组转换为字符串</p><h1 id="JS的简单数据类型与复杂数据类型"><a href="#JS的简单数据类型与复杂数据类型" class="headerlink" title="JS的简单数据类型与复杂数据类型"></a>JS的简单数据类型与复杂数据类型</h1><h2 id="简单数据类型与复杂数据类型"><a href="#简单数据类型与复杂数据类型" class="headerlink" title="简单数据类型与复杂数据类型"></a>简单数据类型与复杂数据类型</h2><blockquote><p>简单类型 又叫做基本数据类型或值类型</p><p>在储存时变量中存储的是值本身</p><blockquote><ul><li><p>string</p></li><li><p>number</p></li><li><p>boolean</p></li><li><p>undefined</p></li><li><p>null</p><blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer=<span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer);<span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>返回的是一个空的对象</p><p>如果有个变量我们以后打算存储为对象, 暂时没想好, 这个时候就给null</p></blockquote></li></ul></blockquote></blockquote><blockquote><p>复杂类型 又叫做引用类型</p><p>通过关键字new创建的对象(系统对象, 自定义对象)</p><p>系统对象: Object Array Date</p></blockquote><h2 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h2><h3 id="栈-操作系统"><a href="#栈-操作系统" class="headerlink" title="栈(操作系统)"></a>栈(操作系统)</h3><p>由操作系统自动分配释放存放函数的参数值, 局部变量的值,. 其操作方式类似一数据结构中的栈</p><p><strong>简单数据类型存放到栈里面</strong> </p><p><strong>开辟空间</strong> <strong>直接存储值</strong></p><h3 id="堆-操作系统"><a href="#堆-操作系统" class="headerlink" title="堆(操作系统)"></a>堆(操作系统)</h3><p>存储复杂类型(对象), 一半由程序员分配释放, 若程序员不释放, 由垃圾回收机制回收</p><p><strong>复杂数据类型存放到堆里面</strong></p><ul><li><p>首先在栈里面存放地址, 用十六进制表示</p></li><li><p>然后这个地址指向堆里面的数据</p></li></ul><h3 id="简单类型的内存分配"><a href="#简单类型的内存分配" class="headerlink" title="简单类型的内存分配"></a>简单类型的内存分配</h3><h3 id="复杂类型的内存分配"><a href="#复杂类型的内存分配" class="headerlink" title="复杂类型的内存分配"></a>复杂类型的内存分配</h3><h3 id="简单类型传参-传值"><a href="#简单类型传参-传值" class="headerlink" title="简单类型传参: 传值"></a>简单类型传参: 传值</h3><h3 id="复杂类型传参-传地址"><a href="#复杂类型传参-传地址" class="headerlink" title="复杂类型传参:传地址"></a>复杂类型传参:传地址</h3><h1 id="JS基础复习完成"><a href="#JS基础复习完成" class="headerlink" title="JS基础复习完成"></a>JS基础复习完成</h1>]]></content>
    
    
    <summary type="html">js基础部分 包括 对象 内置对象 简单数据类型</summary>
    
    
    
    <category term="JavaScript" scheme="http://l1562007999.github.io/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://l1562007999.github.io/tags/JS/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JS-JS基础-3</title>
    <link href="http://l1562007999.github.io/2022/03/27/JS-JS%E5%9F%BA%E7%A1%80-3/"/>
    <id>http://l1562007999.github.io/2022/03/27/JS-JS%E5%9F%BA%E7%A1%80-3/</id>
    <published>2022-03-27T02:14:16.000Z</published>
    <updated>2022-04-06T11:12:11.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h2><p>把一组相关的数据一起存放, 并提供方便的访问(获取)权限</p><p>一组数据的集合, 其中每个数据被称作元素, 再数组中可以i存放任意类型的元素. </p><p>数组是一种将一组数据存储在单个变量下的优雅方式.</p><p>var arr &#x3D;[ 1,2,3,4,5];</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><h3 id="new一个数组"><a href="#new一个数组" class="headerlink" title="new一个数组"></a>new一个数组</h3><p>利用new Array() 创建一个空数组</p><p><code>vae arr = new Array();</code></p><p>注意Array(); A要大写</p><h3 id="利用数组字面量创建数组"><a href="#利用数组字面量创建数组" class="headerlink" title="利用数组字面量创建数组"></a>利用数组字面量创建数组</h3><p><code>var  arr = [   ]</code>  更为常用</p><p><code>var arr = [ 1,2,&#39;pink&#39;, true];</code></p><p>数组中的数据可以存放任意数据的类型, 例如字符串型, 数字, 布尔值</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>数组里面的数据用逗号分割</p><p>数组里面的数据称为数组元素</p><h2 id="获取数组中的元素"><a href="#获取数组中的元素" class="headerlink" title="获取数组中的元素"></a>获取数组中的元素</h2><p>数组的索引(下标) : 用来访问数组元素的序号, 数组下标从0开始</p><p>获取&#x2F;访问的语法:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数组名[索引号]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;pink&#x27;</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">2</span>]); <span class="comment">//pink</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> week = [<span class="string">&#x27;星期一&#x27;</span>,<span class="string">&#x27;星期二&#x27;</span>,<span class="string">&#x27;星期三&#x27;</span>,<span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;星期六&#x27;</span>,<span class="string">&#x27;星期天&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(week[<span class="number">4</span>]); <span class="comment">//星期五</span></span><br></pre></td></tr></table></figure><p>注意:</p><p>没有这个数组元素  输出后显示undefined</p><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><blockquote><p> 使用for循环 遍历 打印数组     </p><p> i从0开始</p></blockquote><blockquote><p>arr.length</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> week = [<span class="string">&#x27;星期一&#x27;</span>,<span class="string">&#x27;星期二&#x27;</span>,<span class="string">&#x27;星期三&#x27;</span>,<span class="string">&#x27;星期四&#x27;</span>,<span class="string">&#x27;星期五&#x27;</span>,<span class="string">&#x27;星期六&#x27;</span>,<span class="string">&#x27;星期天&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i= <span class="number">0</span>; i&lt;week.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(week[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例1:  </p><p>求数组[2,6,1,7,4]里面所有元素的和以及平均值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    sum += arr[i]; <span class="comment">//我们加的是数组元素 arr[i] 不是计数器i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">average = sum / arr.<span class="property">length</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum + <span class="string">&#x27;\n&#x27;</span>, average); <span class="comment">//想要输出多个变量  用逗号分隔即可</span></span><br></pre></td></tr></table></figure><p>案例2:</p><p>求数组[2,6,1,77,52,25,7]中的最大值</p><p>分析:</p><blockquote><ol><li>声明一个保存最大元素的变量max</li><li>默认最大值为数组的第一个元素</li><li>遍历这个数组, 把里面每个数组元素与max相比较</li><li>如果这个数组元素大于max, 就把这个数组元素存到max里面. 否则进行下一轮比较</li><li>最后输出这个max</li></ol></blockquote><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">100</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数组里面的最大值是&#x27;</span> + max);</span><br></pre></td></tr></table></figure><p>​    举一反三</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求数组[2,6,1,77,100,25,7]中的最小值\</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">100</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> min = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">        min = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数组里面的最小值是&#x27;</span> + min);</span><br></pre></td></tr></table></figure><p>案例4:</p><p>要求:</p><p>要求将数组[‘red’, ‘green’, ‘blue’, ‘pink’]转换为字符串, 并且用| 或者其他符号分割开来</p><p>结果: </p><p>输出: ‘red|gree|blur|pink|’</p><p>分析:</p><blockquote><ol><li>需要一个str变量 用于存放转换完的字符串str</li><li>遍历数组, 分别把里面的数据取出来, 加到字符串里面</li></ol></blockquote><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    str += arr[i] + <span class="string">&#x27;\!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// red!green!blue!pink!</span></span><br></pre></td></tr></table></figure><h2 id="为数组追加元素"><a href="#为数组追加元素" class="headerlink" title="为数组追加元素"></a>为数组追加元素</h2><blockquote><p> 通过.length修改数组的长度</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);</span><br><span class="line">arr.<span class="property">length</span> = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, 空 ã2]</span></span><br></pre></td></tr></table></figure><blockquote><p> 通过索引号(强行)添加元素</p></blockquote><p>! ! ! 开辟一个新的索引号, 则数组长度就到达这个索引号</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="comment">// arr1[3] = &#x27;pink&#x27;;</span></span><br><span class="line"><span class="comment">// console.log(arr1[3]);</span></span><br><span class="line">arr1[<span class="number">4</span>] = <span class="string">&#x27;hotpink&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1[<span class="number">4</span>]); <span class="comment">// hotpink</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, 空, &#x27;hotpink&#x27;]</span></span><br><span class="line">arr1[<span class="number">0</span>] = <span class="string">&#x27;blue&#x27;</span>   <span class="comment">//替换</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">//[&#x27;blue&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, 空, &#x27;hotpink&#x27;]</span></span><br></pre></td></tr></table></figure><p>注意:</p><p>可以通过需改数组索引的方式追加数组元素</p><p>不能直接给数组名赋值, 否则会覆盖掉以前的数据</p><hr><p>案例1 :</p><p>新建一个数组, 里面存放100个整数(1-100)</p><p>分析:</p><blockquote><ol><li>使用循环来追加数组.</li><li>声明一个空数组arr</li><li>循环中的计数器i可以作为数组元素存入</li><li>由于数组的索引是从0开始的, 因此计数器从0开始更何时, 存入的数组元素要+1</li></ol></blockquote><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i= <span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">    arr[i] = i+<span class="number">1</span>; <span class="comment">//不要直接给数组名赋值, 否则以前的元素都没了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]</span></span><br></pre></td></tr></table></figure><hr><p>案例2:</p><p>要求:</p><p>把数组[2,0,6,1,77,0,52,0,25,7] 中大于等于10的元素选出来, 放入新的数组中</p><p>分析:</p><blockquote><ol><li>一个新数组newArr</li><li>遍历旧数组, 找出大于等于10的元素</li><li>一次追加给新的数组newArr</li></ol></blockquote><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">0</span>,<span class="number">52</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">var</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i]&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">        newArr[j]= arr[i] <span class="comment">//新数组的索引号从0开始 依次加1</span></span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">//[77, 52, 25]</span></span><br></pre></td></tr></table></figure><p>​                    改良</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">77</span>,<span class="number">0</span>,<span class="number">52</span>,<span class="number">0</span>,<span class="number">25</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i]&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">        newArr[newArr.<span class="property">length</span>]= arr[i] <span class="comment">//新数组的长度开始是0   随着数组内容增加 长度自动增加</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><h2 id="数组综合案例"><a href="#数组综合案例" class="headerlink" title="数组综合案例"></a>数组综合案例</h2><blockquote><p>案例1: 将数组[2,0,6,1,77,0,52,0,25,7]中的0去掉后, 形成一个不包含0的新数组</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</span><br><span class="line">        newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><blockquote><p>案例2: 翻转数组   ‘red’,’green’,’blue’, ‘pink’, ‘purple’</p></blockquote><p>分析:</p><ol><li>声明一个新数组newArr</li><li>把就数组索引号第四个取过来(arr.length - 1), 给新数组索引号第0个元素(newArrange.length)</li><li>我们采取 递减的方式 i–</li></ol><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    newArr[newArr.<span class="property">length</span>] = arr[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><blockquote><p>案例3: 冒泡排序</p></blockquote><p>是一种算法, 把一系列的数据按照一定的顺序精心排列显示(从小到大或者从大到小)</p><p>例如, 我们可以将数组[5,4,3,2,1]中的元素从小到大排序</p><p>从小到大排列</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;<span class="comment">// 外层循环管趟数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j&lt; arr.<span class="property">length</span>-i; j++) &#123; <span class="comment">//里面的循环管 每一趟的交换次数</span></span><br><span class="line">        <span class="comment">//内部交换两个两个变量的值 前一个和后一个 数组元素的比较</span></span><br><span class="line">        <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j]= arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><p>从大到小排列</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;= arr.<span class="property">length</span> -<span class="number">1</span>; i++) &#123;<span class="comment">// 外层循环管趟数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j&lt;= arr.<span class="property">length</span>-i-<span class="number">1</span>; j++) &#123; <span class="comment">//里面的循环管 每一趟的交换次数</span></span><br><span class="line">        <span class="comment">//内部交换两个两个变量的值 前一个和后一个 数组元素的比较</span></span><br><span class="line">        <span class="keyword">if</span> (arr[j]&lt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j]= arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>函数就是封装了一段可以重复执行调用的代码块<br>目的就是让大量代码重复使用</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><p>格式:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名() &#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><p>函数是做某件事情  函数名一般是动词<br>function必须小写<br>函数不调用 自己不执行</p><p>例子:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">syaHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~~&#x27;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>格式:<br>    <code>js 函数名( );</code><br>注意:<br>    调用函数的时候不要忘记加小括号<br>例子<br>    <code>sayHi()</code></p><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><blockquote><p> 利用函数的参数实现函数重读不同的代码</p></blockquote><p>结构:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2.</span>..) &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2.</span>..);</span><br></pre></td></tr></table></figure><p>两种参数:</p><blockquote><p>形参<br>    在声明函数的小括号里面<br>        可以看作是不用声明的变量</p><p>实参<br>    在函数调用的小括号里面</p></blockquote><p>注意:</p><blockquote><p>函数的参数可以 也可以没有  个数不限</p><p>多个参数之间用逗号隔开</p></blockquote><p>实例:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cook</span>(<span class="params">aru</span>) &#123;  <span class="comment">//形参是接收实参的 aru=&#x27;酸辣土豆丝儿&#x27; 形参类似与一个变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(aru);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">cook</span>(<span class="string">&#x27;酸辣土豆丝儿&#x27;</span>);</span><br><span class="line"><span class="title function_">cook</span>(<span class="string">&#x27;茄子豆角&#x27;</span>)</span><br></pre></td></tr></table></figure><p>案例:</p><blockquote><p>&#x2F;&#x2F;1.利用函数求任意两个数的和;</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>&#x2F;&#x2F;2.求 任意两个数且两个数之间的总和 :例如求1—100之间数字的综合(包括1和100)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSums</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSums</span>(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="title function_">getSums</span>(<span class="number">55</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></blockquote><p><strong>函数形参和实参个数不匹配问题</strong></p><blockquote><p>实参个数等于形参个数 : 正常<br>实参个数&gt;形参格式:        正常<br>                                                     实参取到形参的个数<br>实参个数&lt;形参格式:        不正常 NaN</p></blockquote><h2 id="函数的返回值-return语句"><a href="#函数的返回值-return语句" class="headerlink" title="函数的返回值-return语句"></a>函数的返回值-return语句</h2><p>有的时候, 我们会希望函数将值返回给调用者, 此时通过使用return语句就可以实现</p><p>思路:</p><p>​    只要函数遇到return 就把后面的结果 返回给函数的调用者  即 函数名()&#x3D;return 后面的结果 </p><p>实例: </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>案例1: 利用函数求任意两个数的最大值,并返回最大值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMax</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="comment">// if(num1&gt;num2) &#123;</span></span><br><span class="line">    <span class="comment">//     return num1;</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     return num2;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2; <span class="comment">//三元表达式写法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMax</span>(<span class="number">11</span>, <span class="number">3</span>));  <span class="comment">//11</span></span><br></pre></td></tr></table></figure><p>案例2:  求数组[5,2,99,101,67,77]中的最大值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArrMax</span> (arr) &#123;  <span class="comment">//arr 接收一个数组</span></span><br><span class="line">    <span class="keyword">var</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;= arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(getArrMax([1,2,3,4,5,6,78,6,6,,55])); //实参是一个数组 送过去</span></span><br><span class="line"><span class="keyword">var</span> re =<span class="title function_">getArrMax</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">78</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">55</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re);  <span class="comment">//78***在实际开发当中, 我们经常用一个变量来接受函数的返回结果, 使用更简单***</span></span><br></pre></td></tr></table></figure><blockquote><p> <em><strong>在实际开发当中, 我们经常用一个变量来接受函数的返回结果, 使用更简单</strong></em></p></blockquote><p>注意:</p><blockquote><p>return终止函数<br>    return语句之后的代码就不执行了</p></blockquote><blockquote><p>return只能返回一个值. 如果用逗号隔开多个值, 以最后一个值为准</p></blockquote><blockquote><p>但是可以利用数组返回多个值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getResult</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [num1 + num2, num1 - num2, num1 * num2, num1 / num2];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> re= <span class="title function_">getResult</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re);  <span class="comment">//[3, -1, 2, 0.5]</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>函数都有返回值:</p><blockquote><p>如果有return则返回return后面的值</p><p>如果没有return 则返回undefined</p></blockquote></blockquote><h2 id="函数中的break-continue-return-的区别"><a href="#函数中的break-continue-return-的区别" class="headerlink" title="函数中的break continue return 的区别"></a>函数中的break continue return 的区别</h2><blockquote><p>break<br>    结束当前循环体(如 for, while)<br>continue<br>    跳出本次循环,  继续执行下次循环(for, while)<br>return<br>    不仅可以退出循环, 还能返回return语句中的值, 同时还可以结束当前函数体内的代码, 函数内return的下一行语句将不再执行</p></blockquote><h2 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h2><p>当我们不确定有多少个参数传递的时候, 可以用aruguments来获取. </p><p>在JS中, arguments 实际上它是当前函数的一个内置对象. </p><p>所有函数都内置一个arguments对象, arguments对象中以<strong>数组的形式</strong>储存了传递过来的所有实参</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);<span class="comment">//  [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);  <span class="comment">//3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]);   <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p> 我们可以按照数组的方式遍历aruguments</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></blockquote><p>注意:</p><blockquote><p>arguments是伪数组  并不是正真意义上的数组</p><ol><li>具有数组的length属性</li><li>按照索引的方式进行储存</li><li>它没有真正数组的一些方法 pop() push() 等等</li></ol></blockquote><p>案例:  利用函数来求任意个 数的最大值(找出一组数中的最大值)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMax</span>(<span class="params"></span>) &#123; <span class="comment">//arguments = [1,2,3]</span></span><br><span class="line">    <span class="keyword">var</span> max = <span class="variable language_">arguments</span>[<span class="number">0</span>];  <span class="comment">//将第一个元素作为初始值 来比较  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">1</span>; i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">arguments</span>[i] &gt; max) &#123;</span><br><span class="line">            max =<span class="variable language_">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getMax (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));  <span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getMax (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)); <span class="comment">//5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getMax (<span class="number">11</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">46</span>,<span class="number">57</span>));  <span class="comment">//57</span></span><br></pre></td></tr></table></figure><h2 id="一个函数调用另一个函数"><a href="#一个函数调用另一个函数" class="headerlink" title="一个函数调用另一个函数"></a>一个函数调用另一个函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>);</span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn1</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">22</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的相关案例"><a href="#函数的相关案例" class="headerlink" title="函数的相关案例"></a>函数的相关案例</h2><blockquote><p> 案例1:利用函数封装方式, 翻转任意一个数组</p></blockquote><p>思路就是: 进入循环后, 把旧数组的从后面开始的值依次添加到新数组中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=arr.<span class="property">length</span>-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123; <span class="comment">//i是旧数组的索引号</span></span><br><span class="line">        newArr[newArr.<span class="property">length</span>] = arr[i];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="title function_">reverse</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">433</span>,<span class="number">222</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line"><span class="keyword">var</span> arr2 = reverse ([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;哈哈哈&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br></pre></td></tr></table></figure><blockquote><p>案例2: 利用函数封装方式, 将数组排序–冒泡排序</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;  <span class="comment">//控制趟数= 数组长度 - 1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;<span class="comment">//每一趟遍历比较的次数</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr1 = <span class="title function_">sort</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br><span class="line">    <span class="keyword">var</span> arr2 =<span class="title function_">sort</span>([<span class="number">11</span>,<span class="number">7</span>,<span class="number">33</span>,<span class="number">999</span>,<span class="number">888</span>])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br></pre></td></tr></table></figure><blockquote><p>案例3:判断闰年</p></blockquote><p>输入一个年份, 判断是否闰年(闰年:能被4整除并且不能被100整除  或者能被400整除)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isRunYear</span>(<span class="params">year</span>) &#123;</span><br><span class="line">    <span class="comment">//如果是闰年 反回true  否则 返回false</span></span><br><span class="line">    <span class="keyword">var</span> flag =<span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">if</span> (year%<span class="number">4</span> ==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span> !=<span class="number">0</span> || year %<span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        flag =<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRunYear</span>(<span class="number">2000</span>));  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRunYear</span>(<span class="number">1999</span>));   <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>案例4: 输出年份的2月份的天数(一个函数调用另一个函数)</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">backDay</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> year =<span class="title function_">prompt</span>(<span class="string">&#x27;请输入年份&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isRunYear</span>(year)) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;当前年份是闰年, 2月份有29天&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;当前年份是平年, 2月份有28天&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">backDay</span>();</span><br><span class="line"><span class="comment">//判断是否为闰年的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isRunYear</span>(<span class="params">year</span>) &#123;</span><br><span class="line">    <span class="comment">//如果是闰年 反回true  否则 返回false</span></span><br><span class="line">    <span class="keyword">var</span> flag =<span class="literal">false</span>; <span class="comment">//初始化比变量flag</span></span><br><span class="line">    <span class="keyword">if</span> (year%<span class="number">4</span> ==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span> !=<span class="number">0</span> || year %<span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        flag =<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的两种声明方式"><a href="#函数的两种声明方式" class="headerlink" title="函数的两种声明方式"></a><em><strong>函数的两种声明方式</strong></em></h2><blockquote><ol><li><strong>命名函数法</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ol start="2"><li><strong>函数表达式法(匿名函数法)</strong></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">                 &#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"> arr</span>) &#123;  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是函数表达式&#x27;</span>);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fun 是变量名  不是函数名</p><p>函数表达式声明方式 跟声明变量差不多 , 只不过变量里面存的是函数表达式</p><p>函数表达式也可以进行传递参数</p></blockquote><p>这两种的调用方法是一样的: 找到函数特定的名字 加上 (参数…)  即可; </p><p><code>fn()</code></p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>代码名字(变量)在某个范围内起作用和效果  目的是为了提高程序的可靠性</p><p>更重要的是减少命名冲突</p><p>JS的作用域(es之前): </p><blockquote><p>全局作用域</p><blockquote><p>整个script标签<br>单独的一个js文件</p></blockquote><p>局部作用域(函数作用域)</p><blockquote><p>在函数内部就是局部作用域, 这个代码的名字只在函数内部起效果和作用</p></blockquote></blockquote><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>根据作用域的不同,我们分为</p><blockquote><p>全局变量</p></blockquote><p>在全局作用域下的变量</p><p>在全局下都可以使用       也就是说可作用于函数内部</p><p>注意:  如果在函数内部 没有声明, 直接赋值的变量  也属于全局变量  || 不建议使用</p><blockquote><p>局部变量</p></blockquote><p>在函数内部的变量</p><p>注意: 函数的形参也可以看作是局部变量</p><hr><p>从执行效率来看</p><p>全局变量  :只有浏览器关闭的时候才会销毁, 比较占内存资源</p><p>局部变量:  当我们程序执行完毕就会销毁, 比较节约内存资源</p><blockquote><p>了解</p></blockquote><p>JS没有块级作用域</p><p>在es6的时候新增的块级作用域</p><p>块级作用域 { }</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>内部函数访问外部函数的变量 ,采取的是链式查找的方式来决定取哪个值</p><p>就近原则</p><h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h3><p>js引擎运行js分为两步:</p><blockquote><p>预解析: js引擎里面所有的var 和function 提升到当前作用域的最前面</p><p>叫作 变量预解析 和 函数预解析 </p></blockquote><blockquote><p>代码执行: 按照代码书写的顺序从上往下执行</p></blockquote><h3 id="变量预解析和函数预解析"><a href="#变量预解析和函数预解析" class="headerlink" title="变量预解析和函数预解析:"></a>变量预解析和函数预解析:</h3><blockquote><p>变量预解析:  变量提升 —把所有的变量声明提升到当前的作用域最前面  , 不提升赋值操作</p></blockquote><blockquote><p>函数预解析: 函数提升—把所有的函数声明 提升到当前作用域的最前面,  不调用函数</p></blockquote><p>注意:  函数表达式  调用必须写在函数的表达式的下面</p><h3 id="函数预解析的实例"><a href="#函数预解析的实例" class="headerlink" title="函数预解析的实例:"></a>函数预解析的实例:</h3><p>实例1</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">    <span class="keyword">var</span> num=<span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><p>解析过程</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//undefined</span></span><br><span class="line">    num=<span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><p>实例2</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">18</span>;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b=<span class="number">9</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="keyword">var</span> a=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析过程</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析过程</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    b=<span class="number">9</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">// 9</span></span><br><span class="line">    a =<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> a=<span class="number">18</span>;</span><br><span class="line"><span class="title function_">f1</span>();</span><br></pre></td></tr></table></figure><p>案例4</p><p>经典例题:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = c = <span class="number">9</span>   <span class="comment">// var a=9; b=9 c=9   //集体声明 var a=9, b=9, c=9;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析过程</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析过程</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    a = b = c = <span class="number">9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);<span class="comment">//9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">//9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">//9 因为b 与c  是全局变量了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// 报错  is not undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">js基础部分 数组 函数 作用域 预解析</summary>
    
    
    
    <category term="JavaScript" scheme="http://l1562007999.github.io/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://l1562007999.github.io/tags/JS/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JS-JS基础-2</title>
    <link href="http://l1562007999.github.io/2022/03/26/JS-JS%E5%9F%BA%E7%A1%80-2/"/>
    <id>http://l1562007999.github.io/2022/03/26/JS-JS%E5%9F%BA%E7%A1%80-2/</id>
    <published>2022-03-26T04:30:29.000Z</published>
    <updated>2022-04-06T11:12:07.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程控制-分支结构"><a href="#流程控制-分支结构" class="headerlink" title="流程控制-分支结构"></a>流程控制-分支结构</h1><p>在一个程序执行的过程中, 各条代码顺序对程序的结果是有直接影响的. 很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能.</p><h2 id="顺序流程控制"><a href="#顺序流程控制" class="headerlink" title="顺序流程控制"></a>顺序流程控制</h2><p>按顺序写就行</p><h2 id="分支流程控制语句"><a href="#分支流程控制语句" class="headerlink" title="分支流程控制语句"></a>分支流程控制语句</h2><h3 id="if类语句"><a href="#if类语句" class="headerlink" title="if类语句"></a>if类语句</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>语法结构</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">            <span class="comment">//执行语句</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>执行思路—if的条件表达式结果: </p><blockquote><p>true  执行里面的 执行语句</p></blockquote><blockquote><p> false  跳过此处的if语句 &#x2F; 执行if语句后面的代码</p></blockquote><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h4><p>如果表达式为真 则执行语句1 否则执行else里面的语句2</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入你的年龄&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你可以取网吧偷耳机啦!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你不可以去网吧上网&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: else后面直接跟大括号</p><p>案例:  判断闰年 平年</p><p>算法:  能被4整除且不能整除100的为闰年(2004年是闰年, 1901年不是闰年)    或者能够被400整除的就是闰年</p><p>实施</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> year = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入年份&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;这是闰年&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;这是平年&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><p>且 &amp;&amp;   或者 || 的写法<br>同时注意判断整除的方法     取余为0</p><h4 id="三元表达式-简化版的if-else"><a href="#三元表达式-简化版的if-else" class="headerlink" title="三元表达式(简化版的if else)"></a>三元表达式(简化版的if else)</h4><p>由三元运算符组成的式子称为三元表达式</p><p>语法结构:</p><blockquote><p>条件表达式?  表达式1 : 表达式2 ;</p></blockquote><p>执行思路: </p><p>如果条件表达式为真 则返回表达式1的值, 如果条件表达式结果为假, 则返回表达式2的值</p><p>代码体验:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> result = num &gt; <span class="number">5</span> ?  <span class="string">&#x27;是的&#x27;</span> : <span class="string">&#x27;不是的&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">//不是的</span></span><br></pre></td></tr></table></figure><p>练习: 数字补0</p><blockquote><p>要求:用户输入数字, 如果数字小于10, 则在前面补0, 比如01, 09, 如果数字大于10, 则不需要补, 比如20</p></blockquote><p>分析: </p><blockquote><p>用户输入0-59之间的一个数字<br>如果数字小于10, 则在这个数字前面补0, (加0), 否则不做操作<br>用一个变量接收这个返回值, 输出</p></blockquote><p>实施:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="title function_">prompt</span>(<span class="string">&#x27;请你输入一个0~59之间的数字:&#x27;</span>);</span><br><span class="line"><span class="comment">// 三元表达式</span></span><br><span class="line"><span class="keyword">var</span> result = time &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + time : time; <span class="comment">//把返回值赋值给一个变量</span></span><br><span class="line"><span class="title function_">alert</span>(result);</span><br></pre></td></tr></table></figure><h4 id="if-else-if语句-多分支语句"><a href="#if-else-if语句-多分支语句" class="headerlink" title="if else if语句(多分支语句)"></a>if else if语句(多分支语句)</h4><p>语法规范:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">   <span class="comment">//语句1;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">   <span class="comment">// 语句2;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//语句3;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//语句4;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用: 适合检查多重条件</p><p>注意: </p><p>​    多分支语句还是多选一,  最后只能有一个语句执行</p><p>​    else if 中间有空格</p><p>案例: 接受用户输入分数, 根据分数输出对应的等级字母A B C D E;</p><p>其中 :</p><hr><p>​    | score&gt;&#x3D;90           | A |<br>​    | 80&lt;&#x3D;score&lt;90     |  B |<br>​    | 70&lt;&#x3D;score&lt;80      | C |<br>​    | 60&lt;&#x3D;score&lt;70      | D |<br>​    | score&lt;60              |  E |</p><p>思路:</p><p>按照<em><strong>从大到小</strong></em>判断的思路<br>弹出prompt输入框, 让用户输入分数, 把这个值取过来保存到变量当中<br>使用多分支if else语句来分别判断输出不同的值</p><p>实施:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入你的分数&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你是我的骄傲&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你的分数 80&lt;=score&lt;90&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你的分数70&lt;=score&lt;80&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你的分数60&lt;=score&lt;70&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你应该重修了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>switch语句也是多分支语句, 它用于基于不同的条件来执行不同的代码. 当要针对变量设置一系列的特定值的选项时, 就可以使用switch</p><p>所以:</p><p>判断特定值 用switch更好做<br>判断值范围的  用if else 更好做一些</p><p>语法结构:  switch 转换, 开关 ;   case小例子或者选项的意思</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">        执行语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//退出</span></span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">        执行语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">default</span>: </span><br><span class="line">        执行最后的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行思路:</p><blockquote><p>利用表达式的值 与 case 后面的值相匹配   匹配就执行case里面的语句 不匹配就往下走;<br>都没有匹配上就执行default里面的语句.</p></blockquote><p>实例:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是1&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是2&#x27;</span>);  <span class="comment">// 执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是3&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有匹配结果&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">switch</span> (num) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是1&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项:</p><blockquote><ol><li><p>开发里面 表达式经常写成变量</p></li><li><p>我们num的值 与case里面的值相匹配的时候是 <strong>全等</strong> 必须是值和数据类型一致才可以 num &#x3D;&#x3D;&#x3D; 1;</p></li><li><p>**break是必要性: ** 如果当前case没有break, 则不会退出switch  而是会再继续多执行一个下面的case</p></li></ol></blockquote><p>案例: 查询水果的价格</p><p>要求: </p><blockquote><p>用户在弹出框里面输入一个水果, 如果有就弹出该水果价格, 如果没有该水果就弹出”没有此水果.”</p></blockquote><p>分析:</p><blockquote><ol><li>弹出警示框 用户输入  将值存入变量</li><li>switch括号里面的表达式</li><li>case后面的值写几个不同的水果名称 要加引号, 因为必须全等匹配.</li></ol></blockquote><p>实施:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruit = <span class="title function_">prompt</span>(<span class="string">&#x27;你的水果是:🍎/榴莲/🍌&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;苹果&#x27;</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;苹果的价格是3.5/斤&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;榴莲&#x27;</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;榴莲的价格是35/斤&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;香蕉&#x27;</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;香蕉的价格是225元/斤&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;没有此水果&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>水果  记得加引号</p><h3 id="switch语句与if-else-if语句的区别"><a href="#switch语句与if-else-if语句的区别" class="headerlink" title="switch语句与if else if语句的区别"></a>switch语句与if else if语句的区别</h3><ul><li>一般情况下, 他们两个语句可以相互替换</li><li>switch ,case语句同行处理case为比较确定值的情况, 而if,,,else,,语句更加灵活, 常用于范围判断(大于, 等于某个范围)</li><li>switch语句进行条件判断后直接执行到程序的条件语句, 效率高; 而if else 语句有几种条件, 就得判断多少次</li><li>当分支较少时, if else语句的只想效率比switch语句高</li><li>当分支多时, switch语句的执行效率比较高, 而且结构更清晰</li></ul><p>作业之一 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> weekday = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入数字1-7中的任意一个整数字&#x27;</span>);</span><br><span class="line"><span class="keyword">switch</span> (weekday) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        weekday = <span class="string">&#x27;一&#x27;</span>;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;今天是星期&#x27;</span> + weekday +<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        weekday = <span class="string">&#x27;二&#x27;</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;今天是星期&#x27;</span> + weekday +<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">        weekday = <span class="string">&#x27;三&#x27;</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;今天是星期&#x27;</span> + weekday +<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">        weekday = <span class="string">&#x27;四&#x27;</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;今天是星期&#x27;</span> + weekday +<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">        weekday = <span class="string">&#x27;五&#x27;</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;今天是星期&#x27;</span> + weekday +<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">        weekday = <span class="string">&#x27;六&#x27;</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;今天是星期&#x27;</span> + weekday +<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">        weekday = <span class="string">&#x27;天&#x27;</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;今天是星期&#x27;</span> + weekday +<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;没按要求输入哦&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环流程控制语句"><a href="#循环流程控制语句" class="headerlink" title="循环流程控制语句"></a>循环流程控制语句</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>语法:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化变量;条件表达式;操作表达式)&#123;</span><br><span class="line">                <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>初始化变量</p><pre><code>就是用var声明的一个普通变量, 通常用于作为计数器使用</code></pre></li><li><p>条件表达式</p><pre><code>用来决定每一次循环是否继续执行   不满足条件则退出循环</code></pre></li><li><p>操作表达式  </p><p>​    每次循环最后执行的代码, 经常用于我们计数器变量进行更新(递增或者递减)</p></li></ul><p>代码体验: </p><p><code>        for (var i = 1; i &lt;= 1000; i++) &#123;             console.log(&#39;你好吗&#39;);         &#125;</code></p><p>断点调试</p><p>执行相同的代码:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入次数&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;= num ; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我错了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行不同的代码:  计数器的作用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年&#x27;</span>+ i +<span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年一岁了, 刚出生&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年一百岁了, 刚死了&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这个人今年&#x27;</span> + i + <span class="string">&#x27;岁了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复某些相同的操作:</p><blockquote><p>案例: 求1-100之间所有整数的累加和</p></blockquote><p>分析: </p><p>需要将储存结果的变量sum, 初始值是0</p><p>sum&#x3D;sum+i</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>; <span class="comment">//求和的变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// sum= sum +i;</span></span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure><blockquote><p>案例: 求1-100之间所有能被3整除的数字的和</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        result += i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1-100之间能被3整除的数的和&#x27;</span> + result);</span><br></pre></td></tr></table></figure><blockquote><p> 案例: 用户输入班级人数, 之后依次输入每个学生的成绩, 最后打印出该班级总的成绩以及班级成绩</p></blockquote><p>分析:</p><ul><li><p>输入总人数</p></li><li><p>一次输入学生的成绩(用score保存起来), 此时我么你需要用到for循环, 弹出的次数跟班级人数有关系, 关系表达式 i&lt;&#x3D; num</p></li><li><p>进行业务处理: 计算成绩.</p><p>​                先求总成绩(sum), 之后求平均成绩(average)</p></li><li><p>弹出结果</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入班级的总人数&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;<span class="comment">//求和的变量</span></span><br><span class="line"><span class="keyword">var</span> average = <span class="number">0</span>; <span class="comment">//求平均值的变量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> score = <span class="title function_">prompt</span>(<span class="string">&#x27;请你输入第&#x27;</span> + i + <span class="string">&#x27;个学生成绩&#x27;</span>); <span class="comment">// prompt取过来的数据是字符型;</span></span><br><span class="line">    sum = sum + <span class="built_in">parseFloat</span>(score);<span class="comment">// score需要转换为数值型</span></span><br><span class="line">&#125;</span><br><span class="line">average = sum / num;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;班级总的成绩是&#x27;</span> + sum);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;班级平均分是&#x27;</span> + average);</span><br></pre></td></tr></table></figure><blockquote><p>案例: 写一行5个星星</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        str = str + <span class="string">&#x27;⭐&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    div.<span class="property">innerHTML</span> = str;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>任意个数的星星</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> str1 = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入星星的个数&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            str = str + <span class="string">&#x27;⭐&lt;br&gt;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            str = str + <span class="string">&#x27;⭐&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div =<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    div.<span class="property">innerHTML</span> = str;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h3><p>语法结构:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (外层的初始化变量; 外层的条件表达式;外层的操作表达式) &#123;</span><br><span class="line">    <span class="keyword">for</span> (里层的初始化变量; 里层的条件表达式; 里层的操作表达式) &#123;</span><br><span class="line">        <span class="comment">//执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以把里面的循环看作外层循环的语句<br>外面的循环循环一次, 里面的循环 执行全部</p><p>代码验证:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i= <span class="number">1</span>; i&lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是外层循环的第&#x27;</span>+ i+<span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j =<span class="number">1</span>; j&lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是里层循环的第&#x27;</span>+ j+<span class="string">&#x27;次&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例:打印五行五列的星星</p><p>思路:</p><blockquote><p>内层循环负责一行打印5个星星<br>外层循环负责打印五行</p></blockquote><p>实施:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>; <span class="comment">//定义一个字符串型的变量来储存星星</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i= <span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j= <span class="number">1</span>; j&lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line">        str = str + <span class="string">&#x27;⭐&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    str = str + <span class="string">&#x27;\n&#x27;</span>  <span class="comment">//如果一行5个星星打印完毕就要另起一行喽</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><p>案例:打印倒三角形</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &lt;= <span class="number">10</span>; j++) &#123;</span><br><span class="line">        str += <span class="string">&#x27;⭐&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><p>作业:打印正三角形</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">11</span>-i; j &lt;= <span class="number">10</span>; j++) &#123;</span><br><span class="line">        str += <span class="string">&#x27;⭐&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><p>打印九九乘法表</p><p>分析</p><blockquote><ol><li>一共9行, 但是每行的个数不一样, 因此需要用到双重for循环</li><li>外层的for循环控制行数i, 循环9次, 可以打印9行</li><li>内层的for循环控制每行公式j</li><li>核心算法:每一行 公式的个数正好和行数一致, j&lt;&#x3D;i</li></ol></blockquote><p>实施</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="comment">//1*2=2</span></span><br><span class="line">    <span class="comment">//str = str +&#x27;\n&#x27;;</span></span><br><span class="line">    str += j + <span class="string">&#x27;x&#x27;</span> + i + <span class="string">&#x27;=&#x27;</span> + i * j +<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    <span class="comment">// str += &#x27;\t&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    str += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>for循环可以重复执行某些相同的代码</li><li>循环可以执行写于不同的代码, 因为我们有计数器</li><li>for循环可以重复执行某些操作, 比如算术运算父加法操作</li><li>随着需求增加, 双重for循环可以做更多,更好看的效果</li><li>双重for循环, 外层循环一次, 内层循环全部执行</li><li>for循环是循环条件和数字直接相关的循环</li><li>分析要比写代码更重要</li><li>一些核心算法想不到, 但是要学会, 分析执行过程</li><li>举一反三,  经常总结,, 做一些相似的案例</li></ol><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>应用环境:</p><p>​    当条件较为复杂是  使用while<br>​    比for更加灵活</p><p>语法结构:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行思路:</p><p>​    当条件表达式结果为true的时候 , 则执行循环体, 否则退出循环</p><p>代码验证:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (num&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好啊&#x27;</span>);</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:</p><p>​    应该初始化变量  </p><p>​    while循环里面应该也有计数器,</p><p>​    完成计数器的更新, 防止死循环</p><p>案例:</p><p>要求<br>    弹出一个提示框 你爱我吗? 如果输入我爱你, 就提示结束, 否则一直询问;<br>分析<br>    弹出输入框, 判断条件比较复杂 我们使用while</p><p>实施</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message= <span class="title function_">prompt</span>(<span class="string">&#x27;你爱我吗?&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (message !== <span class="string">&#x27;我爱你&#x27;</span>) &#123;</span><br><span class="line">    message =<span class="title function_">prompt</span>(<span class="string">&#x27;你爱我吗?&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;我也爱你啊&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><p>语法:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span><br></pre></td></tr></table></figure><p>执行思路:</p><ul><li><p>跟while不同的地方在于 do while先执行循环体, 再判断条件.</p></li><li><p>如果条件表达式为真, 则继续执行循环体, 否则退出循环.</p></li></ul><p>代码体验</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;how are you&#x27;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>注意: </p><p>​    我们的do while循环体至少循环一次</p><h3 id="循环小结"><a href="#循环小结" class="headerlink" title="循环小结"></a>循环小结</h3><ol><li>js中循环有for      while     do while</li><li>三个循环很多情况下可以相互代替</li><li>如果是用来计数, 跟数字相关, 三者使用基本相同, 但是我们更喜欢用for</li><li>while和do..while执可以做更复杂的条件判断, 比for循环灵活一些</li><li>while和do  while执行顺序不一样, while先判断后执行, do…while先执行一次, 再判断执行</li><li>while和do…while执行次数, do…while至少会执行一次循环体, 而while可能一次也不执行</li></ol><h3 id="continue和break关键字"><a href="#continue和break关键字" class="headerlink" title="continue和break关键字"></a>continue和break关键字</h3><blockquote><p>continue</p></blockquote><p>​    用于立即跳出本次循环, 继续下一次循环(本次循环体中continue之后的代码就会少执行一次) </p><p>​    继续执行剩余次数的循环</p><p>代码:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 退出第三次的循环 不执行下面的log语句</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我正在吃第&#x27;</span>+ i+<span class="string">&#x27;包子&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例:</p><p>​    求1-100之间  除了能被7整除之外的整数和</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure><blockquote><p>break</p></blockquote><p>​    退出整个循环</p><p>案例:</p><p>​    吃到第三个包子时 发现有虫子, 不再吃包子了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第&#x27;</span>+i+<span class="string">&#x27;个包子有虫子,不吃了&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我正在吃第&#x27;</span>+ i +<span class="string">&#x27;个包子&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JS命名规范以及语法格式"><a href="#JS命名规范以及语法格式" class="headerlink" title="JS命名规范以及语法格式"></a>JS命名规范以及语法格式</h1><h2 id="标识符命名规范"><a href="#标识符命名规范" class="headerlink" title="标识符命名规范"></a>标识符命名规范</h2><ol><li>​    变量, 函数的命名必须有意义</li><li>​    变量用名词</li><li>​    函数的名称用动词</li></ol><h2 id="操作符规范"><a href="#操作符规范" class="headerlink" title="操作符规范"></a>操作符规范</h2><p>​    操作符左右两侧保留一个空格</p><h2 id="单行注释规范"><a href="#单行注释规范" class="headerlink" title="单行注释规范"></a>单行注释规范</h2><p>​    单行注释&#x2F;&#x2F;</p><h2 id="其他规范"><a href="#其他规范" class="headerlink" title="其他规范"></a>其他规范</h2><p>…</p>]]></content>
    
    
    <summary type="html">内容包括 流程控制 等</summary>
    
    
    
    <category term="JavaScript" scheme="http://l1562007999.github.io/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://l1562007999.github.io/tags/JS/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JS-JS基础-1</title>
    <link href="http://l1562007999.github.io/2022/03/25/JS-JS%E5%9F%BA%E7%A1%80-1/"/>
    <id>http://l1562007999.github.io/2022/03/25/JS-JS%E5%9F%BA%E7%A1%80-1/</id>
    <published>2022-03-25T01:30:02.000Z</published>
    <updated>2022-04-06T11:12:04.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h1><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><p>我们有 机器语言, 汇编语言, 高级语言</p><p>高级语言里面有</p><ol><li>C语言  puts(“你好”);</li><li>C++ </li><li>Java   <code>System.out.println&quot;你好&quot;;</code></li><li>C#</li><li>PHP   <code>echo&quot;你好&quot;;</code></li><li>Python</li><li>JavaScript <code>alert(&quot;你好&quot;);</code></li><li>Go语言</li><li>Object-C</li><li>Swifit</li></ol><h2 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h2><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>计算机内部使用0和1来表示数据</p><p>数据存储单位<br>    bit&lt;byte&lt;kb&lt;GB&lt;TB<br>    位bit:1bit可以保存一个0或者1(最小的存储单位)<br>    字节(Byte): 1B&#x3D;8b<br>    千字节kb: 1kb&#x3D;1023b<br>    兆字节MB: 1MB&#x3D;1024kb<br>    吉字节GB:1GB&#x3D;1024MB<br>    太字节TB:1TB&#x3D;1024GB<br>    &#96;&#96;&#96;&#96;&#96;</p><h2 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h2><h1 id="初识JS"><a href="#初识JS" class="headerlink" title="初识JS"></a>初识JS</h1><p>发展历史</p><p>最初目的:表单验证</p><p>JS引擎逐行执行代码, 所以叫脚本语言</p><h2 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h2><p>ECMAScript<br>    JavaScript语法<br>        规定了JS编程语法和基础核心知识,时浏览器厂商共同遵守的一套JS语法工业标准</p><p>DOM: 文档对象模型</p><p>BOM: 浏览器对象模型</p><h2 id="JS输入输出语句"><a href="#JS输入输出语句" class="headerlink" title="JS输入输出语句"></a>JS输入输出语句</h2><p><code>alert(msg)</code><br>    浏览器弹出警示框<br>        归属浏览器<br><code>console.log(msg)</code><br>    浏览器控制台打印输出信息<br>        归属浏览器<br><code>prompt(info)</code><br>    浏览器弹出输入框, 用户可以输入<br>        归属浏览器</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>装数据的盒子<br>用于存放数据的容器, 通过变量名获取数据,甚至数据修改<br>本质: 变量是程序在内存中申请的一块用来存放数据的空间</p><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><p>…</p><ol start="3"><li><p>变量初始化</p><p><code>var age =18</code></p><p><code>var myname =&#39;Sammy梁&#39;</code></p></li></ol><p>​    案例: 用户名的输入与输出        </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 1.用户输入姓名 存储到一个 myname的变量里面</span><br><span class="line">     var myname =prompt(&#x27;请输入你的名字&#x27;)</span><br><span class="line">     // 输出用户名</span><br><span class="line">     alert(myname)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="变量语法扩展"><a href="#变量语法扩展" class="headerlink" title="变量语法扩展"></a>变量语法扩展</h2><ol><li>更新变量<br>一个变量被重新赋值后, 它原有的值就会被覆盖, 变量值将以最后一次赋的值为准.</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myname = <span class="string">&#x27;pink老师&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname);</span><br><span class="line">myname = <span class="string">&#x27;迪丽热巴&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>声明多个变量<br>只需写一个var 多个变量之间用英文逗号隔开</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>,</span><br><span class="line">    address = <span class="string">&#x27;火影村&#x27;</span>,</span><br><span class="line">    salary = <span class="number">2000</span>;</span><br></pre></td></tr></table></figure></li><li><p>声明变量的特殊情况<br>只声明   不赋值: 显示undefined<br>不声明  不赋值: 直接使用会报错<br>不声明 直接赋值: qq &#x3D;10;    会变成全局变量&amp;&amp;能正常输出</p></li></ol><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li>由下小写字母, 数字,下划线_   美元符号$  组成    !不允许用&amp;</li><li>严格区分大小写</li><li>不能数字开头</li><li>不能是关键词, 保留字:var for while</li><li>变量名必须有意义</li><li>遵守驼峰命名法:myFirstName</li></ul><p>​            第一个单词小写, 之后每个单词首字母大写</p><h2 id="交换变量案例"><a href="#交换变量案例" class="headerlink" title="交换变量案例"></a>交换变量案例</h2><p>要求:交换两个变量的值</p><p>实现思路: 使用一个临时变量, 用来做中间储存</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b =<span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> s ;  <span class="comment">//临时变量s</span></span><br><span class="line">s=a;</span><br><span class="line">a=b;</span><br><span class="line">b=s;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b) <span class="comment">//2,1</span></span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>充分利用空间, 定义不同数据类型</p><p>JS的变量数据类型是 只有在程序在运行过程中, 根据等号右边的值来确定的</p><h2 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul><li><p>默认值为0</p></li><li><p>数字型范围<br>JS中 数值的最大值和最小值<br><code>alert (Number.MAX_VALUE);</code><br><code>alert (Number.MIN_VALUE);</code></p></li><li><p>三个特殊值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无穷大</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> * <span class="number">2</span>);<span class="comment">// Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> * <span class="number">2</span>); <span class="comment">// -Infiinity</span></span><br><span class="line"><span class="comment">// 7. 非数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink-100&#x27;</span> - <span class="number">100</span>); <span class="comment">// NaN 非数值</span></span><br></pre></td></tr></table></figure></li><li><p>NaN</p><p>非数值  not a number</p></li><li><p>isNaN</p><p>​    这个方法用来判断非数字, 并且返回一个值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">12</span>));  <span class="comment">//false</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;pink老师&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">### <span class="title class_">String</span></span><br><span class="line"></span><br><span class="line">+ 字符串类型, 如<span class="string">&quot;张三&quot;</span>, js里面  字符串都带引号</span><br><span class="line"></span><br><span class="line">+ 只要加引号的都视为字符串类型的数据</span><br><span class="line"></span><br><span class="line">&gt;<span class="string">&#x27;123&#x27;</span> 是字符串, 不是数值</span><br><span class="line"></span><br><span class="line">+ 推荐使用单引号</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">var str = &quot;我是&#x27;高富帅&#x27;Sammy&quot;</span></span><br><span class="line"><span class="string">var str= &#x27;我是&quot;高富帅&quot;Sammy&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>口诀: 外双内单  外单内双</p></blockquote><ul><li>字符串的转义符\</li></ul><blockquote><p><img src="/2022/03/25/JS-JS%E5%9F%BA%E7%A1%80-1/image-20220325104650959.png" alt="image-20220325104650959"></p></blockquote><ul><li>字符串长度</li></ul><p>判断用户输入的字符数量是否符合要求</p><p>字符串是由若干字符组成的,这些字符的数量就是字符串的长度. 通过字符串的length属性就可以获取整个字符串的长度</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;my name is Andy&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>); <span class="comment">//15  一个空格也是一个字符哦!</span></span><br></pre></td></tr></table></figure><ul><li>字符串拼接</li></ul><p>多个字符串可以使用 + 进行拼接, 其拼接方式为</p><blockquote><p>字符串+任何类型&#x3D;拼接后的新字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27; &#x27;</span>+ <span class="string">&#x27;World&#x27;</span>);   <span class="comment">//hello world</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;沙漠&#x27;</span> + <span class="string">&#x27;骆驼&#x27;</span>);<span class="comment">//(字符串的)   沙漠骆驼</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + <span class="number">18</span>);<span class="comment">//pink老师18</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pink老师&#x27;</span> + <span class="literal">true</span>); <span class="comment">//pink老师true</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12</span> + <span class="number">12</span>); <span class="comment">//24</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span> + <span class="number">12</span>); <span class="comment">//1212</span></span><br></pre></td></tr></table></figure><ul><li>注意</li></ul><p><em><strong>!!!纯数值相加</strong></em><br><em><strong>!!!字符相连</strong></em></p><ul><li>字符串拼接加强 :实现变量代入</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">19</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Sammy今年&#x27;</span> + age + <span class="string">&#x27;岁啦&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>先写完整 固定的字符串  在插入变量的地方加入一组引号 和两个+ +</p><p>引引加加</p></blockquote><blockquote><p>变量不能添加引号, 因为加引号就会变成字符串</p></blockquote><ul><li>案例: 显示输入年龄的警示框</li></ul><blockquote><p>弹出输入框promt, 让用户输入年龄<br>把用户输入的值用变量保存起来, 把刚才输入的年龄与所要输出的字符串拼接<br>使用alert语句弹出警示框</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入你的年龄:&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;您今年已经&#x27;</span> + age + <span class="string">&#x27;碎了&#x27;</span>;</span><br><span class="line">    <span class="title function_">alert</span>(str);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>布尔值类型, 如ture, false, 等价于1和0</p><p>默认值false</p><p>被赋予true与false的变量参与运算时, true算作1, false算作0</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = ture; <span class="comment">//flag 布尔型</span></span><br><span class="line"><span class="keyword">var</span> flag1 = <span class="literal">false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag + <span class="number">1</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag1 + <span class="number">1</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><blockquote><p>var a; </p><p>声明了变量a但是没有给值, 此时a &#x3D; undefined </p></blockquote><p>undefined与字符串相加 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sss;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sss + <span class="string">&#x27;pink&#x27;</span>);<span class="comment">//undefinedpink</span></span><br><span class="line"><span class="keyword">var</span> myname = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname + <span class="string">&#x27;pink&#x27;</span>);<span class="comment">//undefinedpink</span></span><br></pre></td></tr></table></figure><p>undefined与数值相加</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sasha;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + sasha);<span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (<span class="literal">null</span>+<span class="string">&#x27;pink&#x27;</span>);  <span class="comment">// nullpink</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> + <span class="number">1</span>);   <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vari = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好&#x27;</span> + vari); <span class="comment">// 你好null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span> + vari); <span class="comment">// 11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> + vari); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="检测数据类型"><a href="#检测数据类型" class="headerlink" title="检测数据类型"></a>检测数据类型</h2><p>typeof 可以用来检测数据类型</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> str); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span>; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> flag); <span class="comment">// boolean</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vari = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> vari); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> timer = <span class="literal">null</span> ;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//object</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>prompt取过来的值是 字符型的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;请输入你的年龄:&#x27;</span>) <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age); <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>通过控制台的颜色 可以判断数据类型</p><blockquote><p>蓝色 数字型<br>黑色 字符型<br>深蓝色 布尔型<br>灰色 undefined    null</p></blockquote><h2 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换!!!"></a>数据类型的转换!!!</h2><p>使用表单, prompt获取过来的数据默认是字符串类型的, 此时就不能直接简单的进行加法运算, 而需要转换变量的数据类型.</p><h3 id="转换为字符串类型"><a href="#转换为字符串类型" class="headerlink" title="转换为字符串类型"></a>转换为字符串类型</h3><blockquote><p>变量.toString()</p><p><code>var num=1; alert ( num.toString() );</code></p></blockquote><blockquote><p>String(变量)    强制转换</p><p><code>var num=1; alert(String(num))</code></p></blockquote><blockquote><p><strong>加号拼接字符串</strong></p><p>!   和字符串拼接的结果都是字符串</p><p><code>var num=1; alert(num+&quot; &quot;);</code></p></blockquote><p>注意</p><p>.toSring()和String(  )使用方法不一样</p><blockquote><p>三种方式, 我们更喜欢用第三种加号拼接字符串转换方式, 这一种方式也称之为隐式转换</p></blockquote><h3 id="转换为数字型-重点"><a href="#转换为数字型-重点" class="headerlink" title="转换为数字型(重点)"></a>转换为数字型(重点)</h3><blockquote><p>得到整数</p><blockquote><p>1.parseInt(变量)  </p></blockquote><p>可以把 字符型的数字转换为数字型  得到的是整数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(age)); <span class="comment">// 蓝色数字型</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;3.14&#x27;</span>));<span class="comment">// parseInt 得到整数  自动切除小数部分 不会进位</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;120px&#x27;</span>)); <span class="comment">//  120  会去掉这个px单位</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;rem120px&#x27;</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>得到小数</p><blockquote><p>2.parseFloat(变量) </p></blockquote><p>可以把字符型的数字转换为数字型  得到的是小数&#x2F;浮点数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">// 3.14</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;120px&#x27;</span>)); <span class="comment">//  120  会去掉这个px单位</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;rem120px&#x27;</span>)); <span class="comment">//  NaN</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>利用Number(变量)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(str)); <span class="comment">// 123 蓝色  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;12&#x27;</span>)); <span class="comment">// 12 蓝色 </span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>利用了算术运算 - * &#x2F;  实现隐式转换  加号不行哦</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;12&#x27;</span> - <span class="number">0</span>); <span class="comment">// 12 蓝色</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span> - <span class="string">&#x27;120&#x27;</span>); <span class="comment">// 12 蓝色</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span> * <span class="number">1</span>); <span class="comment">// 123 蓝色    </span></span><br></pre></td></tr></table></figure></blockquote><p>案例 简单加法器</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> number1 = <span class="title function_">prompt</span>(<span class="string">&#x27;请你输入第一个数值:&#x27;</span>); <span class="comment">// 字符型</span></span><br><span class="line">    <span class="keyword">var</span> number2 = <span class="title function_">prompt</span>(<span class="string">&#x27;请你输入第二个数值:&#x27;</span>);  <span class="comment">// 字符型</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">parseFloat</span>(number2) + <span class="built_in">parseFloat</span>(number1) ; <span class="comment">//记得转换为数值型</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;相加后的结果是:&#x27;</span> + result); </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h3><blockquote><p>Boolean() 函数</p><p>空 或者 否定的值会被转换为false, 如’ ‘, 0, NaN, null, undefined</p><p>其余的值都会转换为true</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="title class_">NaN</span>)); <span class="comment">// false</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&#x27;小白&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h1><h2 id="解释型语言和编译型语言"><a href="#解释型语言和编译型语言" class="headerlink" title="解释型语言和编译型语言"></a>解释型语言和编译型语言</h2><p>编程语言</p><p>到</p><p>翻译器:</p><blockquote><p>翻译器翻译的方式有两种</p><blockquote><p>编译<br>    代码执行之前进行编译, 生成中间代码文件内</p></blockquote><blockquote><p>解释<br>    运行时进行及时解释, 并立即执行</p></blockquote></blockquote><p>到</p><p>机器语言</p><h2 id="标识符-关键字-保留字"><a href="#标识符-关键字-保留字" class="headerlink" title="标识符\ 关键字\ 保留字"></a>标识符\ 关键字\ 保留字</h2><blockquote><p>标识(zhi)符</p><p>就是指开发人员为变量、属性、函数、参数取的名字。<br>标识符不能是关键字或保留字。</p></blockquote><blockquote><p>关键字</p><p>是指 JS本身已经使用了的字，不能再用它们充当变量名、方法名。</p><p>包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、<br>instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p></blockquote><blockquote><p>保留字</p><p>实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能<br>使用它们当变量名或方法名。</p><p>包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、<br>fimal、float、goto、implements、import、int、interface、long、mative、package、<br>private、protected、public、short、static、super、synchronized、throws、transient、<br>volatile 等。</p><p>如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</p></blockquote><p>案例: 依次询问并获取用户的姓名、年龄、性别，并打印用户信息</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="title function_">prompt</span>(<span class="string">&#x27;你的名字:&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> age = <span class="title function_">prompt</span>(<span class="string">&#x27;你的年龄:&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> gender = <span class="title function_">prompt</span>(<span class="string">&#x27;你的性别:&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;你是名字是:&#x27;</span>+ username + <span class="string">&#x27;;\n&#x27;</span> + <span class="string">&#x27;你的年龄是&#x27;</span> + age+ <span class="string">&#x27;;\n&#x27;</span> + <span class="string">&#x27;你的性别是&#x27;</span> + gender+ <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="comment">// 换行要在引号中</span></span><br></pre></td></tr></table></figure><h1 id="JS运算符"><a href="#JS运算符" class="headerlink" title="JS运算符"></a>JS运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+</span><br><span class="line">-</span><br><span class="line">*</span><br><span class="line">/</span><br><span class="line">%</span><br></pre></td></tr></table></figure><blockquote><p>% 取余数运算符</p><p>取余数(取模)      返回除法的余数      9%2&#x3D; 1</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span> % <span class="number">2</span>); <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> % <span class="number">3</span>); <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> % <span class="number">5</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>注意</strong></p><blockquote><p> 浮点数的最高精度是17为小数, 但在进行算数计算时, 其精确度远远不如整数</p></blockquote><blockquote><p>浮点数运算</p><p> 浮点数 算术运算里面有问题</p><p><code> console.log(0.1 + 0.2); //0.30000000000000004  console.log(0.07 * 100); // 7.000000000000001</code></p><p>我们不能直接拿着浮点数进行相比较 是否相等</p><p><code>        var num= 0.1 + 0.2; console.log(num == 0.3); //false</code></p><p>所以不要直接判断两个浮点数是否相等</p></blockquote><p><strong>课堂提问</strong></p><blockquote><p>我们怎么判断一个数能够被整除呢?</p><p>它的余数是0就说明这个数能被某个数整除, 这就是% 取余运算符的主要用途</p></blockquote><blockquote><p>算术运算符的优先级</p><p>先乘除<br>后加减<br>如有小括号  就先算小括号里面的</p></blockquote><p><strong>表达式于返回值</strong></p><blockquote><p>表达式</p><p>由数字 运算符 变量组成的式子</p><p>1 + 1</p></blockquote><blockquote><p>返回值</p><p>表达式最终都会有一个结果   返回给我们  我们称之为返回值</p></blockquote><blockquote><p>在程序里面 从右到左算</p><p><code>var num = 1+1</code></p><p>把右边表达式计算完毕 返回值给左边</p></blockquote><h2 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h2><p><code>i++</code>    等于i+1</p><p><code>i--</code>    等于i-1</p><blockquote><p>前置递增</p><p>++age </p><p>先自增1 再参与运算</p></blockquote><blockquote><p>后置递增</p><p>age++</p><p>age先参与运算,返回结果,  本次不自增1,  运算结束后age再自增1</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age++ + <span class="number">10</span>); <span class="comment">//20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">// 11</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> f = e++ + ++e;    <span class="comment">// e++ = 10  e=11  ++e=11+1=12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f);        <span class="comment">// 10 +12 = 22</span></span><br></pre></td></tr></table></figure><p>后置递增比较麻烦, 但是一般习惯写后置递增, 但是不要写到运算符里面去</p><p><strong>开发时, 大多使用后置递增运算符, 并且代码独占一行, 例如num++; 或者num–;</strong></p></blockquote><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符(关系运算符) 是两个数据进行比较时所使用的运算符, 比较运算后, 会返回一个布尔值(true&#x2F; false) 作为比较运算的关系</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;</span><br><span class="line">&gt;</span><br><span class="line">&gt;=      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">5</span>); <span class="comment">// false</span></span><br><span class="line">&lt;=      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> &lt;= <span class="number">4</span>); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">==      我们程序里面的等于符号 是==  默认转换数据类型  会把字符串型的数据转换为数字型 只要求值相等就可以</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> == <span class="number">5</span>); <span class="comment">// false</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sammy&#x27;</span> == <span class="string">&#x27;Sammy&#x27;</span>); <span class="comment">//false</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> == <span class="number">18</span>); <span class="comment">// true</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> == <span class="string">&#x27;18&#x27;</span>); <span class="comment">// true 只要求值相等就可以 会把字符串型的数据转换为数字型</span></span><br><span class="line"></span><br><span class="line">!=      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> != <span class="number">18</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">===     全等号  一模一样  要求两侧的值与数据类型完全一致才可以 <span class="literal">true</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> === <span class="number">18</span>); <span class="comment">// true</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">18</span> === <span class="string">&#x27;18&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">!==     非全等</span><br></pre></td></tr></table></figure><p>总结</p><blockquote><p>等号</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">=   赋值  把右边给左边</span><br><span class="line">==  判断  判断两边值是否相等(注意此时有隐式转换)</span><br><span class="line">=== 全等  判断两边的值和数据类型是否完全相等</span><br></pre></td></tr></table></figure></blockquote><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><blockquote><p>&amp;&amp;  与and 符号 值或者表达式参与逻辑运算</p><p>逻辑与  <strong>两侧为true 才为true</strong>     否则为false</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">5</span> &amp;&amp; <span class="number">3</span> &gt; <span class="number">2</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>||    或 or符号      逻辑非 || or  两侧都为假 结果才是假   <strong>只要有一侧为true  结果就为true</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">5</span> || <span class="number">3</span> &gt; <span class="number">2</span>); <span class="comment">//true</span></span><br><span class="line">&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt; <span class="number">5</span> || <span class="number">3</span> &lt; <span class="number">2</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>!     非 not   也叫做取反符    逻辑非 !</p><p><code>console.log(!true); //flase</code></p></blockquote><blockquote><p><em><strong>短路运算(逻辑中断)</strong></em></p><blockquote><p>当有多个表达式(值), 左边的表达式值可以确定结果时, 就不在继续运算右边的表达式值;</p></blockquote><blockquote><p>逻辑与</p><p>语法:  表达式1 &amp;&amp;表达式2</p><p>如果第一个表达式的值为真, 则返回表达式2的结果  </p><p><code>console.log(123 &amp;&amp; 456); //456</code></p><p>如果第一个表达式的值为假, 则返回表达式1的结果  </p><p><code>console.log(0 &amp;&amp; 456); //0 console.log(0 &amp;&amp; 1 + 2 &amp;&amp; 456 *789); //0 console.log(&#39;&#39; &amp;&amp; 1 + 2 &amp;&amp; 456 *789); //   </code></p><p>逻辑与是天使  遇到好人(真)就放过,  遇到坏人(假)让他显示出来</p></blockquote><blockquote><p>逻辑或:  表达式1 || 表达式2</p><p>如果第一个表达式的值为真, 则返回表达式1的结果</p><p><code>console.log(123 || 456); // 123</code></p><p>如果第一个表达式的值为假, 则返回表达式2的结果</p><p><code>console.log(0  || 456); // 456 console.log(0 || 1 + 2 || 456 *789); // 3 console.log(&#39;&#39; || 1 + 2 || 456 *789); //  3 </code></p><p>逻辑非是恶魔   遇到好人就(真)抓起来  遇到坏人(假)就放过</p></blockquote><p><em><strong>逻辑中断很重要  会影响程序的运行结果</strong></em></p></blockquote><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><blockquote><p>&#x3D;   直接赋值</p><p>+&#x3D;  加一个数后 再赋值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;   </span><br><span class="line">age += <span class="number">5</span>;    <span class="comment">//age+5后赋值给age</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) ; <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p>-&#x3D;</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>;   </span><br><span class="line">age -= <span class="number">5</span>;   <span class="comment">//age-5后赋值给age</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) ; <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><img src="/2022/03/25/JS-JS%E5%9F%BA%E7%A1%80-1/%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="运算符优先级"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>一元运算符里面的逻辑非 优先级很高</p><p>逻辑与  比  逻辑或   优先级高</p></blockquote>]]></content>
    
    
    <summary type="html">内容包括&quot;变量&quot;&quot;数据类型&quot;&quot;JS运算符&quot;</summary>
    
    
    
    <category term="JavaScript" scheme="http://l1562007999.github.io/categories/JavaScript/"/>
    
    
    <category term="JS" scheme="http://l1562007999.github.io/tags/JS/"/>
    
    <category term="学习" scheme="http://l1562007999.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>一点感悟</title>
    <link href="http://l1562007999.github.io/2022/03/21/%E4%B8%80%E7%82%B9%E6%84%9F%E6%82%9F%E6%97%A5%E6%9C%9F/"/>
    <id>http://l1562007999.github.io/2022/03/21/%E4%B8%80%E7%82%B9%E6%84%9F%E6%82%9F%E6%97%A5%E6%9C%9F/</id>
    <published>2022-03-21T00:10:32.000Z</published>
    <updated>2022-04-06T11:06:15.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本周的一些感悟"><a href="#本周的一些感悟" class="headerlink" title="本周的一些感悟"></a>本周的一些感悟</h1><p>我发现记录生活琐事也无意义.</p><p>将有意义的事情记录下来应该是不错的选择.</p><p>比如突然明白的道理…</p><p>如果想要靠学前端为生,还有很长的路要走.</p><p>至于翻译, 就暂且随着课程上吧.</p>]]></content>
    
    
    <summary type="html">不能记流水账来了</summary>
    
    
    
    <category term="记录生活" scheme="http://l1562007999.github.io/categories/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="周记" scheme="http://l1562007999.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第二周回顾</title>
    <link href="http://l1562007999.github.io/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/"/>
    <id>http://l1562007999.github.io/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/</id>
    <published>2022-03-13T00:10:32.000Z</published>
    <updated>2022-04-08T04:35:51.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>来看看本周都有哪些主要事件吧!</p><p><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/Snipaste_2022-03-13_08-42-36.png" alt="图片"></p><h2 id="本周学习前端"><a href="#本周学习前端" class="headerlink" title="本周学习前端"></a>本周学习前端</h2><p>不敢相信, 与前一周相比  我竟然学习了这么多内容</p><p><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/Snipaste_2022-03-13_08-49-53.png" alt="图片"></p><h2 id="本周的英语学习"><a href="#本周的英语学习" class="headerlink" title="本周的英语学习"></a>本周的英语学习</h2><p>本周有坚持背单词, 本来选择的是雅思词汇基础, 但是太简单了.</p><p>所以选择用之前Anki里面的GRE词汇 作为词表 导入欧陆词典中<br><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/danci.jpg" alt="danci"></p><p>本周完成一套2018年的大英赛的初试试卷, 试卷总体简单, 但还是有不会的地方. </p><p>另外,上面的看数据写作文, 不会写, 看需要多看看范文.</p><p>今天, 还要完成一套试卷, 不然进度太慢了.</p><h2 id="本周图片速览"><a href="#本周图片速览" class="headerlink" title="本周图片速览"></a>本周图片速览</h2><p>上周日在升升做了核酸检测</p><p><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/IMG_20220306_125612.jpg" alt="IMG_20220306_125612"></p><p>西方语言文化的课后问题(留给未发言的同学思考的)</p><p><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/IMG_20220311_162251.jpg" alt="IMG_20220311_162251"></p><p>周五上午没课  7点多就去图书馆了   第一次遇到 到了门口还没开门的情况(太早啦!)</p><p><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/IMG_20220311_074250.jpg" alt="IMG_20220311_074250"></p><p><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/IMG_20220309_162740.jpg" alt="IMG_20220309_162740"></p><p><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/1646751944555.png" alt="1646751944555"></p><p><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/1646751727893.png" alt="1646751727893"></p><p>万万不可懈怠,万万不可放松警惕, 万万不可惹是生非, 管好自己, 不顾他人!!!</p><p><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/-1668013178.jpg" alt="-1668013178"></p><p>记录丢人过程</p><p><img src="/2022/03/13/%E7%AC%AC%E4%BA%8C%E5%91%A8%E5%9B%9E%E9%A1%BE/-4dcb99edd8e6d7f1.jpg" alt="-4dcb99edd8e6d7f1"></p>]]></content>
    
    
    <summary type="html">第二周我又在做什么呢?</summary>
    
    
    
    <category term="记录生活" scheme="http://l1562007999.github.io/categories/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="周记" scheme="http://l1562007999.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>第一周回顾</title>
    <link href="http://l1562007999.github.io/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/"/>
    <id>http://l1562007999.github.io/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/</id>
    <published>2022-03-06T00:19:15.000Z</published>
    <updated>2022-04-06T11:13:28.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="纵览"><a href="#纵览" class="headerlink" title="纵览"></a>纵览</h1><p>先看一下本周的大概时间吧</p><p><img src="/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/Snipaste_2022-03-06_08-33-08.png" alt="Snipaste_2022-03-06_08-33-08"></p><h2 id="本周学习前端"><a href="#本周学习前端" class="headerlink" title="本周学习前端"></a>本周学习前端</h2><p>本周主要学习了的节点操作 并结束了DOM基础这一阶段, 今天开始学了BOM了哟!😄</p><p><img src="/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/Snipaste_2022-03-06_08-39-59.png" alt="图片"></p><h2 id="本周的英语学习"><a href="#本周的英语学习" class="headerlink" title="本周的英语学习"></a>本周的英语学习</h2><p>英语还是要学习的 寒假没学啥英语 单词也没记</p><p>从本周四开始记单词了</p><p>以后每天都要欧陆词典记单词</p><p>计划是晚上7.30 回宿舍 吃完饭之后开始记单词</p><p><img src="/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/%E8%AE%B0%E5%8D%95%E8%AF%8D%E6%89%93%E5%8D%A1.jpg" alt="记单词打开"></p><p>还有就是做英语题目 保持有新的知识点  持续学习</p><p>对了 还要记得阅读Big Think 和微信公众要别人的英语新闻短文与翻译 </p><p>从中学习英语单词, 英语表达, 英语翻译等</p><h2 id="本周图片速览"><a href="#本周图片速览" class="headerlink" title="本周图片速览"></a>本周图片速览</h2><p>我的QQ头像哦  来自电影 守护者联盟的Jack Frost</p><p><img src="/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/-8ea5b751171375f.jpg" alt="图片"></p><p>用草料制作了一张博客链接的二维码</p><p><img src="/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/30_88a01a949cdd75e779db57117ff360ca.png" alt="30_88a01a949cdd75e779db57117ff360ca"></p><p>给室友买的生日蛋糕</p><p><img src="/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/IMG_20220304_122733.jpg" alt="IMG_20220304_122733"></p><p><img src="/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/Screenshot_2022-03-02-22-51-47-615_com.tencent.mm.jpg" alt="Screenshot_2022-03-02-22-51-47-615_com.tencent.mm"></p><p>文艺复兴的精神学了这么久也没记住  某天的晚上又查了以下</p><p>文艺复新精神就是人主义精神  核心是以人为本  主张人的个性的解放  反对愚昧的迷信</p><p>人文主义精神由资产阶级倡导</p><p><img src="/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/Screenshot_2022-03-03-21-48-25-574_com.android.br.jpg" alt="Screenshot_2022-03-03-21-48-25-574_com.android.br"></p><p>好啦 本周的记录就到这里辣 </p><p>我们下周同一时间再见!!!</p><p><img src="/2022/03/06/%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9B%9E%E9%A1%BE/b0617ea7a750f82710383a0a5b09be42.jpg" alt="记录丢人过程"></p>]]></content>
    
    
    <summary type="html">在开学这一周里面, 我做了什么呢?</summary>
    
    
    
    <category term="记录生活" scheme="http://l1562007999.github.io/categories/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="总结" scheme="http://l1562007999.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="周记" scheme="http://l1562007999.github.io/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>服务板块的建议</title>
    <link href="http://l1562007999.github.io/2022/03/05/%E6%9C%8D%E5%8A%A1%E6%9D%BF%E5%9D%97%E7%9A%84%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    <id>http://l1562007999.github.io/2022/03/05/%E6%9C%8D%E5%8A%A1%E6%9D%BF%E5%9D%97%E7%9A%84%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</id>
    <published>2022-03-05T04:09:16.000Z</published>
    <updated>2022-04-06T11:11:40.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="校园网"><a href="#校园网" class="headerlink" title="校园网"></a>校园网</h1><h2 id="上网认证的密码是什么"><a href="#上网认证的密码是什么" class="headerlink" title="上网认证的密码是什么"></a>上网认证的密码是什么</h2><p>校园网登录密码与智慧校园的登录密码一样，默认取身份证号后6位，如果末位为X，则X为大写的X。</p><p>如果绑定了手机号，可以通过<a href="http://zhlgd.whut.edu.cn/tpass/pwd">智慧校园登录页面</a>的找回功能找回密码。密码如果在智慧理工大或迎新系统中修改过，则为修改后的密码。</p><p>如果没有绑定手机。可以在上班时间带上校园卡等证件到鉴主20层（电话：<a href="87297256">87297256</a>）或余区港口楼对面计算机学院实验中心2楼（电话：<a href="86548310">86548310</a>）重置密码。</p><h2 id="获取IP地址错误（或IP地址已经在线）"><a href="#获取IP地址错误（或IP地址已经在线）" class="headerlink" title="获取IP地址错误（或IP地址已经在线）"></a>获取IP地址错误（或IP地址已经在线）</h2><ol><li><p>检查你的网络配置是否为自动获取ip地址和自动获取DNS，如果不是请设置成自动获取。如果是按2处理；</p></li><li><p>网卡先禁用再启用或先断开网络再重新连接；如果仍这样按3处理；</p></li><li><p>点击左下角”开始”菜单，在”搜索”或”运行”输入：cmd回车，出现黑底白字的命令语言界面。再提示符&gt;后输入：ipconfig  &#x2F;release 回车，再在&gt;后输入：ipconfig  &#x2F;renew回车；</p></li><li><p>再按正常流程上网。</p></li><li><p>咨询电话：<a href="87651975">87651975</a></p></li></ol><h2 id="无法弹出登录页面"><a href="#无法弹出登录页面" class="headerlink" title="无法弹出登录页面"></a>无法弹出登录页面</h2><h3 id="情况一、小米、红米和魅族部分手机浏览器模式修改"><a href="#情况一、小米、红米和魅族部分手机浏览器模式修改" class="headerlink" title="情况一、小米、红米和魅族部分手机浏览器模式修改"></a>情况一、小米、红米和魅族部分手机浏览器模式修改</h3><p>部分苹果、小米、红米等手机或PAD弹不出登录页面，可参照以下方案处理<br>咨询电话：<a href="87651975">87651975</a></p><h4 id="方案一、将浏览器的标识设置为iphone模式（设置后，重启一下）"><a href="#方案一、将浏览器的标识设置为iphone模式（设置后，重启一下）" class="headerlink" title="方案一、将浏览器的标识设置为iphone模式（设置后，重启一下）"></a>方案一、将浏览器的标识设置为iphone模式（设置后，重启一下）</h4><p>打开浏览器，选择设置→高级设置→浏览器标识→选取iphone （如图示）。</p><p>温馨提示: 因浏览器不同, 进入浏览器设置后可能有所差别, 请自行尝试浏览器设置下的所有选项,找到正确的设置.</p><p><img src="/2022/03/05/%E6%9C%8D%E5%8A%A1%E6%9D%BF%E5%9D%97%E7%9A%84%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/FotoJet.png" alt="图片"></p><h4 id="方案二、使用其他浏览器"><a href="#方案二、使用其他浏览器" class="headerlink" title="方案二、使用其他浏览器"></a>方案二、使用其他浏览器</h4><p>连上校园WIFI信号后，使用其他浏览器（Safari、UC等）打开网页。</p><h4 id="方案三、清理浏览器的缓存，然后在浏览器地址栏输入：http-1-1-1-1"><a href="#方案三、清理浏览器的缓存，然后在浏览器地址栏输入：http-1-1-1-1" class="headerlink" title="方案三、清理浏览器的缓存，然后在浏览器地址栏输入：http://1.1.1.1"></a>方案三、清理浏览器的缓存，然后在浏览器地址栏输入：<a href="http://1.1.1.1/">http://1.1.1.1</a></h4><h3 id="情况二、IP设置问题"><a href="#情况二、IP设置问题" class="headerlink" title="情况二、IP设置问题"></a>情况二、IP设置问题</h3><p>（1）电脑的IP地址设置，需要选择自动获取IP地址和自动获取DNS服务器地址；</p><p><img src="/2022/03/05/%E6%9C%8D%E5%8A%A1%E6%9D%BF%E5%9D%97%E7%9A%84%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/%E5%9B%BE%E7%89%874.png" alt="图片4"></p><p>（2）手机需要设置成DHCP模式（如图）</p><img src="图片5.png" style="zoom: 50%;" /><h2 id="可以多设备在线吗"><a href="#可以多设备在线吗" class="headerlink" title="可以多设备在线吗"></a>可以多设备在线吗</h2><p>根据系统设置，不同区域允许的在线数可能不一样，在相应的区域使用网络，如果超出并发数，系统会将最先上线的设备挤出。</p><h2 id="“portal-not-response”错误的原因及解决方法"><a href="#“portal-not-response”错误的原因及解决方法" class="headerlink" title="“portal not response”错误的原因及解决方法"></a>“portal not response”错误的原因及解决方法</h2><p>1、直接输入认证地址报错解决方法：如果浏览器可以弹出登录页面，请使用直接弹出的方式；如果浏览器弹不出来登录页面，应该是浏览器启用了防弹出窗设置，可以修改或停用这个设置，或在浏览器中输入：1.1.1.1或2.2.2.2</p><p>2、我们标明数字的那台portal 出了问题<br>解决方法：将浏览器右侧下拉滑动条拉到底，底部蓝底白字“武汉理工大学网络信息中心-X”，截取数字“X”，告知我们，我们会对出问题的portal服务器进行处理；同时将网络断开重连，清理浏览器缓存，刷新页面，可以自动跳转到其他工作正常的portal。</p><p><em><strong>不要使用浏览器收藏的认证地址认证！！</strong></em><br><em><strong>处理过程中，一定要注意清除浏览器缓存！！</strong></em></p><p>咨询电话：<a href="87651975">87651975</a></p><h2 id="网费查询、解绑MAC、关闭无感知认证"><a href="#网费查询、解绑MAC、关闭无感知认证" class="headerlink" title="网费查询、解绑MAC、关闭无感知认证"></a>网费查询、解绑MAC、关闭无感知认证</h2><p>登录自服务系统：selfaaa.whut.edu.cn操作<br>咨询电话：87651975</p><h2 id="如何进行网费充值"><a href="#如何进行网费充值" class="headerlink" title="如何进行网费充值"></a>如何进行网费充值</h2><p>电脑登录缴费平台：cwsf.whut.edu.cn，按提示操作。<br>咨询电话：87651975</p><h2 id="宿舍区网络计费说明"><a href="#宿舍区网络计费说明" class="headerlink" title="宿舍区网络计费说明"></a>宿舍区网络计费说明</h2><p>宿舍区网络付费使用，当账户余额大于等于20元时，自动开通。资费标准：20元&#x2F;周期，首次在宿舍区登录使用之日为一个周期的开始，后推30天为结算日期，结算日期扣除周期费用。当账户余额不足20元时，宿舍区网络不能开通，登录时提示账户欠费。</p><p><strong>校园网计费规则：</strong></p><p>宿舍区校园网采用包月（周期）制，按30天算一个月（非自然月），以首次在宿舍区登录为起始日，30天一个月（周期），到期系统自动结算扣费。</p><p>一个周期结束后，如果不用，就不再计费，下次开始使用之日，再开始新的月（周期）</p><p><img src="/2022/03/05/%E6%9C%8D%E5%8A%A1%E6%9D%BF%E5%9D%97%E7%9A%84%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/%E5%9B%BE%E7%89%877.png"></p><p>咨询电话：<a href="87651975">87651975</a></p><h2 id="无感知认证出错问题"><a href="#无感知认证出错问题" class="headerlink" title="无感知认证出错问题"></a>无感知认证出错问题</h2><p>校园网启用了无感知认证，无感知认证会绑定设备的MAC地址. </p><p>如果设备的MAC地址为随机分配状态或安装了修改MAC地址的软件，则会导致无感知认证失败，故需关闭设备的随机MAC地址状态。</p><p>以下是部分华为手机、苹果手机及Win 10系统关闭该功能的操作，其他设备可参照操作。</p><h3 id="一、华为手机"><a href="#一、华为手机" class="headerlink" title="一、华为手机"></a>一、华为手机</h3><p><img src="/2022/03/05/%E6%9C%8D%E5%8A%A1%E6%9D%BF%E5%9D%97%E7%9A%84%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/%E5%9B%BE%E7%89%878.png" alt="图片8"></p><p><img src="/2022/03/05/%E6%9C%8D%E5%8A%A1%E6%9D%BF%E5%9D%97%E7%9A%84%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/%E5%9B%BE%E7%89%879.png" alt="图片9"></p><p><img src="/2022/03/05/%E6%9C%8D%E5%8A%A1%E6%9D%BF%E5%9D%97%E7%9A%84%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/%E5%9B%BE%E7%89%8710.png" alt="图片10"></p><p>同上的步骤，依次将要连接的信号,修改成使用设备MAC。</p><h3 id="二、苹果手机"><a href="#二、苹果手机" class="headerlink" title="二、苹果手机"></a>二、苹果手机</h3><p><img src="/2022/03/05/%E6%9C%8D%E5%8A%A1%E6%9D%BF%E5%9D%97%E7%9A%84%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/%E5%9B%BE%E7%89%8711.png"></p><p>同上步骤，关闭其他WLAN的私有地址开关。</p><h3 id="三、电脑"><a href="#三、电脑" class="headerlink" title="三、电脑"></a>三、电脑</h3><p>部分电脑系统的无线网卡也有随机MAC地址设置，也需要关闭该功能。</p><p>如部分Win 10系统，可参照以下操作：</p><p>1、打开设置，选择网络和Internet，选择WLAN（WiFi），选中使用的网络，点击“高级选项”；</p><p>2、打开“针对此网络使用随机硬件地址”，还可设置为每天自动更改Mac地址；</p><p>3、点击“管理WiFi设置”，关闭“使用随机硬件地址”即可。</p><p><img src="/2022/03/05/%E6%9C%8D%E5%8A%A1%E6%9D%BF%E5%9D%97%E7%9A%84%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/%E5%9B%BE%E7%89%8712.png"></p><p>关闭随机MAC状态需要对每个网络信号执行操作，目前校园网可连接的无线网络信号如下：(区域不一样，信号可能不一样)。</p><p>WHUT-WLAN         办公区IPv4网络信号<br>WHUT-WLAN6        办公区IPv4&#x2F;IPv6网络信号<br>WHUT-WLAN-DORM    宿舍区IPv4网络信号<br>WHUT-WLAN-DORM6   宿舍区IPv4&#x2F;IPv6网络信号</p><h1 id="校园VPN"><a href="#校园VPN" class="headerlink" title="校园VPN"></a>校园VPN</h1><h2 id="VPN能正常连接，但不能打开校内主页"><a href="#VPN能正常连接，但不能打开校内主页" class="headerlink" title="VPN能正常连接，但不能打开校内主页"></a>VPN能正常连接，但不能打开校内主页</h2><p>一般情况，这是系统的默认浏览器不能正常跳转到内网主页链接的问题，尤其默认浏览为360浏览器常常会出现这种情况。</p><p>处理办法：</p><p>1、修改本机的默认浏览器，建议使用Edge浏览器；</p><p>2、登录VPN系统后，重新打开浏览器如Edge、谷歌Chrome（非360浏览器）,在浏览器中输入<a href="http://i.whut.edu.cn/">校内主页网址</a>：i.whut.edu.cn。</p><p>咨询电话：<a href="87651975">87651975</a></p><h2 id="拿不到虚拟IP地址的问题"><a href="#拿不到虚拟IP地址的问题" class="headerlink" title="拿不到虚拟IP地址的问题"></a>拿不到虚拟IP地址的问题</h2><p>安装了客户端后，拿不到虚拟地址（连接属性中虚拟IP地址0.0.0.0），是因为系统缺少控件，需要安装控件。</p><p>处理方式：</p><p>方法一、访问<a href="https://vpnu.whut.edu.cn/">VPN页面</a>：<a href="https://vpnu.whut.edu.cn/">https://vpnu.whut.edu.cn</a> (用Edge)，不登录选择中间的“一键修复工具”，下载运行安装程序，自动安装系统所需的控件。再启动VPN客户端，连接、登录。</p><p>方法二、访问<a href="http://www.whut.edu.cn/2015web/tzgg/201702/t20170217_256594.htm%E9%80%9A%E7%9F%A5%E3%80%82%E4%B8%8B%E8%BD%BD%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%B8%80%E9%94%AE%E4%BF%AE%E5%A4%8D%E5%B7%A5%E5%85%B7%EF%BC%8C%E8%BF%90%E8%A1%8C%E5%AE%89%E8%A3%85%E3%80%82%E5%86%8D%E5%90%AF%E5%8A%A8VPN%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E8%BF%9E%E6%8E%A5%E3%80%81%E7%99%BB%E5%BD%95%E3%80%82">http://www.whut.edu.cn/2015web/tzgg/201702/t20170217_256594.htm通知。下载下面的一键修复工具，运行安装。再启动VPN客户端，连接、登录。</a></p><p>咨询电话：<a href="87651975">87651975</a></p><h1 id="邮件系统"><a href="#邮件系统" class="headerlink" title="邮件系统"></a>邮件系统</h1><h2 id="1、邮箱自助申请"><a href="#1、邮箱自助申请" class="headerlink" title="1、邮箱自助申请"></a>1、邮箱自助申请</h2><p>登录智慧理工大，点击“校内邮箱”，如果没有邮箱，即可自助申请。</p><h2 id="2、邮箱密码重置"><a href="#2、邮箱密码重置" class="headerlink" title="2、邮箱密码重置"></a>2、邮箱密码重置</h2><p>邮箱密码是用户通过智慧校园申请邮箱时自行设置。<br>邮件系统密码忘记了，如果绑定了手机，可以直接通过登录页面：mail.whut.edu.cn，的“忘记密码”找回；如果没有绑定手机，可以携带有效证件到马区鉴主19层（87651975），余区港口楼对面计算机学院实验中心2楼（86548310）网络信息中心用户部重置，也可以将校园卡拍个照和邮箱名、手机号等信息一同发送邮件至<a href="mailto:&#110;&#x6f;&#99;&#x40;&#119;&#x68;&#117;&#x74;&#46;&#101;&#100;&#x75;&#46;&#x63;&#110;">&#110;&#x6f;&#99;&#x40;&#119;&#x68;&#117;&#x74;&#46;&#101;&#100;&#x75;&#46;&#x63;&#110;</a>，请管理员处理。</p><h2 id="3、邮箱客户端配置"><a href="#3、邮箱客户端配置" class="headerlink" title="3、邮箱客户端配置"></a>3、邮箱客户端配置</h2><p>访问<a href="http://mail.whut.edu.cn/">邮件系统网页</a>：mail.whut.edu.cn，在页面右上方下载“客户端配置”文档，参照操作。<br>咨询电话：87651975</p><h1 id="一卡通问题"><a href="#一卡通问题" class="headerlink" title="一卡通问题"></a>一卡通问题</h1><h2 id="补卡"><a href="#补卡" class="headerlink" title="补卡"></a>补卡</h2><p>持卡人本人携带身份证、学生证或工作证到一卡通服务中心办理</p><h2 id="转账、查询"><a href="#转账、查询" class="headerlink" title="转账、查询"></a>转账、查询</h2><p>可以登录<a href="http://shall.whut.edu.cn/">校园卡综合服务网站: </a><a href="http://shall.whut.edu.cn,查询交易流水、银行卡向电子账户和卡钱包转账等操作,也可以在分布于食堂、教学楼、医院等地方的圈存机上完成./">http://shall.whut.edu.cn，查询交易流水、银行卡向电子账户和卡钱包转账等操作，也可以在分布于食堂、教学楼、医院等地方的圈存机上完成。</a></p><h2 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h2><h3 id="（1）密码类别"><a href="#（1）密码类别" class="headerlink" title="（1）密码类别"></a>（1）密码类别</h3><p>校园卡密码分为查询密码和交易密码，默认都取身份证的后六位（末位为X的，则去掉X后，取后六位）。<br>查询密码用于在圈存机上查询、网上转账操作和以电子账户缴费时的支付验证。<br>交易密码用于持卡消费时，超出限额后的支付验证。</p><h3 id="（2）密码重置"><a href="#（2）密码重置" class="headerlink" title="（2）密码重置"></a>（2）密码重置</h3><p><strong>查询密码：</strong></p><p>可以自行在圈存机、校园卡综合服务网站重置，也可以持卡（需同时携带相关身份证件）到卡务中心重置。</p><p><strong>交易密码：</strong></p><p>可以自行在圈存机和持卡（需同时携带相关身份证件）到卡务中心重置。</p><h2 id="卡务中心地址及电话"><a href="#卡务中心地址及电话" class="headerlink" title="卡务中心地址及电话"></a>卡务中心地址及电话</h2><p><strong>一卡通服务中心办公地址：</strong></p><p>东院学生二公寓对面工商银行一楼（87859108）；<br>鉴湖校区（西七食堂）南侧工商银行自助点内（87669108）；<br>余区工会活动中心旁（86539108）。</p><p><strong>上班时间：</strong></p><p>周一一周五09:00-16:00，现金充值时间：9：00—15:00。</p><p><strong>卡务中心校园卡语音服务电话：</strong></p><p><a href="027-87651807">电话</a>：027-87651807</p><h1 id="微信、支付宝身份绑定问题"><a href="#微信、支付宝身份绑定问题" class="headerlink" title="微信、支付宝身份绑定问题"></a>微信、支付宝身份绑定问题</h1><p>绑定密码（一卡通查询密码）错误拨打<a href="87669108">电话</a>：87669108</p><p>绑定身份问题拨打<a href="87297256">智慧校园电话</a>：87297256</p><p>问题咨询<a href="700852640">QQ群</a>：700852640</p>]]></content>
    
    
    <summary type="html">校园服务的解答</summary>
    
    
    
    <category term="工具" scheme="http://l1562007999.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="教程" scheme="http://l1562007999.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="答疑" scheme="http://l1562007999.github.io/tags/%E7%AD%94%E7%96%91/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法学习</title>
    <link href="http://l1562007999.github.io/2022/03/03/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80/"/>
    <id>http://l1562007999.github.io/2022/03/03/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80/</id>
    <published>2022-03-03T00:41:41.000Z</published>
    <updated>2022-04-06T11:12:00.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学会使用6个级别的标题"><a href="#学会使用6个级别的标题" class="headerlink" title="学会使用6个级别的标题"></a>学会使用6个级别的标题</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h2><blockquote><p>在新的一行上, 书写一个#号 一个空格 加上你的标题  就生成了一级标题; </p><p>把一个#号换成两个#号 就是二级标题了, 一直可以加到6个#号; </p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h2><p>#空格一级标题</p><p>##空格二级标题</p><p>###空格三级标题</p><p>####空格四级标题</p><p>#####空格五级标题</p><p>######空格六级标题</p><h1 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法:"></a>语法:</h2><blockquote><p>加粗的字体左右两边各加两个*号</p><p>斜体的字体左右两边各加一个*号</p><p>加粗且斜体的字体两边各加三个*号</p><p>为文字添加删除线则在问题两边各加两个~号</p></blockquote><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用:"></a>使用:</h2><p><strong>你好壮啊</strong></p><p><em>倾斜的世界</em></p><p><em><strong>倾斜且膨胀的世界</strong></em></p><p><del>消逝的光芒</del></p><h1 id="引用内容"><a href="#引用内容" class="headerlink" title="引用内容"></a>引用内容</h1><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法:"></a>语法:</h2><blockquote><p>在新的一行中写上大于号&gt; 再加上你的内容 就可以显示为引用的内容了</p><p>写上两个大于号&gt;&gt; 就可以缩进一个引用层级了</p></blockquote><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用:"></a>使用:</h2><blockquote><p>小例子(  这样书写的 &gt;小例子  )</p><blockquote><p>小例子(&gt;&gt;小例子)</p></blockquote></blockquote><h1 id="书写分割线"><a href="#书写分割线" class="headerlink" title="书写分割线"></a>书写分割线</h1><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法:"></a>语法:</h2><blockquote><p>在新的一行上写上三个*号或者三个-号 就可以显示为分割线了(—)</p></blockquote><h2 id="使用-3"><a href="#使用-3" class="headerlink" title="使用:"></a>使用:</h2><hr><h1 id="引用图片"><a href="#引用图片" class="headerlink" title="引用图片"></a>引用图片</h1><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法:"></a>语法:</h2><blockquote><p>不推荐使用markdown语法使用本地图片  </p><p>使用网络图床更方便</p><blockquote><p>具体方法: 图床网站 <a href="https://sm.ms/">https://sm.ms/</a> 上传图片 </p><p>上传图片之后使用markdown链接即可</p></blockquote></blockquote><h2 id="使用-4"><a href="#使用-4" class="headerlink" title="使用:"></a>使用:</h2><p><img src="https://s2.loli.net/2022/03/03/1VTwZqc8sG97g6y.png" alt="Snipaste_2022-03-03_09-12-06.png"></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><h2 id="语法-5"><a href="#语法-5" class="headerlink" title="语法:"></a>语法:</h2><blockquote><p>将要设置超链接的文字用中括号[]包起来  中括号后面加上小括号(), 小括号里填上链接地址即可</p><p>注意链接地址一定要完整:<a href="https://www.baidu.com/">https://www.baidu.com</a>  带有<a href="https://www/">https://www</a>. </p></blockquote><h2 id="使用-5"><a href="#使用-5" class="headerlink" title="使用:"></a>使用:</h2><p><a href="https://www.baidu.com/">百度</a></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法:"></a>语法:</h2><blockquote><p>有序列表:直接在在每一行前面添加1.空格  第二行前面  2.空格     3.空格      等 即可</p><p>无序列表: 在一行的前面写一个*号加上空格   或者+号加上空格      或者-号加上空格</p><p>列表缩进: 无序列表可以缩进 下一行按下Tab键会自动出现</p></blockquote><h2 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li><p>在问口</p></li><li><p>在路边</p></li><li><p>在乐园</p></li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li><p>大弦嘈嘈如急雨</p></li><li><p>小弦切切如私语</p></li><li><p>嘈嘈切切错杂弹</p></li><li><p>大珠小珠落玉盘</p><ul><li>白居易</li></ul></li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="语法-7"><a href="#语法-7" class="headerlink" title="语法:"></a>语法:</h2><blockquote><p>表头用竖线| 隔开, 左右两边也要有竖线才行</p><p>表头与内容用一行中的—|  隔开</p><p>内容用竖线| 隔开</p><p>文字默认居左<br>-两边加竖线：表示文字居中<br>-右边加竖线：表示文字居右 </p></blockquote><h2 id="使用-6"><a href="#使用-6" class="headerlink" title="使用:"></a>使用:</h2><table><thead><tr><th>名字</th><th>班级</th><th>学号</th></tr></thead><tbody><tr><td>Sammy</td><td>研211</td><td>123456</td></tr><tr><td>Alice</td><td>研212</td><td>234567</td></tr><tr><td>Michale</td><td>研213</td><td>45678</td></tr></tbody></table><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="语法-8"><a href="#语法-8" class="headerlink" title="语法:"></a>语法:</h2><blockquote><p>一行代码用&#96;号包起来即可</p><p>多行代码 用三个&#96;&#96;&#96;号 接输入语言名字   再书写带代码内容  再以三个&#96;&#96;&#96;&#96;号结束就可以了</p></blockquote><h2 id="使用-7"><a href="#使用-7" class="headerlink" title="使用:"></a>使用:</h2><p><code>&lt;div&gt;你们好&lt;/div&gt;</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">&lt;/styel&gt;</span></span><br></pre></td></tr></table></figure><p>其实还有一个流程图的语法 但是想着用处不大  就不写了</p>]]></content>
    
    
    <summary type="html">学习简单点的Markdown语法, 让你的博客样式更出彩</summary>
    
    
    
    <category term="工具" scheme="http://l1562007999.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="教程" scheme="http://l1562007999.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Markdown" scheme="http://l1562007999.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
